################################################################################
#                                                                              #
#      IAR Universal Linker V4.61L/W32                                         #
#                                                                              #
#           Link time     =  20/Dec/2013  20:20:52                             #
#           Target CPU    =  A90                                               #
#           List file     =  C:\work\ATmega128_Debug\List\TIEF.map             #
#           Output file 1 =  C:\work\ATmega128_Debug\Exe\TIEF.d90              #
#                            Format: debug                                     #
#                            UBROF version 10.0.2                              #
#                            Using library modules for C-SPY (-r)              #
#           Command line  =  C:\work\ATmega128_Debug\Obj\ANSI200.r90           #
#                            C:\work\ATmega128_Debug\Obj\BCComponentManager.r9 #
#                            0                                                 #
#                            C:\work\ATmega128_Debug\Obj\CalClkFuncGen.r90     #
#                            C:\work\ATmega128_Debug\Obj\DriverFactory.r90     #
#                            C:\work\ATmega128_Debug\Obj\MC_E02SMB_v1_3DriverF #
#                            actory.r90                                        #
#                            C:\work\ATmega128_Debug\Obj\Power_Manager.r90     #
#                            C:\work\ATmega128_Debug\Obj\StdConsole.r90        #
#                            C:\work\ATmega128_Debug\Obj\System_Info.r90       #
#                            C:\work\ATmega128_Debug\Obj\System_Manager.r90    #
#                            C:\work\ATmega128_Debug\Obj\System_main.r90       #
#                            C:\work\ATmega128_Debug\Obj\Term_Project_s.r90    #
#                            C:\work\ATmega128_Debug\Obj\TimerManager.r90      #
#                            C:\work\ATmega128_Debug\Obj\adc.r90               #
#                            C:\work\ATmega128_Debug\Obj\avr_WatchDog.r90      #
#                            C:\work\ATmega128_Debug\Obj\avr_adc.r90           #
#                            C:\work\ATmega128_Debug\Obj\avr_common.r90        #
#                            C:\work\ATmega128_Debug\Obj\avr_nv_ram.r90        #
#                            C:\work\ATmega128_Debug\Obj\avr_pwm.r90           #
#                            C:\work\ATmega128_Debug\Obj\avr_sleep.r90         #
#                            C:\work\ATmega128_Debug\Obj\avr_spi.r90           #
#                            C:\work\ATmega128_Debug\Obj\avr_timer.r90         #
#                            C:\work\ATmega128_Debug\Obj\avr_uart.r90          #
#                            C:\work\ATmega128_Debug\Obj\clcd.r90              #
#                            C:\work\ATmega128_Debug\Obj\clcd_adaptor.r90      #
#                            C:\work\ATmega128_Debug\Obj\dac7512.r90           #
#                            C:\work\ATmega128_Debug\Obj\dio.r90               #
#                            C:\work\ATmega128_Debug\Obj\dio_adaptor.r90       #
#                            C:\work\ATmega128_Debug\Obj\led.r90               #
#                            C:\work\ATmega128_Debug\Obj\mcp3204.r90           #
#                            C:\work\ATmega128_Debug\Obj\pwm.r90               #
#                            C:\work\ATmega128_Debug\Obj\ringbuffer.r90        #
#                            C:\work\ATmega128_Debug\Obj\serialIO.r90          #
#                            C:\work\ATmega128_Debug\Obj\split2.r90            #
#                            C:\work\ATmega128_Debug\Obj\terminal_service.r90  #
#                            C:\work\ATmega128_Debug\Obj\type.r90              #
#                            C:\work\ATmega128_Debug\Obj\xmodem.r90 -o         #
#                            C:\work\ATmega128_Debug\Exe\TIEF.d90 -B -z -G     #
#                            -l C:\work\ATmega128_Debug\List\TIEF.map          #
#                            -xmsnio                                           #
#                            "-IC:\Program Files\IAR Systems\Embedded Workbenc #
#                            h 5.4\avr\LIB\"                                   #
#                            -f                                                #
#                            "C:\Program Files\IAR Systems\Embedded Workbench  #
#                            5.4\avr\src\template\cfgm128.xcl"                 #
#                            (-D_..X_INTVEC_SIZE=8C -D_..X_FLASH_NEND=FFFF     #
#                            -D_..X_FLASH_END=1FFFF -D_..X_SRAM_BASE=100       #
#                            -D_..X_SRAM_TBASE=0 -D_..X_SRAM_TSIZE=0           #
#                            -D_..X_SRAM_END=10FF -D_..X_EEPROM_END=FFF        #
#                            -D_..X_EEPROM_START=0) -D_..X_HEAP_SIZE=0         #
#                            -D_..X_TINY_HEAP_SIZE=0                           #
#                            -D_..X_NEAR_HEAP_SIZE=260                         #
#                            -D_..X_FAR_HEAP_SIZE=0 -D_..X_HUGE_HEAP_SIZE=0    #
#                            -D_..X_CSTACK_SIZE=2C0 -D_..X_RSTACK_SIZE=40 -f   #
#                            "C:\Program Files\IAR Systems\Embedded Workbench  #
#                            5.4\avr\src\template\cfg3soim.xcl"                #
#                            (-ca90 -w29                                       #
#                            -Z(CODE)INTVEC=0-(_..X_INTVEC_SIZE-1)             #
#                            -Z(CODE)TINY_F=_..X_FLASH_BASE-FF                 #
#                            -Z(CODE)NEAR_F=_..X_FLASH_BASE-_..X_FLASH_NEND    #
#                            -Z(CODE)SWITCH=_..X_FLASH_BASE-_..X_FLASH_NEND    #
#                            -Z(CODE)DIFUNCT=_..X_FLASH_BASE-_..X_FLASH_NEND   #
#                            -Z(CODE)CODE=_..X_FLASH_BASE-_..X_FLASH_END       #
#                            -Z(CODE)FAR_F=[_..X_FLASH_BASE-_..X_FLASH_END]/10 #
#                            000                                               #
#                            -Z(CODE)INITTAB=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)HUGE_F=_..X_FLASH_BASE-_..X_FLASH_END     #
#                            -Z(CODE)TINY_ID=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)NEAR_ID=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)CHECKSUM#_..X_FLASH_END                   #
#                            -Z(DATA)TINY_I,TINY_Z,TINY_N=_..X_SRAM_TBASE:+_.. #
#                            X_SRAM_TSIZE                                      #
#                            -Z(DATA)CSTACK+_..X_CSTACK_SIZE=_..X_CSTACK_BASE- #
#                            _..X_CSTACK_END                                   #
#                            -Z(DATA)HEAP+_..X_HEAP_SIZE=_..X_SRAM_BASE-_..X_S #
#                            RAM_END                                           #
#                            -Z(DATA)IOSTREAM_N#_..X_SRAM_BASE-_..X_SRAM_END   #
#                            -Z(DATA)NEAR_HEAP+_..X_NEAR_HEAP_SIZE=_..X_SRAM_B #
#                            ASE-_..X_SRAM_END                                 #
#                            -Z(DATA)RSTACK+_..X_RSTACK_SIZE=_..X_RSTACK_BASE- #
#                            _..X_RSTACK_END                                   #
#                            -Z(DATA)NEAR_I,NEAR_Z,NEAR_N=_..X_SRAM_BASE-_..X_ #
#                            SRAM_END                                          #
#                            -Z(XDATA)EEPROM_I,EEPROM_N=_..X_EEPROM_START-_..X #
#                            _EEPROM_END)                                      #
#                            -D_..X_FLASH_BASE=_..X_INTVEC_SIZE -H1895         #
#                            -h(CODE)0-(_..X_INTVEC_SIZE-1)                    #
#                            -D_..X_EXT_SRAM_BASE=_..X_SRAM_END                #
#                            -D_..X_EXT_SRAM_SIZE=0                            #
#                            -D_..X_EXT_ROM_BASE=_..X_SRAM_END                 #
#                            -D_..X_EXT_ROM_SIZE=0                             #
#                            -D_..X_EXT_NV_BASE=_..X_SRAM_END                  #
#                            -D_..X_EXT_NV_SIZE=0                              #
#                            -D_..X_CSTACK_BASE=_..X_SRAM_BASE                 #
#                            -D_..X_CSTACK_END=_..X_SRAM_END                   #
#                            -D_..X_RSTACK_BASE=_..X_SRAM_BASE                 #
#                            -D_..X_RSTACK_END=_..X_SRAM_END -r -s             #
#                            __program_start                                   #
#                            "C:\Program Files\IAR Systems\Embedded Workbench  #
#                            5.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.r90"           #
#                            -e_PrintfLarge=_Printf -e_ScanfSmall=_Scanf       #
#                                                                              #
#                           Copyright (C) 1987-2009 IAR Systems AB.            #
################################################################################





                ****************************************
                *                                      *
                *           CROSS REFERENCE            *
                *                                      *
                ****************************************

       Program entry at : CODE      00000000  Relocatable, from module : ?RESET




                ****************************************
                *                                      *
                *            RUNTIME MODEL             *
                *                                      *
                ****************************************

  R10                        = REG
  R11                        = REG
  R12                        = REG
  R13                        = REG
  R14                        = REG
  R15                        = REG
  R4                         = REG
  R5                         = REG
  R6                         = REG
  R7                         = REG
  R8                         = REG
  R9                         = REG
  __64bit_doubles            = disabled
  __cpu                      = 3
  __cpu_name                 = ATmega128
  __dlib_file_descriptor     = 0
  __dlib_full_locale_support = 0
  __enhanced_core            = enabled
  __has_elpm                 = true
  __memory_model             = 2
  __no_rampd                 = enabled
  __rt_version               = 3
  __tiny_avr                 = false



                ****************************************
                *                                      *
                *              MODULE MAP              *
                *                                      *
                ****************************************


  DEFINED ABSOLUTE ENTRIES
  PROGRAM MODULE, NAME : ?ABS_ENTRY_MOD

Absolute parts
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _..X_RSTACK_END         000010FF 
           _..X_RSTACK_BASE        00000100 
           _..X_CSTACK_END         000010FF 
           _..X_CSTACK_BASE        00000100 
           _..X_EXT_NV_SIZE        00000000 
           _..X_EXT_NV_BASE        000010FF 
           _..X_EXT_ROM_SIZE       00000000 
           _..X_EXT_ROM_BASE       000010FF 
           _..X_EXT_SRAM_SIZE      00000000 
           _..X_EXT_SRAM_BASE      000010FF 
           _..X_FLASH_BASE         0000008C 
           _..X_RSTACK_SIZE        00000040 
           _..X_CSTACK_SIZE        000002C0 
           _..X_HUGE_HEAP_SIZE     00000000 
           _..X_FAR_HEAP_SIZE      00000000 
           _..X_NEAR_HEAP_SIZE     00000260 
           _..X_TINY_HEAP_SIZE     00000000 
           _..X_HEAP_SIZE          00000000 
           _..X_EEPROM_START       00000000 
           _..X_EEPROM_END         00000FFF 
           _..X_SRAM_END           000010FF 
           _..X_SRAM_TSIZE         00000000 
           _..X_SRAM_TBASE         00000000 
           _..X_SRAM_BASE          00000100 
           _..X_FLASH_END          0001FFFF 
           _..X_FLASH_NEND         0000FFFF 
           _..X_INTVEC_SIZE        0000008C 
    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\ANSI200.r90
  PROGRAM MODULE, NAME : ANSI200

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 0000001C, align: 0
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 0000001C 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000001D, align: 0
  Segment part 2. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 0000001D 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000001E, align: 0
  Segment part 3. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                0000001E 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000001F, align: 0
  Segment part 4. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                0000001F 
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\BCComponentManager.r90
  PROGRAM MODULE, NAME : BCComponentManager

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00000D76 - 00000D77 (0x2 bytes), align: 0
  Segment part 23.            Intra module refs:   BCComponentManager::BCComponentManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::Instantce
                                   00000D76 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000D78 - 00000D79 (0x2 bytes), align: 0
  Segment part 25.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   BCComponentManager::CreateDIn()
                                                   BCComponentManager::CreatePwm()
                                                   BCComponentManager::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::Driver
                                   00000D78 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000660 - 0000066E (0xf bytes), align: 0
  Segment part 10.            Intra module refs:   BCComponentManager::BCComponentManager()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000066F - 000006AC (0x3e bytes), align: 0
  Segment part 13.            Intra module refs:   BCComponentManager::BCComponentManager()
                                                   BCComponentManager::Init()
                                                   BCComponentMod::Execute()
                                                   BCComponentMod::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006AD - 000006B8 (0xc bytes), align: 0
  Segment part 15.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006B9 - 000006C1 (0x9 bytes), align: 0
  Segment part 17.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006C2 - 000006C9 (0x8 bytes), align: 0
  Segment part 19.            Intra module refs:   BCComponentMod::Execute()
                                                   BCComponentMod::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006CA - 000006D6 (0xd bytes), align: 0
  Segment part 21.            Intra module refs:   BCComponentMod::Execute()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006D7 - 000006DC (0x6 bytes), align: 0
  Segment part 27.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000D7A - 00000D7F (0x6 bytes), align: 0
  Segment part 26.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 28
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           bcmod                   00000D7A 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000D80 - 00000D81 (0x2 bytes), align: 0
  Segment part 29.            Intra module refs:   Segment part 28
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002CC - 000002E1 (0x16 bytes), align: 1
  Segment part 62.            Intra module refs:   Segment part 31
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 1>             000002CC 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006DD - 000006E2 (0x6 bytes), align: 0
  Segment part 30.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000D82 - 00000D83 (0x2 bytes), align: 0
  Segment part 32.            Intra module refs:   Segment part 31
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000D84 - 00000D84 (0x1 bytes), align: 0
  Segment part 33.            Intra module refs:   BCComponentManager::Init()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init()::static guard for _serial0
                                   00000D84 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000D85 - 00000DA7 (0x23 bytes), align: 0
  Segment part 34.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 31
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init()::_serial0
                                   00000D85 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006E3 - 000006E8 (0x6 bytes), align: 0
  Segment part 35.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DA8 - 00000DA9 (0x2 bytes), align: 0
  Segment part 37.            Intra module refs:   Segment part 36
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002E2 - 000002F7 (0x16 bytes), align: 1
  Segment part 63.            Intra module refs:   Segment part 36
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 2>             000002E2 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DAA - 00000DAA (0x1 bytes), align: 0
  Segment part 38.            Intra module refs:   BCComponentManager::Init()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init(){2}::static guard for timer
                                   00000DAA 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DAB - 00000DB4 (0xa bytes), align: 0
  Segment part 39.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 36
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init(){2}::timer
                                   00000DAB 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006E9 - 000006EE (0x6 bytes), align: 0
  Segment part 40.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DB5 - 00000DB6 (0x2 bytes), align: 0
  Segment part 42.            Intra module refs:   Segment part 41
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002F8 - 0000030D (0x16 bytes), align: 1
  Segment part 64.            Intra module refs:   Segment part 41
                                                   Segment part 46
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 3>             000002F8 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DB7 - 00000DB7 (0x1 bytes), align: 0
  Segment part 43.            Intra module refs:   BCComponentManager::Init()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init(){4}::static guard for ta0
                                   00000DB7 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DB8 - 00000DC1 (0xa bytes), align: 0
  Segment part 44.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 41
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init(){4}::ta0
                                   00000DB8 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006EF - 000006F4 (0x6 bytes), align: 0
  Segment part 45.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DC2 - 00000DC3 (0x2 bytes), align: 0
  Segment part 47.            Intra module refs:   Segment part 46
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DC4 - 00000DC4 (0x1 bytes), align: 0
  Segment part 48.            Intra module refs:   BCComponentManager::Init()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init(){6}::static guard for ta1
                                   00000DC4 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DC5 - 00000DCE (0xa bytes), align: 0
  Segment part 49.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 46
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::Init(){6}::ta1
                                   00000DC5 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006F5 - 000006FA (0x6 bytes), align: 0
  Segment part 50.            Intra module refs:   BCComponentManager::CreateAdc()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DCF - 00000DD0 (0x2 bytes), align: 0
  Segment part 52.            Intra module refs:   Segment part 51
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000030E - 00000323 (0x16 bytes), align: 1
  Segment part 65.            Intra module refs:   Segment part 51
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 4>             0000030E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DD1 - 00000DD1 (0x1 bytes), align: 0
  Segment part 53.            Intra module refs:   BCComponentManager::CreateAdc()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::CreateAdc()::static guard for adc
                                   00000DD1 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DD2 - 00000DDD (0xc bytes), align: 0
  Segment part 54.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   Segment part 51
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::CreateAdc()::adc
                                   00000DD2 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006FB - 00000700 (0x6 bytes), align: 0
  Segment part 55.            Intra module refs:   BCComponentManager::CreatePwm()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DDE - 00000DDF (0x2 bytes), align: 0
  Segment part 57.            Intra module refs:   Segment part 56
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000324 - 00000339 (0x16 bytes), align: 1
  Segment part 66.            Intra module refs:   Segment part 56
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 5>             00000324 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::new BCComponentManager()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000033A - 00000351 (0x18 bytes), align: 1
  Segment part 68.            Intra module refs:   Segment part 61
           LOCAL                   ADDRESS         
           =====                   =======         
           __sti__routine()        0000033A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000352 - 00000367 (0x16 bytes), align: 1
  Segment part 69.            Intra module refs:   Segment part 28
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             00000352 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000368 - 000003A9 (0x42 bytes), align: 1
  Segment part 70.            Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::BCComponentManager()
                                   00000368 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000003AA - 000005AF (0x206 bytes), align: 1
  Segment part 71.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::Init()
                                   000003AA        main (System_main)
               calls direct and indirect
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000005B0 - 000005B7 (0x8 bytes), align: 1
  Segment part 72.            Intra module refs:   BCComponentMod::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateTimer()
                                   000005B0        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000005B8 - 000005CF (0x18 bytes), align: 1
  Segment part 73.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateLed(enum LED)
                                   000005B8        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000005D0 - 000005E1 (0x12 bytes), align: 1
  Segment part 74.            Intra module refs:   BCComponentMod::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateSerialIO(unsigned char)
                                   000005D0        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000005E2 - 0000060F (0x2e bytes), align: 1
  Segment part 75.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateDIn()
                                   000005E2        Term_Project_s::Init() (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000610 - 0000066F (0x60 bytes), align: 1
  Segment part 76.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateAdc()
                                   00000610        Term_Project_s::Init() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000670 - 000006C1 (0x52 bytes), align: 1
  Segment part 77.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreatePwm()
                                   00000670        Term_Project_s::Init() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DE0 - 00000DE0 (0x1 bytes), align: 0
  Segment part 58.            Intra module refs:   BCComponentManager::CreatePwm()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::CreatePwm()::static guard for pwm
                                   00000DE0 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DE1 - 00000DE5 (0x5 bytes), align: 0
  Segment part 59.            Intra module refs:   BCComponentManager::CreatePwm()
                                                   Segment part 56
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentManager::CreatePwm()::pwm
                                   00000DE1 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DE6 - 00000DEF (0xa bytes), align: 0
  Segment part 60.            Intra module refs:   GetBCComponentManager()
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           bc                      00000DE6 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006C2 - 000006C7 (0x6 bytes), align: 1
  Segment part 78.            Intra module refs:   BCComponentMod::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           GetBCComponentManager()
                                   000006C2        Term_Project_s::Init() (Term_Project_s)
                                                   main (System_main)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006C8 - 000006D9 (0x12 bytes), align: 1
  Segment part 79.            Intra module refs:   Adc::Adc(IAdcPort *) (adc)
                                                   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
                                                   TimerWithLedAdapter::TimerWithLedAdapter(Led *)
                                                   myTimer1s::myTimer1s() (Term_Project_s)
                                                   myTimer500ms::myTimer500ms() (Term_Project_s)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::ITimerEvent(unsigned char, unsigned short)
                                   000006C8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006DA - 000006F7 (0x1e bytes), align: 1
  Segment part 80.            Intra module refs:   Adc::~Adc() (adc)
                                                   DInTimerAdaptor::~DInTimerAdaptor()
                                                   TimerWithLedAdapter::~TimerWithLedAdapter()
                                                   myTimer1s::~myTimer1s() (Term_Project_s)
                                                   myTimer500ms::~myTimer500ms() (Term_Project_s)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::~ITimerEvent()
                                   000006DA 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006F8 - 000006FF (0x8 bytes), align: 1
  Segment part 81.            Intra module refs:   Adc::Run() (adc)
                                                   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
                                                   Term_Project_s::Init() (Term_Project_s)
                                                   TimerWithLedAdapter::TimerWithLedAdapter(Led *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::Resume()   000006F8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000700 - 0000071D (0x1e bytes), align: 1
  Segment part 82.            Intra module refs:   RingBuffer::__vtbl (ringbuffer)
                                                   SerialIO::~SerialIO()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::~RingBuffer()
                                   00000700 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000071E - 00000759 (0x3c bytes), align: 1
  Segment part 83.            Intra module refs:   <Unnamed 1>
                                                   SerialIO::__vtbl (serialIO)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::~SerialIO()   0000071E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000075A - 0000075B (0x2 bytes), align: 1
  Segment part 84.            Intra module refs:   BCComponentMod::BCComponentMod()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IModule::IModule()      0000075A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000075C - 00000779 (0x1e bytes), align: 1
  Segment part 85.            Intra module refs:   BCComponentMod::~BCComponentMod()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IModule::~IModule()     0000075C 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000077A - 000007A3 (0x2a bytes), align: 1
  Segment part 86.            Intra module refs:   <Unnamed 2>
                                                   DInTimerAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInTimerAdaptor::~DInTimerAdaptor()
                                   0000077A 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007A4 - 000007E3 (0x40 bytes), align: 1
  Segment part 87.            Intra module refs:   BCComponentManager::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
                                   000007A4 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007E4 - 000007FB (0x18 bytes), align: 1
  Segment part 88.            Intra module refs:   DInTimerAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInTimerAdaptor::TimeOutEvent()
                                   000007E4 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007FC - 00000825 (0x2a bytes), align: 1
  Segment part 89.            Intra module refs:   <Unnamed 3>
                                                   TimerWithLedAdapter::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerWithLedAdapter::~TimerWithLedAdapter()
                                   000007FC 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000826 - 00000857 (0x32 bytes), align: 1
  Segment part 90.            Intra module refs:   BCComponentManager::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerWithLedAdapter::TimerWithLedAdapter(Led *)
                                   00000826 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000858 - 0000086F (0x18 bytes), align: 1
  Segment part 91.            Intra module refs:   TimerWithLedAdapter::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerWithLedAdapter::TimeOutEvent()
                                   00000858 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000870 - 0000088D (0x1e bytes), align: 1
  Segment part 92.            Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::BCComponentMod()
                                   00000870 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000088E - 000008B7 (0x2a bytes), align: 1
  Segment part 93.            Intra module refs:   <Unnamed 0>
                                                   BCComponentMod::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::~BCComponentMod()
                                   0000088E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000008B8 - 00000905 (0x4e bytes), align: 1
  Segment part 94.            Intra module refs:   BCComponentMod::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::Init()
                                   000008B8 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000906 - 00000993 (0x8e bytes), align: 1
  Segment part 95.            Intra module refs:   BCComponentMod::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::Execute()
                                   00000906 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000057E0 - 000057EE (0xf bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 10
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE 000057D2 - 000057D8 (0x7 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 10
                                                   Segment part 10 (System_main)
                                                   Segment part 10 (clcd)
                                                   Segment part 10 (dio)
                                                   Segment part 11 (CalClkFuncGen)
                                                   Segment part 11 (System_Manager)
                                                   Segment part 11 (TimerManager)
                                                   Segment part 11 (adc)
                                                   Segment part 11 (avr_pwm)
                                                   Segment part 11 (pwm)
                                                   Segment part 11 (serialIO)
                                                   Segment part 12 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 12 (dio)
                                                   Segment part 13
                                                   Segment part 13 (CalClkFuncGen)
                                                   Segment part 13 (TimerManager)
                                                   Segment part 13 (adc)
                                                   Segment part 13 (dio_adaptor)
                                                   Segment part 13 (pwm)
                                                   Segment part 13 (serialIO)
                                                   Segment part 14 (avr_pwm)
                                                   Segment part 15
                                                   Segment part 15 (CalClkFuncGen)
                                                   Segment part 15 (TimerManager)
                                                   Segment part 15 (adc)
                                                   Segment part 15 (pwm)
                                                   Segment part 16 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 16 (Term_Project_s)
                                                   Segment part 16 (dio_adaptor)
                                                   Segment part 17
                                                   Segment part 17 (CalClkFuncGen)
                                                   Segment part 17 (TimerManager)
                                                   Segment part 17 (adc)
                                                   Segment part 17 (avr_uart)
                                                   Segment part 18 (dio_adaptor)
                                                   Segment part 19
                                                   Segment part 19 (CalClkFuncGen)
                                                   Segment part 19 (Term_Project_s)
                                                   Segment part 19 (TimerManager)
                                                   Segment part 19 (serialIO)
                                                   Segment part 20 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 20 (avr_uart)
                                                   Segment part 21
                                                   Segment part 21 (CalClkFuncGen)
                                                   Segment part 21 (Term_Project_s)
                                                   Segment part 21 (serialIO)
                                                   Segment part 23 (CalClkFuncGen)
                                                   Segment part 23 (Term_Project_s)
                                                   Segment part 23 (TimerManager)
                                                   Segment part 23 (serialIO)
                                                   Segment part 24 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 25 (CalClkFuncGen)
                                                   Segment part 25 (Term_Project_s)
                                                   Segment part 27
                                                   Segment part 27 (CalClkFuncGen)
                                                   Segment part 27 (Term_Project_s)
                                                   Segment part 28 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 29 (CalClkFuncGen)
                                                   Segment part 29 (Term_Project_s)
                                                   Segment part 3 (?xprintflarge)
                                                   Segment part 30
                                                   Segment part 31 (CalClkFuncGen)
                                                   Segment part 32 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 33 (CalClkFuncGen)
                                                   Segment part 33 (Term_Project_s)
                                                   Segment part 35
                                                   Segment part 35 (CalClkFuncGen)
                                                   Segment part 36 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 37 (CalClkFuncGen)
                                                   Segment part 37 (Term_Project_s)
                                                   Segment part 39 (CalClkFuncGen)
                                                   Segment part 39 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 40
                                                   Segment part 41 (CalClkFuncGen)
                                                   Segment part 41 (Term_Project_s)
                                                   Segment part 43 (CalClkFuncGen)
                                                   Segment part 45
                                                   Segment part 45 (CalClkFuncGen)
                                                   Segment part 45 (Term_Project_s)
                                                   Segment part 47 (CalClkFuncGen)
                                                   Segment part 49 (CalClkFuncGen)
                                                   Segment part 49 (Term_Project_s)
                                                   Segment part 50
                                                   Segment part 53 (Term_Project_s)
                                                   Segment part 55
                                                   Segment part 57 (Term_Project_s)
                                                   Segment part 6 (?xprintflarge)
                                                   Segment part 61 (Term_Project_s)
                                                   Segment part 65 (Term_Project_s)
                                                   Segment part 69 (Term_Project_s)
                                                   Segment part 7 (System_main)
                                                   Segment part 7 (clcd)
                                                   Segment part 7 (dio)
                                                   Segment part 73 (Term_Project_s)
                                                   Segment part 8 (?xprintflarge)
                                                   Segment part 8 (CalClkFuncGen)
                                                   Segment part 8 (System_Manager)
                                                   Segment part 8 (TimerManager)
                                                   Segment part 8 (adc)
                                                   Segment part 8 (pwm)
                                                   Segment part 8 (serialIO)
                                                   Segment part 9 (MC_E02SMB_v1_3DriverFactory)
                                                   __Constant_0_0 (?xprintflarge)
                                                   flag_Clock (CalClkFuncGen)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   000057D2 
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000057EF - 0000582C (0x3e bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000582D - 00005838 (0xc bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005839 - 00005841 (0x9 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005842 - 00005849 (0x8 bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000584A - 00005856 (0xd bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE 000057D9 - 000057DF (0x7 bytes), align: 0
  Segment part 24.            Intra module refs:   BCComponentManager::CreateAdc()::adc
                                                   BCComponentManager::CreateAdc()::static guard for adc
                                                   BCComponentManager::CreatePwm()::pwm
                                                   BCComponentManager::CreatePwm()::static guard for pwm
                                                   BCComponentManager::Driver
                                                   BCComponentManager::Init()::_serial0
                                                   BCComponentManager::Init()::static guard for _serial0
                                                   BCComponentManager::Init(){2}::static guard for timer
                                                   BCComponentManager::Init(){2}::timer
                                                   BCComponentManager::Init(){4}::static guard for ta0
                                                   BCComponentManager::Init(){4}::ta0
                                                   BCComponentManager::Init(){6}::static guard for ta1
                                                   BCComponentManager::Init(){6}::ta1
                                                   BCComponentManager::Instantce
                                                   DriverFactory::instance (DriverFactory)
                                                   MC_E02SMBDriver (MC_E02SMB_v1_3DriverFactory)
                                                   MC_E02SMBDriverFactory::CreateAdc()::avr_adc (MC_E02SMB_v1_3DriverFactory)
                                                   MC_E02SMBDriverFactory::CreateAdc()::static guard for avr_adc (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 18 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 22 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 25 (TimerManager)
                                                   Segment part 26 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 29
                                                   Segment part 3 (?cppinit)
                                                   Segment part 3 (?xgetmemchunk)
                                                   Segment part 30 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 32
                                                   Segment part 34 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 35 (Term_Project_s)
                                                   Segment part 37
                                                   Segment part 38 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 39 (Term_Project_s)
                                                   Segment part 41 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 42
                                                   Segment part 43 (Term_Project_s)
                                                   Segment part 47
                                                   Segment part 47 (Term_Project_s)
                                                   Segment part 51 (Term_Project_s)
                                                   Segment part 52
                                                   Segment part 55 (Term_Project_s)
                                                   Segment part 57
                                                   Segment part 59 (Term_Project_s)
                                                   Segment part 63 (Term_Project_s)
                                                   Segment part 67 (Term_Project_s)
                                                   Segment part 71 (Term_Project_s)
                                                   Segment part 75 (Term_Project_s)
                                                   SystemManager::instance (System_Manager)
                                                   TimerManager::GetInstance(ITimer *){1}::static guard for tm (TimerManager)
                                                   TimerManager::GetInstance(ITimer *){1}::tm (TimerManager)
                                                   TimerManager::pInstance (TimerManager)
                                                   __iar_New_hand (?new)
                                                   __near_Aldata (?xxmemxmalloc)
                                                   adc_result (avr_adc)
                                                   bc
                                                   bcmod
                                                   ccf (Term_Project_s)
                                                   clcd (MC_E02SMB_v1_3DriverFactory)
                                                   com0 (MC_E02SMB_v1_3DriverFactory)
                                                   flag_EnShift (CalClkFuncGen)
                                                   flag_mode (CalClkFuncGen)
                                                   isconv (avr_adc)
                                                   led0 (MC_E02SMB_v1_3DriverFactory)
                                                   myApp (Term_Project_s)
                                                   myPwmadp (Term_Project_s)
                                                   mySW (Term_Project_s)
                                                   myadcEvent (Term_Project_s)
                                                   mylcdline1 (Term_Project_s)
                                                   mylcdline2 (Term_Project_s)
                                                   myserialEvent (Term_Project_s)
                                                   myserialadp (Term_Project_s)
                                                   mytimer_1sec (Term_Project_s)
                                                   mytimer_500ms (Term_Project_s)
                                                   pwm0 (MC_E02SMB_v1_3DriverFactory)
                                                   swDIn (MC_E02SMB_v1_3DriverFactory)
                                                   timeout (avr_timer)
                                                   timer (MC_E02SMB_v1_3DriverFactory)
                                                   uart0 (avr_uart)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   000057D9 
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005857 - 0000585C (0x6 bytes), align: 0
  Segment part 28.            Intra module refs:   Segment part 27
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000585D - 00005862 (0x6 bytes), align: 0
  Segment part 31.            Intra module refs:   Segment part 30
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005863 - 00005868 (0x6 bytes), align: 0
  Segment part 36.            Intra module refs:   Segment part 35
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005869 - 0000586E (0x6 bytes), align: 0
  Segment part 41.            Intra module refs:   Segment part 40
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000586F - 00005874 (0x6 bytes), align: 0
  Segment part 46.            Intra module refs:   Segment part 45
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005875 - 0000587A (0x6 bytes), align: 0
  Segment part 51.            Intra module refs:   Segment part 50
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000587B - 00005880 (0x6 bytes), align: 0
  Segment part 56.            Intra module refs:   Segment part 55
    -------------------------------------------------------------------------
DIFUNCT
  Relative segment, address: CODE 000002C6 - 000002C7 (0x2 bytes), align: 0
  Segment part 61. ROOT.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000008C - 0000008F (0x4 bytes), align: 0
  Segment part 7.             Intra module refs:   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
           LOCAL                   ADDRESS         
           =====                   =======         
           DInTimerAdaptor::__vtbl
                                   0000008C 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000090 - 00000093 (0x4 bytes), align: 0
  Segment part 8.             Intra module refs:   TimerWithLedAdapter::TimerWithLedAdapter(Led *)
           LOCAL                   ADDRESS         
           =====                   =======         
           TimerWithLedAdapter::__vtbl
                                   00000090 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000094 - 00000099 (0x6 bytes), align: 0
  Segment part 9.             Intra module refs:   BCComponentMod::BCComponentMod()
           LOCAL                   ADDRESS         
           =====                   =======         
           BCComponentMod::__vtbl
                                   00000094 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\CalClkFuncGen.r90
  PROGRAM MODULE, NAME : CalClkFuncGen

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Relative segment, address: DATA 00000701 - 00000710 (0x10 bytes), align: 0
  Segment part 8.             Intra module refs:   CalClkFuncGen::Init()
                                                   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000711 - 0000071E (0xe bytes), align: 0
  Segment part 11.            Intra module refs:   CalClkFuncGen::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000071F - 0000072E (0x10 bytes), align: 0
  Segment part 13.            Intra module refs:   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000072F - 00000759 (0x2b bytes), align: 0
  Segment part 15.            Intra module refs:   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
                                                   CalClkFuncGen::SetPwm(IPwmOut *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000075A - 00000769 (0x10 bytes), align: 0
  Segment part 17.            Intra module refs:   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000076A - 00000776 (0xd bytes), align: 0
  Segment part 19.            Intra module refs:   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000777 - 00000780 (0xa bytes), align: 0
  Segment part 21.            Intra module refs:   CalClkFuncGen::SetPwm(IPwmOut *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000781 - 00000789 (0x9 bytes), align: 0
  Segment part 23.            Intra module refs:   CalClkFuncGen::InputCh(char)
                                                   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000078A - 00000797 (0xe bytes), align: 0
  Segment part 25.            Intra module refs:   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000798 - 000007A8 (0x11 bytes), align: 0
  Segment part 27.            Intra module refs:   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007A9 - 000007B1 (0x9 bytes), align: 0
  Segment part 29.            Intra module refs:   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007B2 - 000007CE (0x1d bytes), align: 0
  Segment part 31.            Intra module refs:   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007CF - 000007D3 (0x5 bytes), align: 0
  Segment part 33.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007D4 - 000007D9 (0x6 bytes), align: 0
  Segment part 35.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007DA - 000007DD (0x4 bytes), align: 0
  Segment part 37.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007DE - 000007F1 (0x14 bytes), align: 0
  Segment part 39.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007F2 - 000007F9 (0x8 bytes), align: 0
  Segment part 41.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000007FA - 00000807 (0xe bytes), align: 0
  Segment part 43.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000808 - 00000813 (0xc bytes), align: 0
  Segment part 45.            Intra module refs:   CalClkFuncGen::InputAdc(unsigned short)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000814 - 00000820 (0xd bytes), align: 0
  Segment part 47.            Intra module refs:   CalClkFuncGen::InputAdc(unsigned short)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000821 - 0000082F (0xf bytes), align: 0
  Segment part 49.            Intra module refs:   CalClkFuncGen::tm1s()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000830 - 00000830 (0x1 bytes), align: 0
  Segment part 51.            Intra module refs:   CalClkFuncGen::InputCh(char)
                                                   CalClkFuncGen::Switch()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           flag_Clock              00000830 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DF0 - 00000DF0 (0x1 bytes), align: 0
  Segment part 53.            Intra module refs:   CalClkFuncGen::InputCh(char)
                                                   CalClkFuncGen::Switch()
                                                   CalClkFuncGen::tm500ms()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           flag_EnShift            00000DF0 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DF1 - 00000DF2 (0x2 bytes), align: 0
  Segment part 55.            Intra module refs:   CalClkFuncGen::InputAdc(unsigned short)
                                                   CalClkFuncGen::InputCh(char)
                                                   CalClkFuncGen::Switch()
                                                   CalClkFuncGen::tm1s()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           flag_mode               00000DF1 
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::new CalClkFuncGen()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000994 - 000009BD (0x2a bytes), align: 1
  Segment part 57.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::CalClkFuncGen()
                                   00000994        __sti__routine() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000009BE - 000009DB (0x1e bytes), align: 1
  Segment part 58.            Intra module refs:   CalClkFuncGen::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::~CalClkFuncGen()
                                   000009BE        <Unnamed 1> (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000009DC - 00000A39 (0x5e bytes), align: 1
  Segment part 59.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::Init()   000009DC        Term_Project_s::Init() (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A3A - 00000A7D (0x44 bytes), align: 1
  Segment part 60.            Intra module refs:   CalClkFuncGen::InputCh(char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::InputTime(char *)
                                   00000A3A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A7E - 00000AEF (0x72 bytes), align: 1
  Segment part 61.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
                                   00000A7E        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000AF0 - 00000B1D (0x2e bytes), align: 1
  Segment part 62.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::SetPwm(IPwmOut *)
                                   00000AF0        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B1E - 00000C9D (0x180 bytes), align: 1
  Segment part 63.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::Switch()
                                   00000B1E        mySWEvent::Changed(enum DInEvent::EDGE) (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C9E - 00000FCF (0x332 bytes), align: 1
  Segment part 64.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::InputCh(char)
                                   00000C9E        mySerialEvent::Receive(unsigned char) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000013 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000FD0 - 00001155 (0x186 bytes), align: 1
  Segment part 65.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::InputAdc(unsigned short)
                                   00000FD0        myAdcAdaptor::Converted(unsigned short) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000032 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001156 - 0000120B (0xb6 bytes), align: 1
  Segment part 66.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::tm1s()   00001156        myTimer1s::TimeOutEvent() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000017 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000120C - 00001259 (0x4e bytes), align: 1
  Segment part 67.            Intra module refs:   CalClkFuncGen::tm500ms()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::StrShift(char *)
                                   0000120C 
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000125A - 0000129F (0x46 bytes), align: 1
  Segment part 68.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::tm500ms()
                                   0000125A        myTimer500ms::TimeOutEvent() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005881 - 00005890 (0x10 bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005891 - 0000589E (0xe bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000589F - 000058AE (0x10 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000058AF - 000058D9 (0x2b bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000058DA - 000058E9 (0x10 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000058EA - 000058F6 (0xd bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000058F7 - 00005900 (0xa bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005901 - 00005909 (0x9 bytes), align: 0
  Segment part 24.            Intra module refs:   Segment part 23
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000590A - 00005917 (0xe bytes), align: 0
  Segment part 26.            Intra module refs:   Segment part 25
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005918 - 00005928 (0x11 bytes), align: 0
  Segment part 28.            Intra module refs:   Segment part 27
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005929 - 00005931 (0x9 bytes), align: 0
  Segment part 30.            Intra module refs:   Segment part 29
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005932 - 0000594E (0x1d bytes), align: 0
  Segment part 32.            Intra module refs:   Segment part 31
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000594F - 00005953 (0x5 bytes), align: 0
  Segment part 34.            Intra module refs:   Segment part 33
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005954 - 00005959 (0x6 bytes), align: 0
  Segment part 36.            Intra module refs:   Segment part 35
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000595A - 0000595D (0x4 bytes), align: 0
  Segment part 38.            Intra module refs:   Segment part 37
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000595E - 00005971 (0x14 bytes), align: 0
  Segment part 40.            Intra module refs:   Segment part 39
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005972 - 00005979 (0x8 bytes), align: 0
  Segment part 42.            Intra module refs:   Segment part 41
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000597A - 00005987 (0xe bytes), align: 0
  Segment part 44.            Intra module refs:   Segment part 43
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005988 - 00005993 (0xc bytes), align: 0
  Segment part 46.            Intra module refs:   Segment part 45
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005994 - 000059A0 (0xd bytes), align: 0
  Segment part 48.            Intra module refs:   Segment part 47
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000059A1 - 000059AF (0xf bytes), align: 0
  Segment part 50.            Intra module refs:   Segment part 49
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000059B0 - 000059B0 (0x1 bytes), align: 0
  Segment part 52.            Intra module refs:   flag_Clock
    -------------------------------------------------------------------------
INITTAB
  Segment part 54. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000009A - 0000009B (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   CalClkFuncGen::CalClkFuncGen()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::__vtbl   0000009A 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\DriverFactory.r90
  PROGRAM MODULE, NAME : DriverFactory

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00000DF3 - 00000DF4 (0x2 bytes), align: 0
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::instance
                                   00000DF3        DriverFactory::DriverFactory() (MC_E02SMB_v1_3DriverFactory)
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\MC_E02SMB_v1_3DriverFactory.r90
  PROGRAM MODULE, NAME : MC_E02SMB_v1_3DriverFactory

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Relative segment, address: DATA 00000831 - 0000083E (0xe bytes), align: 0
  Segment part 9.             Intra module refs:   DriverFactory::DriverFactory()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000083F - 00000876 (0x38 bytes), align: 0
  Segment part 12.            Intra module refs:   DriverFactory::DriverFactory()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000877 - 0000087C (0x6 bytes), align: 0
  Segment part 16.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DF5 - 00000DF6 (0x2 bytes), align: 0
  Segment part 14.            Intra module refs:   MC_E02SMBDriverFactory::CreateTimer()
                                                   Segment part 17
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           timer                   00000DF5 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DF7 - 00000DF8 (0x2 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000087D - 00000882 (0x6 bytes), align: 0
  Segment part 20.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000DF9 - 00000E00 (0x8 bytes), align: 0
  Segment part 19.            Intra module refs:   MC_E02SMBDriverFactory::CreateUart()
                                                   Segment part 21
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           com0                    00000DF9 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E01 - 00000E02 (0x2 bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000883 - 00000888 (0x6 bytes), align: 0
  Segment part 24.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E03 - 00000E05 (0x3 bytes), align: 0
  Segment part 23.            Intra module refs:   MC_E02SMBDriverFactory::CreatePwm()
                                                   Segment part 25
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           pwm0                    00000E03 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E06 - 00000E07 (0x2 bytes), align: 0
  Segment part 26.            Intra module refs:   Segment part 25
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000889 - 0000088E (0x6 bytes), align: 0
  Segment part 28.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E08 - 00000E14 (0xd bytes), align: 0
  Segment part 27.            Intra module refs:   MC_E02SMBDriverFactory::CreateLed(unsigned char)
                                                   Segment part 29
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           led0                    00000E08 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E15 - 00000E16 (0x2 bytes), align: 0
  Segment part 30.            Intra module refs:   Segment part 29
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000088F - 00000894 (0x6 bytes), align: 0
  Segment part 32.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E17 - 00000E1D (0x7 bytes), align: 0
  Segment part 31.            Intra module refs:   MC_E02SMBDriverFactory::CreateDIn()
                                                   Segment part 33
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           swDIn                   00000E17 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E1E - 00000E1F (0x2 bytes), align: 0
  Segment part 34.            Intra module refs:   Segment part 33
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000895 - 0000089A (0x6 bytes), align: 0
  Segment part 36.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E20 - 00000E21 (0x2 bytes), align: 0
  Segment part 35.            Intra module refs:   MC_E02SMBDriverFactory::CreateClcd()
                                                   Segment part 37
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           clcd                    00000E20 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E22 - 00000E23 (0x2 bytes), align: 0
  Segment part 38.            Intra module refs:   Segment part 37
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000089B - 000008A0 (0x6 bytes), align: 0
  Segment part 39.            Intra module refs:   MC_E02SMBDriverFactory::CreateAdc()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E24 - 00000E25 (0x2 bytes), align: 0
  Segment part 41.            Intra module refs:   Segment part 40
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012A0 - 000012B5 (0x16 bytes), align: 1
  Segment part 46.            Intra module refs:   Segment part 40
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 6>             000012A0 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012B6 - 00001321 (0x6c bytes), align: 1
  Segment part 47.            Intra module refs:   Segment part 45
           LOCAL                   ADDRESS         
           =====                   =======         
           __sti__routine()        000012B6 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001322 - 00001337 (0x16 bytes), align: 1
  Segment part 48.            Intra module refs:   Segment part 17
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             00001322 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001338 - 0000134D (0x16 bytes), align: 1
  Segment part 49.            Intra module refs:   Segment part 21
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 1>             00001338 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000134E - 00001363 (0x16 bytes), align: 1
  Segment part 50.            Intra module refs:   Segment part 25
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 2>             0000134E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001364 - 00001379 (0x16 bytes), align: 1
  Segment part 51.            Intra module refs:   Segment part 29
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 3>             00001364 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000137A - 0000138F (0x16 bytes), align: 1
  Segment part 52.            Intra module refs:   Segment part 33
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 4>             0000137A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001390 - 000013A5 (0x16 bytes), align: 1
  Segment part 53.            Intra module refs:   Segment part 37
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 5>             00001390 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E26 - 00000E26 (0x1 bytes), align: 0
  Segment part 42.            Intra module refs:   MC_E02SMBDriverFactory::CreateAdc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateAdc()::static guard for avr_adc
                                   00000E26 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E27 - 00000E28 (0x2 bytes), align: 0
  Segment part 43.            Intra module refs:   MC_E02SMBDriverFactory::CreateAdc()
                                                   Segment part 40
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateAdc()::avr_adc
                                   00000E27 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E29 - 00000E2A (0x2 bytes), align: 0
  Segment part 44.            Intra module refs:   GetDriverFactory()
                                                   __sti__routine()
           LOCAL                   ADDRESS         
           =====                   =======         
           MC_E02SMBDriver         00000E29 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013A6 - 000013AB (0x6 bytes), align: 1
  Segment part 54.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           GetDriverFactory()      000013A6        BCComponentManager::Init() (BCComponentManager)
                                                   Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013AC - 000013C9 (0x1e bytes), align: 1
  Segment part 55.            Intra module refs:   Avr_timer0::~Avr_timer0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimer::~ITimer()       000013AC 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013CA - 000013E7 (0x1e bytes), align: 1
  Segment part 56.            Intra module refs:   Avr_uart0::~Avr_uart0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISerialPort::~ISerialPort()
                                   000013CA 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013E8 - 00001405 (0x1e bytes), align: 1
  Segment part 57.            Intra module refs:   Led::~Led()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::~DOut()           000013E8 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001406 - 00001423 (0x1e bytes), align: 1
  Segment part 58.            Intra module refs:   DigialIn::~DigialIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::~DIn()             00001406 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001424 - 0000144D (0x2a bytes), align: 1
  Segment part 59.            Intra module refs:   E02SMBLed::~E02SMBLed()
                                                   Led::__vtbl (led)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::~Led()             00001424 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000144E - 0000146B (0x1e bytes), align: 1
  Segment part 60.            Intra module refs:   ClcdAdaptor::~ClcdAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::~Clcd()           0000144E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000146C - 000014B7 (0x4c bytes), align: 1
  Segment part 61.            Intra module refs:   MC_E02SMBDriverFactory::MC_E02SMBDriverFactory()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::DriverFactory()
                                   0000146C 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014B8 - 000014BF (0x8 bytes), align: 1
  Segment part 62.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateTimer()
                                   000014B8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014C0 - 000014C7 (0x8 bytes), align: 1
  Segment part 63.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateUart()
                                   000014C0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014C8 - 000014CF (0x8 bytes), align: 1
  Segment part 64.            Intra module refs:   DriverFactory::__vtbl
                                                   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateSPI()
                                   000014C8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014D0 - 000014D7 (0x8 bytes), align: 1
  Segment part 65.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateDIn()
                                   000014D0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014D8 - 000014DF (0x8 bytes), align: 1
  Segment part 66.            Intra module refs:   DriverFactory::__vtbl
                                                   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateDOut(char *)
                                   000014D8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014E0 - 000014E7 (0x8 bytes), align: 1
  Segment part 67.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateLed(unsigned char)
                                   000014E0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014E8 - 000014EF (0x8 bytes), align: 1
  Segment part 68.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateClcd()
                                   000014E8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014F0 - 000014F7 (0x8 bytes), align: 1
  Segment part 69.            Intra module refs:   DriverFactory::__vtbl
                                                   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateDac7512()
                                   000014F0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014F8 - 000014FF (0x8 bytes), align: 1
  Segment part 70.            Intra module refs:   DriverFactory::__vtbl
                                                   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateMcp3204()
                                   000014F8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001500 - 00001507 (0x8 bytes), align: 1
  Segment part 71.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateAdc()
                                   00001500 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001508 - 0000150F (0x8 bytes), align: 1
  Segment part 72.            Intra module refs:   DriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreatePwm()
                                   00001508 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001510 - 00001539 (0x2a bytes), align: 1
  Segment part 73.            Intra module refs:   <Unnamed 0>
                                                   Avr_timer0::__vtbl (avr_timer)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::~Avr_timer0()
                                   00001510 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000153A - 00001563 (0x2a bytes), align: 1
  Segment part 74.            Intra module refs:   <Unnamed 1>
                                                   Avr_uart0::__vtbl (avr_uart)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::~Avr_uart0()
                                   0000153A 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001564 - 0000158D (0x2a bytes), align: 1
  Segment part 75.            Intra module refs:   <Unnamed 3>
                                                   E02SMBLed::__vtbl (dio_adaptor)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::~E02SMBLed()
                                   00001564 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000158E - 000015B7 (0x2a bytes), align: 1
  Segment part 76.            Intra module refs:   <Unnamed 4>
                                                   DigialIn::__vtbl (dio_adaptor)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::~DigialIn()   0000158E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015B8 - 000015E1 (0x2a bytes), align: 1
  Segment part 77.            Intra module refs:   <Unnamed 5>
                                                   ClcdAdaptor::__vtbl (clcd_adaptor)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::~ClcdAdaptor()
                                   000015B8 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015E2 - 000015FF (0x1e bytes), align: 1
  Segment part 78.            Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::MC_E02SMBDriverFactory()
                                   000015E2 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001600 - 00001607 (0x8 bytes), align: 1
  Segment part 79.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateTimer()
                                   00001600 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001608 - 0000160F (0x8 bytes), align: 1
  Segment part 80.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateUart()
                                   00001608 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001610 - 00001621 (0x12 bytes), align: 1
  Segment part 81.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateLed(unsigned char)
                                   00001610 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001622 - 00001629 (0x8 bytes), align: 1
  Segment part 82.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateClcd()
                                   00001622 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000162A - 00001631 (0x8 bytes), align: 1
  Segment part 83.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateDIn()
                                   0000162A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001632 - 0000165F (0x2e bytes), align: 1
  Segment part 84.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateAdc()
                                   00001632 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001660 - 00001667 (0x8 bytes), align: 1
  Segment part 85.            Intra module refs:   MC_E02SMBDriverFactory::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreatePwm()
                                   00001660 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000059B1 - 000059BE (0xe bytes), align: 0
  Segment part 10.            Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
INITTAB
  Segment part 11. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000059BF - 000059F6 (0x38 bytes), align: 0
  Segment part 13.            Intra module refs:   Segment part 12
    -------------------------------------------------------------------------
INITTAB
  Segment part 15. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000059F7 - 000059FC (0x6 bytes), align: 0
  Segment part 17.            Intra module refs:   Segment part 16
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000059FD - 00005A02 (0x6 bytes), align: 0
  Segment part 21.            Intra module refs:   Segment part 20
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A03 - 00005A08 (0x6 bytes), align: 0
  Segment part 25.            Intra module refs:   Segment part 24
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A09 - 00005A0E (0x6 bytes), align: 0
  Segment part 29.            Intra module refs:   Segment part 28
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A0F - 00005A14 (0x6 bytes), align: 0
  Segment part 33.            Intra module refs:   Segment part 32
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A15 - 00005A1A (0x6 bytes), align: 0
  Segment part 37.            Intra module refs:   Segment part 36
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A1B - 00005A20 (0x6 bytes), align: 0
  Segment part 40.            Intra module refs:   Segment part 39
    -------------------------------------------------------------------------
DIFUNCT
  Relative segment, address: CODE 000002C8 - 000002C9 (0x2 bytes), align: 0
  Segment part 45. ROOT.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000009C - 000000B1 (0x16 bytes), align: 0
  Segment part 7.             Intra module refs:   DriverFactory::DriverFactory()
           LOCAL                   ADDRESS         
           =====                   =======         
           DriverFactory::__vtbl   0000009C 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000B2 - 000000C7 (0x16 bytes), align: 0
  Segment part 8.             Intra module refs:   MC_E02SMBDriverFactory::MC_E02SMBDriverFactory()
           LOCAL                   ADDRESS         
           =====                   =======         
           MC_E02SMBDriverFactory::__vtbl
                                   000000B2 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\Power_Manager.r90
  PROGRAM MODULE, NAME : Power_Manager

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\StdConsole.r90
  PROGRAM MODULE, NAME : StdConsole

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\System_Info.r90
  PROGRAM MODULE, NAME : System_Info

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\System_Manager.r90
  PROGRAM MODULE, NAME : System_Manager

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00000E2B - 00000E2C (0x2 bytes), align: 0
  Segment part 13.            Intra module refs:   SystemManager::Instance()
                                                   SystemManager::SystemManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::instance
                                   00000E2B 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::new SystemManager()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001668 - 000016B5 (0x4e bytes), align: 1
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::SystemManager()
                                   00001668        Term_Project_s::Term_Project_s() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016B6 - 000016D3 (0x1e bytes), align: 1
  Segment part 17.            Intra module refs:   SystemManager::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::~SystemManager()
                                   000016B6        Term_Project_s::~Term_Project_s() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016D4 - 000016EF (0x1c bytes), align: 1
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Instance()
                                   000016D4        BCComponentManager::Init() (BCComponentManager)
                                                   main (System_main)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016F0 - 0000171B (0x2c bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::InitModule()
                                   000016F0        main (System_main)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000171C - 00001753 (0x38 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Run(unsigned char)
                                   0000171C        main (System_main)
               calls direct and indirect
               CSTACK = 00000000 ( 00000005 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001754 - 0000175B (0x8 bytes), align: 1
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::AddModule(IModule &)
                                   00001754        BCComponentManager::Init() (BCComponentManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000175C - 0000175D (0x2 bytes), align: 1
  Segment part 22.            Intra module refs:   SystemManager::Run(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::RunTail()
                                   0000175C 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000175E - 0000175F (0x2 bytes), align: 1
  Segment part 23.            Intra module refs:   SystemManager::__vtbl
                                                   Term_Project_s::__vtbl (Term_Project_s)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Exit()   0000175E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A21 - 00005A2E (0xe bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A2F - 00005A5F (0x31 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
INITTAB
  Segment part 14. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000008A1 - 000008AE (0xe bytes), align: 0
  Segment part 8.             Intra module refs:   SystemManager::SystemManager()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000008AF - 000008DF (0x31 bytes), align: 0
  Segment part 11.            Intra module refs:   SystemManager::SystemManager()
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000C8 - 000000CD (0x6 bytes), align: 0
  Segment part 7.             Intra module refs:   SystemManager::SystemManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::__vtbl   000000C8 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\System_main.r90
  PROGRAM MODULE, NAME : System_main

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001760 - 000017CF (0x70 bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main                    00001760        ?cstartup_call_main (?C_STARTUP)
               calls direct and indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A60 - 00005A68 (0x9 bytes), align: 0
  Segment part 8.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A69 - 00005A96 (0x2e bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 10
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000008E0 - 000008E8 (0x9 bytes), align: 0
  Segment part 7.             Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000008E9 - 00000916 (0x2e bytes), align: 0
  Segment part 10.            Intra module refs:   main

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\Term_Project_s.r90
  PROGRAM MODULE, NAME : Term_Project_s

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Relative segment, address: DATA 00000917 - 00000920 (0xa bytes), align: 0
  Segment part 16.            Intra module refs:   myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *)
                                                   mySWEvent::SetCalClkFuncGen(CalClkFuncGen *)
                                                   mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *)
                                                   myTimer1s::SetCalClkFuncGen(CalClkFuncGen *)
                                                   myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000921 - 0000094C (0x2c bytes), align: 0
  Segment part 19.            Intra module refs:   myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *)
                                                   myPwmAdaptor::SetPwm(Pwm *)
                                                   mySWEvent::SetCalClkFuncGen(CalClkFuncGen *)
                                                   mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *)
                                                   mySerialOutAdaptor::SetSerial(SerialIO *)
                                                   mySerialOutAdaptor::Write(char *)
                                                   myTimer1s::SetCalClkFuncGen(CalClkFuncGen *)
                                                   myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *)
                                                   mylcdAdaptor::SetClcd(Clcd *, unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000094D - 00000956 (0xa bytes), align: 0
  Segment part 21.            Intra module refs:   myPwmAdaptor::SetPwm(Pwm *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000957 - 00000958 (0x2 bytes), align: 0
  Segment part 23.            Intra module refs:   mySerialEvent::Receive(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000959 - 00000965 (0xd bytes), align: 0
  Segment part 25.            Intra module refs:   mySerialOutAdaptor::SetSerial(SerialIO *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000966 - 0000096F (0xa bytes), align: 0
  Segment part 27.            Intra module refs:   mySerialOutAdaptor::Write(char *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000970 - 00000979 (0xa bytes), align: 0
  Segment part 29.            Intra module refs:   mylcdAdaptor::SetClcd(Clcd *, unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000097A - 0000097F (0x6 bytes), align: 0
  Segment part 33.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::new Term_Project_s()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000017D0 - 0000187F (0xb0 bytes), align: 1
  Segment part 78.            Intra module refs:   Segment part 76
           LOCAL                   ADDRESS         
           =====                   =======         
           __sti__routine()        000017D0 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001880 - 00001895 (0x16 bytes), align: 1
  Segment part 79.            Intra module refs:   Segment part 34
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             00001880 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E2D - 00000E40 (0x14 bytes), align: 0
  Segment part 31.            Intra module refs:   Segment part 34
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myApp                   00000E2D 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E41 - 00000E42 (0x2 bytes), align: 0
  Segment part 35.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000980 - 00000985 (0x6 bytes), align: 0
  Segment part 37.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001896 - 000018AB (0x16 bytes), align: 1
  Segment part 80.            Intra module refs:   Segment part 38
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 1>             00001896 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E43 - 00000E60 (0x1e bytes), align: 0
  Segment part 36.            Intra module refs:   Segment part 38
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ccf                     00000E43 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E61 - 00000E62 (0x2 bytes), align: 0
  Segment part 39.            Intra module refs:   Segment part 38
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000986 - 0000098B (0x6 bytes), align: 0
  Segment part 41.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018AC - 000018C1 (0x16 bytes), align: 1
  Segment part 81.            Intra module refs:   Segment part 42
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 2>             000018AC 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E63 - 00000E66 (0x4 bytes), align: 0
  Segment part 40.            Intra module refs:   Segment part 42
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myadcEvent              00000E63 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E67 - 00000E68 (0x2 bytes), align: 0
  Segment part 43.            Intra module refs:   Segment part 42
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000098C - 00000991 (0x6 bytes), align: 0
  Segment part 45.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018C2 - 000018D7 (0x16 bytes), align: 1
  Segment part 82.            Intra module refs:   Segment part 46
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 3>             000018C2 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E69 - 00000E6C (0x4 bytes), align: 0
  Segment part 44.            Intra module refs:   Segment part 46
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmadp                00000E69 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E6D - 00000E6E (0x2 bytes), align: 0
  Segment part 47.            Intra module refs:   Segment part 46
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000992 - 00000997 (0x6 bytes), align: 0
  Segment part 49.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018D8 - 000018ED (0x16 bytes), align: 1
  Segment part 83.            Intra module refs:   Segment part 50
                                                   Segment part 54
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 4>             000018D8 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E6F - 00000E73 (0x5 bytes), align: 0
  Segment part 48.            Intra module refs:   Segment part 50
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdline1              00000E6F 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E74 - 00000E75 (0x2 bytes), align: 0
  Segment part 51.            Intra module refs:   Segment part 50
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000998 - 0000099D (0x6 bytes), align: 0
  Segment part 53.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E76 - 00000E7A (0x5 bytes), align: 0
  Segment part 52.            Intra module refs:   Segment part 54
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdline2              00000E76 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E7B - 00000E7C (0x2 bytes), align: 0
  Segment part 55.            Intra module refs:   Segment part 54
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000099E - 000009A3 (0x6 bytes), align: 0
  Segment part 57.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018EE - 00001903 (0x16 bytes), align: 1
  Segment part 84.            Intra module refs:   Segment part 58
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 5>             000018EE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E7D - 00000E80 (0x4 bytes), align: 0
  Segment part 56.            Intra module refs:   Segment part 58
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myserialadp             00000E7D 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E81 - 00000E82 (0x2 bytes), align: 0
  Segment part 59.            Intra module refs:   Segment part 58
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000009A4 - 000009A9 (0x6 bytes), align: 0
  Segment part 61.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001904 - 00001919 (0x16 bytes), align: 1
  Segment part 85.            Intra module refs:   Segment part 62
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 6>             00001904 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E83 - 00000E88 (0x6 bytes), align: 0
  Segment part 60.            Intra module refs:   Segment part 62
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myserialEvent           00000E83 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E89 - 00000E8A (0x2 bytes), align: 0
  Segment part 63.            Intra module refs:   Segment part 62
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000009AA - 000009AF (0x6 bytes), align: 0
  Segment part 65.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000191A - 0000192F (0x16 bytes), align: 1
  Segment part 86.            Intra module refs:   Segment part 66
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 7>             0000191A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E8B - 00000E96 (0xc bytes), align: 0
  Segment part 64.            Intra module refs:   Segment part 66
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mytimer_1sec            00000E8B 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E97 - 00000E98 (0x2 bytes), align: 0
  Segment part 67.            Intra module refs:   Segment part 66
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000009B0 - 000009B5 (0x6 bytes), align: 0
  Segment part 69.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001930 - 00001945 (0x16 bytes), align: 1
  Segment part 87.            Intra module refs:   Segment part 70
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 8>             00001930 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000E99 - 00000EA4 (0xc bytes), align: 0
  Segment part 68.            Intra module refs:   Segment part 70
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mytimer_500ms           00000E99 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EA5 - 00000EA6 (0x2 bytes), align: 0
  Segment part 71.            Intra module refs:   Segment part 70
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000009B6 - 000009BB (0x6 bytes), align: 0
  Segment part 73.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001946 - 0000195B (0x16 bytes), align: 1
  Segment part 88.            Intra module refs:   Segment part 74
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 9>             00001946 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EA7 - 00000EAC (0x6 bytes), align: 0
  Segment part 72.            Intra module refs:   Segment part 74
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySW                    00000EA7 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EAD - 00000EAE (0x2 bytes), align: 0
  Segment part 75.            Intra module refs:   Segment part 74
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000195C - 0000197B (0x20 bytes), align: 1
  Segment part 89.            Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::Term_Project_s()
                                   0000195C 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000197C - 00001B55 (0x1da bytes), align: 1
  Segment part 90.            Intra module refs:   Term_Project_s::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::Init()
                                   0000197C 
               calls direct and indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 91. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::ITimerEvent(unsigned char, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 92. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::~ITimerEvent()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 93. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::Resume()   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B56 - 00001B57 (0x2 bytes), align: 1
  Segment part 94.            Intra module refs:   mySerialEvent::mySerialEvent()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialEvent::SerialEvent()
                                   00001B56 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B58 - 00001B75 (0x1e bytes), align: 1
  Segment part 95.            Intra module refs:   mySerialEvent::~mySerialEvent()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialEvent::~SerialEvent()
                                   00001B58 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B76 - 00001B77 (0x2 bytes), align: 1
  Segment part 96.            Intra module refs:   mySWEvent::mySWEvent()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInEvent::DInEvent()    00001B76 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B78 - 00001B95 (0x1e bytes), align: 1
  Segment part 97.            Intra module refs:   mySWEvent::~mySWEvent()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInEvent::~DInEvent()   00001B78 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B96 - 00001B97 (0x2 bytes), align: 1
  Segment part 98.            Intra module refs:   myAdcAdaptor::myAdcAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdcEvent::AdcEvent()    00001B96 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B98 - 00001BB5 (0x1e bytes), align: 1
  Segment part 99.            Intra module refs:   myAdcAdaptor::~myAdcAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdcEvent::~AdcEvent()   00001B98 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 100. TENTATIVE. Used definition from System_Manager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Exit()   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BB6 - 00001BDF (0x2a bytes), align: 1
  Segment part 101.           Intra module refs:   <Unnamed 0>
                                                   Term_Project_s::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::~Term_Project_s()
                                   00001BB6 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BE0 - 00001BE1 (0x2 bytes), align: 1
  Segment part 102.           Intra module refs:   myPwmAdaptor::myPwmAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IPwmOut::IPwmOut()      00001BE0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BE2 - 00001BFF (0x1e bytes), align: 1
  Segment part 103.           Intra module refs:   myPwmAdaptor::~myPwmAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IPwmOut::~IPwmOut()     00001BE2 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C00 - 00001C01 (0x2 bytes), align: 1
  Segment part 104.           Intra module refs:   mySerialOutAdaptor::mySerialOutAdaptor()
                                                   mylcdAdaptor::mylcdAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IStringOut::IStringOut()
                                   00001C00 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C02 - 00001C1F (0x1e bytes), align: 1
  Segment part 105.           Intra module refs:   mySerialOutAdaptor::~mySerialOutAdaptor()
                                                   mylcdAdaptor::~mylcdAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IStringOut::~IStringOut()
                                   00001C02 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C20 - 00001C49 (0x2a bytes), align: 1
  Segment part 106.           Intra module refs:   <Unnamed 7>
                                                   myTimer1s::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::~myTimer1s()
                                   00001C20 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C4A - 00001C6F (0x26 bytes), align: 1
  Segment part 107.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::myTimer1s()
                                   00001C4A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C70 - 00001C77 (0x8 bytes), align: 1
  Segment part 108.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::SetLed(Led *)
                                   00001C70 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C78 - 00001CA5 (0x2e bytes), align: 1
  Segment part 109.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::SetCalClkFuncGen(CalClkFuncGen *)
                                   00001C78 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001CA6 - 00001CE3 (0x3e bytes), align: 1
  Segment part 110.           Intra module refs:   myTimer1s::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::TimeOutEvent()
                                   00001CA6 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001CE4 - 00001D0D (0x2a bytes), align: 1
  Segment part 111.           Intra module refs:   <Unnamed 8>
                                                   myTimer500ms::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::~myTimer500ms()
                                   00001CE4 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001D0E - 00001D33 (0x26 bytes), align: 1
  Segment part 112.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::myTimer500ms()
                                   00001D0E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001D34 - 00001D3B (0x8 bytes), align: 1
  Segment part 113.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::SetLed(Led *)
                                   00001D34 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001D3C - 00001D69 (0x2e bytes), align: 1
  Segment part 114.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *)
                                   00001D3C 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001D6A - 00001DA7 (0x3e bytes), align: 1
  Segment part 115.           Intra module refs:   myTimer500ms::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::TimeOutEvent()
                                   00001D6A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001DA8 - 00001DC5 (0x1e bytes), align: 1
  Segment part 116.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::mySWEvent()
                                   00001DA8 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001DC6 - 00001DEF (0x2a bytes), align: 1
  Segment part 117.           Intra module refs:   <Unnamed 9>
                                                   mySWEvent::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::~mySWEvent()
                                   00001DC6 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001DF0 - 00001DF7 (0x8 bytes), align: 1
  Segment part 118.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::SetLed(Led *)
                                   00001DF0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001DF8 - 00001E25 (0x2e bytes), align: 1
  Segment part 119.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::SetCalClkFuncGen(CalClkFuncGen *)
                                   00001DF8 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E26 - 00001E4F (0x2a bytes), align: 1
  Segment part 120.           Intra module refs:   mySWEvent::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::Changed(enum DInEvent::EDGE)
                                   00001E26 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E50 - 00001E6D (0x1e bytes), align: 1
  Segment part 121.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myAdcAdaptor::myAdcAdaptor()
                                   00001E50 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E6E - 00001E97 (0x2a bytes), align: 1
  Segment part 122.           Intra module refs:   <Unnamed 2>
                                                   myAdcAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myAdcAdaptor::~myAdcAdaptor()
                                   00001E6E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E98 - 00001EC5 (0x2e bytes), align: 1
  Segment part 123.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *)
                                   00001E98 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001EC6 - 00001EED (0x28 bytes), align: 1
  Segment part 124.           Intra module refs:   myAdcAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myAdcAdaptor::Converted(unsigned short)
                                   00001EC6 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001EEE - 00001F0B (0x1e bytes), align: 1
  Segment part 125.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmAdaptor::myPwmAdaptor()
                                   00001EEE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F0C - 00001F35 (0x2a bytes), align: 1
  Segment part 126.           Intra module refs:   <Unnamed 3>
                                                   myPwmAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmAdaptor::~myPwmAdaptor()
                                   00001F0C 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F36 - 00001F63 (0x2e bytes), align: 1
  Segment part 127.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmAdaptor::SetPwm(Pwm *)
                                   00001F36 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F64 - 00001F8B (0x28 bytes), align: 1
  Segment part 128.           Intra module refs:   myPwmAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmAdaptor::SetDuty(unsigned short)
                                   00001F64 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F8C - 00001FAB (0x20 bytes), align: 1
  Segment part 129.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialEvent::mySerialEvent()
                                   00001F8C 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001FAC - 00001FD5 (0x2a bytes), align: 1
  Segment part 130.           Intra module refs:   <Unnamed 6>
                                                   mySerialEvent::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialEvent::~mySerialEvent()
                                   00001FAC 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001FD6 - 00002017 (0x42 bytes), align: 1
  Segment part 131.           Intra module refs:   mySerialEvent::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialEvent::Receive(unsigned char)
                                   00001FD6 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002018 - 00002045 (0x2e bytes), align: 1
  Segment part 132.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *)
                                   00002018 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002046 - 00002063 (0x1e bytes), align: 1
  Segment part 133.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialOutAdaptor::mySerialOutAdaptor()
                                   00002046 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002064 - 0000208D (0x2a bytes), align: 1
  Segment part 134.           Intra module refs:   <Unnamed 5>
                                                   mySerialOutAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialOutAdaptor::~mySerialOutAdaptor()
                                   00002064 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000208E - 000020BB (0x2e bytes), align: 1
  Segment part 135.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialOutAdaptor::SetSerial(SerialIO *)
                                   0000208E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000020BC - 000020F9 (0x3e bytes), align: 1
  Segment part 136.           Intra module refs:   mySerialOutAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialOutAdaptor::Write(char *)
                                   000020BC 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000020FA - 00002117 (0x1e bytes), align: 1
  Segment part 137.           Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdAdaptor::mylcdAdaptor()
                                   000020FA 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002118 - 00002141 (0x2a bytes), align: 1
  Segment part 138.           Intra module refs:   <Unnamed 4>
                                                   mylcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdAdaptor::~mylcdAdaptor()
                                   00002118 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002142 - 00002175 (0x34 bytes), align: 1
  Segment part 139.           Intra module refs:   Term_Project_s::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdAdaptor::SetClcd(Clcd *, unsigned char)
                                   00002142 
               calls direct
               CSTACK = 00000000 ( 00000005 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002176 - 0000219D (0x28 bytes), align: 1
  Segment part 140.           Intra module refs:   mylcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdAdaptor::Write(char *)
                                   00002176 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005A97 - 00005AA0 (0xa bytes), align: 0
  Segment part 17.            Intra module refs:   Segment part 16
    -------------------------------------------------------------------------
INITTAB
  Segment part 18. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005AA1 - 00005ACC (0x2c bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005ACD - 00005AD6 (0xa bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005AD7 - 00005AD8 (0x2 bytes), align: 0
  Segment part 24.            Intra module refs:   Segment part 23
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005AD9 - 00005AE5 (0xd bytes), align: 0
  Segment part 26.            Intra module refs:   Segment part 25
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005AE6 - 00005AEF (0xa bytes), align: 0
  Segment part 28.            Intra module refs:   Segment part 27
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005AF0 - 00005AF9 (0xa bytes), align: 0
  Segment part 30.            Intra module refs:   Segment part 29
    -------------------------------------------------------------------------
INITTAB
  Segment part 32. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005AFA - 00005AFF (0x6 bytes), align: 0
  Segment part 34.            Intra module refs:   Segment part 33
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B00 - 00005B05 (0x6 bytes), align: 0
  Segment part 38.            Intra module refs:   Segment part 37
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B06 - 00005B0B (0x6 bytes), align: 0
  Segment part 42.            Intra module refs:   Segment part 41
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B0C - 00005B11 (0x6 bytes), align: 0
  Segment part 46.            Intra module refs:   Segment part 45
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B12 - 00005B17 (0x6 bytes), align: 0
  Segment part 50.            Intra module refs:   Segment part 49
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B18 - 00005B1D (0x6 bytes), align: 0
  Segment part 54.            Intra module refs:   Segment part 53
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B1E - 00005B23 (0x6 bytes), align: 0
  Segment part 58.            Intra module refs:   Segment part 57
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B24 - 00005B29 (0x6 bytes), align: 0
  Segment part 62.            Intra module refs:   Segment part 61
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B2A - 00005B2F (0x6 bytes), align: 0
  Segment part 66.            Intra module refs:   Segment part 65
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B30 - 00005B35 (0x6 bytes), align: 0
  Segment part 70.            Intra module refs:   Segment part 69
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B36 - 00005B3B (0x6 bytes), align: 0
  Segment part 74.            Intra module refs:   Segment part 73
    -------------------------------------------------------------------------
DIFUNCT
  Relative segment, address: CODE 000002CA - 000002CB (0x2 bytes), align: 0
  Segment part 76. ROOT.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000CE - 000000D1 (0x4 bytes), align: 0
  Segment part 7.             Intra module refs:   myTimer1s::myTimer1s()
           LOCAL                   ADDRESS         
           =====                   =======         
           myTimer1s::__vtbl       000000CE 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000D2 - 000000D5 (0x4 bytes), align: 0
  Segment part 8.             Intra module refs:   myTimer500ms::myTimer500ms()
           LOCAL                   ADDRESS         
           =====                   =======         
           myTimer500ms::__vtbl    000000D2 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000D6 - 000000D9 (0x4 bytes), align: 0
  Segment part 9.             Intra module refs:   mySWEvent::mySWEvent()
           LOCAL                   ADDRESS         
           =====                   =======         
           mySWEvent::__vtbl       000000D6 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000DA - 000000DD (0x4 bytes), align: 0
  Segment part 10.            Intra module refs:   myAdcAdaptor::myAdcAdaptor()
           LOCAL                   ADDRESS         
           =====                   =======         
           myAdcAdaptor::__vtbl    000000DA 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000DE - 000000E1 (0x4 bytes), align: 0
  Segment part 11.            Intra module refs:   myPwmAdaptor::myPwmAdaptor()
           LOCAL                   ADDRESS         
           =====                   =======         
           myPwmAdaptor::__vtbl    000000DE 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000E2 - 000000E5 (0x4 bytes), align: 0
  Segment part 12.            Intra module refs:   mySerialEvent::mySerialEvent()
           LOCAL                   ADDRESS         
           =====                   =======         
           mySerialEvent::__vtbl   000000E2 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000E6 - 000000E9 (0x4 bytes), align: 0
  Segment part 13.            Intra module refs:   mySerialOutAdaptor::mySerialOutAdaptor()
           LOCAL                   ADDRESS         
           =====                   =======         
           mySerialOutAdaptor::__vtbl
                                   000000E6 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000EA - 000000ED (0x4 bytes), align: 0
  Segment part 14.            Intra module refs:   mylcdAdaptor::mylcdAdaptor()
           LOCAL                   ADDRESS         
           =====                   =======         
           mylcdAdaptor::__vtbl    000000EA 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000EE - 000000F3 (0x6 bytes), align: 0
  Segment part 15.            Intra module refs:   Term_Project_s::Term_Project_s()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::__vtbl
                                   000000EE 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\TimerManager.r90
  PROGRAM MODULE, NAME : TimerManager

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00000EAF - 00000EB0 (0x2 bytes), align: 0
  Segment part 21.            Intra module refs:   TimerManager::GetInstance(ITimer *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::pInstance
                                   00000EAF 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000009BC - 000009C7 (0xc bytes), align: 0
  Segment part 8.             Intra module refs:   TimerManager::GetInstance(ITimer *)
                                                   TimerManager::TimerManager(ITimer *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000009C8 - 000009FF (0x38 bytes), align: 0
  Segment part 11.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
                                                   TimerManager::GetInstance(ITimer *)
                                                   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::evTick()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A00 - 00000A0E (0xf bytes), align: 0
  Segment part 13.            Intra module refs:   TimerManager::TimerManager(ITimer *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A0F - 00000A17 (0x9 bytes), align: 0
  Segment part 15.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A18 - 00000A26 (0xf bytes), align: 0
  Segment part 17.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A27 - 00000A31 (0xb bytes), align: 0
  Segment part 19.            Intra module refs:   TimerManager::evTick()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000219E - 000021B1 (0x14 bytes), align: 1
  Segment part 28.            Intra module refs:   Segment part 24
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             0000219E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A32 - 00000A37 (0x6 bytes), align: 0
  Segment part 23.            Intra module refs:   TimerManager::GetInstance(ITimer *)
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EB1 - 00000EB2 (0x2 bytes), align: 0
  Segment part 25.            Intra module refs:   Segment part 24
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::new TimerManager(ITimer *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000021B2 - 00002237 (0x86 bytes), align: 1
  Segment part 30.            Intra module refs:   TimerManager::GetInstance(ITimer *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::TimerManager(ITimer *)
                                   000021B2 
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002238 - 0000229B (0x64 bytes), align: 1
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::GetInstance(ITimer *)
                                   00002238        BCComponentManager::Init() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EB3 - 00000EB3 (0x1 bytes), align: 0
  Segment part 26.            Intra module refs:   TimerManager::GetInstance(ITimer *)
           LOCAL                   ADDRESS         
           =====                   =======         
           TimerManager::GetInstance(ITimer *){1}::static guard for tm
                                   00000EB3 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EB4 - 00000EBF (0xc bytes), align: 0
  Segment part 27.            Intra module refs:   Segment part 24
                                                   TimerManager::GetInstance(ITimer *)
           LOCAL                   ADDRESS         
           =====                   =======         
           TimerManager::GetInstance(ITimer *){1}::tm
                                   00000EB4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000229C - 000022CB (0x30 bytes), align: 1
  Segment part 32.            Intra module refs:   <Unnamed 0>
                                                   TimerManager::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::~TimerManager()
                                   0000229C 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022CC - 00002355 (0x8a bytes), align: 1
  Segment part 33.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::AddEvent(ITimerEvent *)
                                   000022CC        BCComponentManager::CreateAdc() (BCComponentManager)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002356 - 0000241B (0xc6 bytes), align: 1
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::evTick()
                                   00002356        BCComponentMod::Execute() (BCComponentManager)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000241C - 0000241D (0x2 bytes), align: 1
  Segment part 35.            Intra module refs:   _Vector_value<allocator<void>>::_Vector_value()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_AllocHolder()
                                   0000241C 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000241E - 0000242F (0x12 bytes), align: 1
  Segment part 36.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                                   0000241E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002430 - 00002441 (0x12 bytes), align: 1
  Segment part 37.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval() const
                                   00002430 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002442 - 0000247F (0x3e bytes), align: 1
  Segment part 38.            Intra module refs:   _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                   00002442 
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002480 - 00002499 (0x1a bytes), align: 1
  Segment part 39.            Intra module refs:   _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
                                   00002480 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000249A - 000024B3 (0x1a bytes), align: 1
  Segment part 40.            Intra module refs:   _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short]
                                   0000249A 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024B4 - 000024CD (0x1a bytes), align: 1
  Segment part 41.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *]
                                   000024B4 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024CE - 000024DF (0x12 bytes), align: 1
  Segment part 42.            Intra module refs:   allocator<unsigned short>::allocate(unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Allocator<void>::allocate(unsigned int)
                                   000024CE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024E0 - 000024F1 (0x12 bytes), align: 1
  Segment part 43.            Intra module refs:   allocator<unsigned short>::deallocate(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Allocator<void>::deallocate(void *)
                                   000024E0 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024F2 - 000024F3 (0x2 bytes), align: 1
  Segment part 44.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void allocator<unsigned short>::allocator(allocator<_Other> const &)[with _Other=void]
                                   000024F2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024F4 - 00002509 (0x16 bytes), align: 1
  Segment part 45.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned short>::deallocate(unsigned short *, unsigned int)
                                   000024F4 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000250A - 00002521 (0x18 bytes), align: 1
  Segment part 46.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned short>::allocate(unsigned int)
                                   0000250A 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002522 - 00002535 (0x14 bytes), align: 1
  Segment part 47.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned short>::max_size() const
                                   00002522 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002536 - 00002537 (0x2 bytes), align: 1
  Segment part 48.            Intra module refs:   _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                                                   _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<void>::allocator()
                                   00002536 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002538 - 0000255D (0x26 bytes), align: 1
  Segment part 49.            Intra module refs:   _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copy(char const *, char const *, char *)
                                   00002538 
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000255E - 00002577 (0x1a bytes), align: 1
  Segment part 50.            Intra module refs:   _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                   0000255E 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002578 - 00002591 (0x1a bytes), align: 1
  Segment part 51.            Intra module refs:   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
                                   00002578 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002592 - 000025AD (0x1c bytes), align: 1
  Segment part 52.            Intra module refs:   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
                                   00002592 
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000025AE - 000025CB (0x1e bytes), align: 1
  Segment part 53.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
                                   000025AE 
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000025CC - 000025E9 (0x1e bytes), align: 1
  Segment part 54.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=unsigned short *, _Diff=unsigned int, _Tval=unsigned short, _Alloc=allocator<unsigned short>]
                                   000025CC 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000025EA - 000025FD (0x14 bytes), align: 1
  Segment part 55.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Vector_impl()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Vector_value()
                                   000025EA 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000025FE - 0000261D (0x20 bytes), align: 1
  Segment part 56.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy()
                                                   vector<ITimerEvent *>::vector()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Zero()
                                   000025FE 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000261E - 0000261F (0x2 bytes), align: 1
  Segment part 57.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_ToBptr(void *)
                                   0000261E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002620 - 00002627 (0x8 bytes), align: 1
  Segment part 58.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                                   _Vector_value<allocator<void>>::_Bcapacity() const
                                                   _Vector_value<allocator<void>>::_Bsize() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bfirst() const
                                   00002620 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002628 - 0000262F (0x8 bytes), align: 1
  Segment part 59.            Intra module refs:   _Vector_value<allocator<void>>::_Bsize() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Blast() const
                                   00002628 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002630 - 00002637 (0x8 bytes), align: 1
  Segment part 60.            Intra module refs:   _Vector_value<allocator<void>>::_Bcapacity() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bend() const
                                   00002630 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002638 - 00002657 (0x20 bytes), align: 1
  Segment part 61.            Intra module refs:   _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bsize() const
                                   00002638 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002658 - 00002677 (0x20 bytes), align: 1
  Segment part 62.            Intra module refs:   _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Capacity<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bcapacity() const
                                   00002658 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002678 - 0000268D (0x16 bytes), align: 1
  Segment part 63.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::capacity() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Capacity<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
                                   00002678 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000268E - 000026A3 (0x16 bytes), align: 1
  Segment part 64.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::size() const
                                                   vector<ITimerEvent *>::size() const
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
                                   0000268E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000026A4 - 000026A5 (0x2 bytes), align: 1
  Segment part 65.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Xlen() const
                                   000026A4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000026A6 - 000026B9 (0x14 bytes), align: 1
  Segment part 66.            Intra module refs:   vector<ITimerEvent *>::vector()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Vector_impl()
                                   000026A6 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000026BA - 000026DB (0x22 bytes), align: 1
  Segment part 67.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const
                                   000026BA 
               calls direct
               CSTACK = 00000000 ( 00000005 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000026DC - 0000270D (0x32 bytes), align: 1
  Segment part 68.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll()
                                   000026DC 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000270E - 0000275F (0x52 bytes), align: 1
  Segment part 69.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
                                   0000270E 
               calls direct
               CSTACK = 00000000 ( 00000009 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002760 - 00002777 (0x18 bytes), align: 1
  Segment part 70.            Intra module refs:   vector<ITimerEvent *>::~vector()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy()
                                   00002760 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002778 - 00002779 (0x2 bytes), align: 1
  Segment part 71.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Destroy(unsigned short *, unsigned short *)
                                   00002778 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000277A - 00002797 (0x1e bytes), align: 1
  Segment part 72.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
                                   0000277A 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002798 - 000027BD (0x26 bytes), align: 1
  Segment part 73.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
                                   00002798 
               calls direct
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000027BE - 000027D7 (0x1a bytes), align: 1
  Segment part 74.            Intra module refs:   vector<ITimerEvent *>::push_back(ITimerEvent *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back(_Ty1 const &)[with _Ty1=ITimerEvent *]
                                   000027BE 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000027D8 - 000027DF (0x8 bytes), align: 1
  Segment part 75.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll()
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyfirst() const
                                   000027D8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000027E0 - 000027E7 (0x8 bytes), align: 1
  Segment part 76.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll()
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                                   000027E0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000027E8 - 000027EF (0x8 bytes), align: 1
  Segment part 77.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyend() const
                                   000027E8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000027F0 - 0000294B (0x15c bytes), align: 1
  Segment part 78.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                   000027F0 
               calls direct
               CSTACK = 00000000 ( 00000014 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000294C - 0000295D (0x12 bytes), align: 1
  Segment part 79.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::size() const
                                   0000294C 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000295E - 0000296F (0x12 bytes), align: 1
  Segment part 80.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::capacity() const
                                   0000295E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002970 - 000029C1 (0x52 bytes), align: 1
  Segment part 81.            Intra module refs:   _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                   00002970 
               calls direct
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000029C2 - 000029EB (0x2a bytes), align: 1
  Segment part 82.            Intra module refs:   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                   000029C2 
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000029EC - 00002A45 (0x5a bytes), align: 1
  Segment part 83.            Intra module refs:   void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back(_Ty1 const &)[with _Ty1=ITimerEvent *]
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                   000029EC 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A46 - 00002A8F (0x4a bytes), align: 1
  Segment part 84.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                   00002A46 
               calls direct
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A90 - 00002AC9 (0x3a bytes), align: 1
  Segment part 85.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
                                   00002A90 
               calls direct
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002ACA - 00002AE3 (0x1a bytes), align: 1
  Segment part 86.            Intra module refs:   TimerManager::TimerManager(ITimer *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITimerEvent *>::vector()
                                   00002ACA 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AE4 - 00002AF5 (0x12 bytes), align: 1
  Segment part 87.            Intra module refs:   TimerManager::~TimerManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITimerEvent *>::~vector()
                                   00002AE4 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AF6 - 00002AFD (0x8 bytes), align: 1
  Segment part 88.            Intra module refs:   vector<ITimerEvent *>::operator[](unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITimerEvent *>::begin()
                                   00002AF6 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AFE - 00002B0F (0x12 bytes), align: 1
  Segment part 89.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
                                                   TimerManager::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITimerEvent *>::size() const
                                   00002AFE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B10 - 00002B2B (0x1c bytes), align: 1
  Segment part 90.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
                                                   TimerManager::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITimerEvent *>::operator[](unsigned int)
                                   00002B10 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B2C - 00002B47 (0x1c bytes), align: 1
  Segment part 91.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITimerEvent *>::push_back(ITimerEvent *)
                                   00002B2C 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B48 - 00002B4D (0x6 bytes), align: 1
  Segment part 92.            Intra module refs:   TimerManager::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::GetState()
                                   00002B48 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B4E - 00002B79 (0x2c bytes), align: 1
  Segment part 93.            Intra module refs:   TimerManager::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::CalTime(unsigned short)
                                   00002B4E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B3C - 00005B47 (0xc bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B48 - 00005B7F (0x38 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B80 - 00005B8E (0xf bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B8F - 00005B97 (0x9 bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005B98 - 00005BA6 (0xf bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005BA7 - 00005BB1 (0xb bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
INITTAB
  Segment part 22. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005BB2 - 00005BB7 (0x6 bytes), align: 0
  Segment part 24.            Intra module refs:   Segment part 23
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000F4 - 000000F5 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::~TimerManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::__vtbl    000000F4 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\adc.r90
  PROGRAM MODULE, NAME : adc

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::new Adc(IAdcPort *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B7A - 00002BC9 (0x50 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Adc(IAdcPort *)    00002B7A        BCComponentManager::CreateAdc() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002BCA - 00002BF3 (0x2a bytes), align: 1
  Segment part 21.            Intra module refs:   Adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::~Adc()             00002BCA        <Unnamed 4> (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002BF4 - 00002C4D (0x5a bytes), align: 1
  Segment part 22.            Intra module refs:   Adc::TimeOutEvent()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::evTick()           00002BF4 
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002C4E - 00002C5D (0x10 bytes), align: 1
  Segment part 23.            Intra module refs:   Adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::TimeOutEvent()     00002C4E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002C5E - 00002C6F (0x12 bytes), align: 1
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Run()              00002C5E        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Stop()             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002C70 - 00002CA3 (0x34 bytes), align: 1
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Addevent(AdcEvent *)
                                   00002C70        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002CA4 - 00002CED (0x4a bytes), align: 1
  Segment part 27.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::SetFrequency(unsigned char)
                                   00002CA4        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000007 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 28. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::ITimerEvent(unsigned char, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 29. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::~ITimerEvent()
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002CEE - 00002D27 (0x3a bytes), align: 1
  Segment part 30.            Intra module refs:   Adc::SetFrequency(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::SetIntervalms(unsigned short)
                                   00002CEE 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::Stop()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::Resume()   
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005BB8 - 00005BCD (0x16 bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005BCE - 00005C03 (0x36 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C04 - 00005C0E (0xb bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C0F - 00005C3D (0x2f bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C3E - 00005C46 (0x9 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A38 - 00000A4D (0x16 bytes), align: 0
  Segment part 8.             Intra module refs:   ITimerEvent::SetIntervalms(unsigned short)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A4E - 00000A83 (0x36 bytes), align: 0
  Segment part 11.            Intra module refs:   ITimerEvent::SetIntervalms(unsigned short)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A84 - 00000A8E (0xb bytes), align: 0
  Segment part 13.            Intra module refs:   Adc::Adc(IAdcPort *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000A8F - 00000ABD (0x2f bytes), align: 0
  Segment part 15.            Intra module refs:   Adc::Adc(IAdcPort *)
                                                   Adc::Addevent(AdcEvent *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000ABE - 00000AC6 (0x9 bytes), align: 0
  Segment part 17.            Intra module refs:   Adc::Addevent(AdcEvent *)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000F6 - 000000F9 (0x4 bytes), align: 0
  Segment part 7.             Intra module refs:   Adc::Adc(IAdcPort *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::__vtbl             000000F6 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_WatchDog.r90
  PROGRAM MODULE, NAME : avr_WatchDog

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::new avr_watchdog()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           WDT_Prescaler_Change()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           isWDT_WoringBefore()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           WDT_Kick()              
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::avr_watchdog()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::Kick()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::CPUReset()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::Prescaler_Change()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::Off()     
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_adc.r90
  PROGRAM MODULE, NAME : avr_adc

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000024 - 00000025 (0x2 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   ADC_conv_done()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_ADC                  00000024 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000026 - 00000026 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_adc::Init()
                                                   Avr_adc::SetPrescaler(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_ADCSR                00000026 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000027 - 00000027 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_adc::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_ADMUX                00000027 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EC0 - 00000EC1 (0x2 bytes), align: 0
  Segment part 12.            Intra module refs:   ADC_conv_done()
                                                   Avr_adc::GetAdc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           adc_result              00000EC0 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EC2 - 00000EC2 (0x1 bytes), align: 0
  Segment part 14.            Intra module refs:   ADC_conv_done()
                                                   Avr_adc::GetAdc()
                                                   Avr_adc::isConverted()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           isconv                  00000EC2 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::new Avr_adc()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D28 - 00002D77 (0x50 bytes), align: 1
  Segment part 16.            Intra module refs:   ADC_conv_done()::??INTVEC 84
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ADC_conv_done()         00002D28 
               interrupt function
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::SetChannel(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D78 - 00002D89 (0x12 bytes), align: 1
  Segment part 18.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::SetPrescaler(unsigned char)
                                   00002D78 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D8A - 00002D9B (0x12 bytes), align: 1
  Segment part 19.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::Init()         00002D8A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D9C - 00002DC3 (0x28 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::Avr_adc()      00002D9C        MC_E02SMBDriverFactory::CreateAdc() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002DC4 - 00002DED (0x2a bytes), align: 1
  Segment part 21.            Intra module refs:   Avr_adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::~Avr_adc()     00002DC4        <Unnamed 6> (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002DEE - 00002DF9 (0xc bytes), align: 1
  Segment part 22.            Intra module refs:   Avr_adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::isConverted()
                                   00002DEE 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002DFA - 00002E11 (0x18 bytes), align: 1
  Segment part 23.            Intra module refs:   Avr_adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::GetAdc()       00002DFA 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002E12 - 00002E13 (0x2 bytes), align: 1
  Segment part 24.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IAdcPort::IAdcPort()    00002E12 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002E14 - 00002E31 (0x1e bytes), align: 1
  Segment part 25.            Intra module refs:   Avr_adc::~Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IAdcPort::~IAdcPort()   00002E14 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 00000057 (0x58 bytes), align: 1
  Segment part 8. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ADC_conv_done()::??INTVEC 84
                                   00000054 
    -------------------------------------------------------------------------
CSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 13. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000FA - 000000FF (0x6 bytes), align: 0
  Segment part 11.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::__vtbl         000000FA 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_common.r90
  PROGRAM MODULE, NAME : avr_common

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002E32 - 00002E43 (0x12 bytes), align: 1
  Segment part 7.             Intra module refs:   avr_delay_ms(unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_delay_us(unsigned char)
                                   00002E32        ClcdAdaptor::Init() (clcd_adaptor)
                                                   ClcdAdaptor::SetData(unsigned char) (clcd_adaptor)
                                                   ClcdAdaptor::SetInstruction(unsigned char) (clcd_adaptor)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002E44 - 00002E6D (0x2a bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_delay_ms(unsigned int)
                                   00002E44        ClcdAdaptor::Init() (clcd_adaptor)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_nv_ram.r90
  PROGRAM MODULE, NAME : avr_nv_ram

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_pwm.r90
  PROGRAM MODULE, NAME : avr_pwm

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000037 - 00000037 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   Avr_pwm::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRB                 00000037 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000051 - 00000051 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_pwm::SetOcr(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_OCR0                 00000051 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000053 - 00000053 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_pwm::Init()
                                                   Avr_pwm::SetPreScaler(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TCCR0                00000053 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::new Avr_pwm(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002E6E - 00002E97 (0x2a bytes), align: 1
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Avr_pwm(unsigned char)
                                   00002E6E        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002E98 - 00002EC1 (0x2a bytes), align: 1
  Segment part 18.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::~Avr_pwm()     00002E98        <Unnamed 2> (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002EC2 - 00002ECF (0xe bytes), align: 1
  Segment part 19.            Intra module refs:   Avr_pwm::Avr_pwm(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Init()         00002EC2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002ED0 - 00002ED3 (0x4 bytes), align: 1
  Segment part 20.            Intra module refs:   Avr_pwm::SetDuty(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::SetOcr(unsigned char)
                                   00002ED0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002ED4 - 00002F05 (0x32 bytes), align: 1
  Segment part 21.            Intra module refs:   Avr_pwm::Run()
                                                   Avr_pwm::Stop()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::SetPreScaler(unsigned char)
                                   00002ED4 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F06 - 00002F1B (0x16 bytes), align: 1
  Segment part 22.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Run()          00002F06 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F1C - 00002F2D (0x12 bytes), align: 1
  Segment part 23.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Stop()         00002F1C 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F2E - 00002F41 (0x14 bytes), align: 1
  Segment part 24.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::SetDuty(unsigned short)
                                   00002F2E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F42 - 00002F47 (0x6 bytes), align: 1
  Segment part 25.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::GetResolution()
                                   00002F42 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F48 - 00002F49 (0x2 bytes), align: 1
  Segment part 26.            Intra module refs:   Avr_pwm::Avr_pwm(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IPwmPort::IPwmPort()    00002F48 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F4A - 00002F67 (0x1e bytes), align: 1
  Segment part 27.            Intra module refs:   Avr_pwm::~Avr_pwm()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IPwmPort::~IPwmPort()   00002F4A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C47 - 00005C51 (0xb bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
INITTAB
  Segment part 13. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C52 - 00005C83 (0x32 bytes), align: 0
  Segment part 15.            Intra module refs:   Segment part 14
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000AC7 - 00000AD1 (0xb bytes), align: 0
  Segment part 11.            Intra module refs:   Avr_pwm::SetPreScaler(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000AD2 - 00000B03 (0x32 bytes), align: 0
  Segment part 14.            Intra module refs:   Avr_pwm::SetPreScaler(unsigned char)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000100 - 00000109 (0xa bytes), align: 0
  Segment part 10.            Intra module refs:   Avr_pwm::Avr_pwm(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::__vtbl         00000100 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_sleep.r90
  PROGRAM MODULE, NAME : avr_sleep

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_spi.r90
  PROGRAM MODULE, NAME : avr_spi

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 0000002D - 0000002D (0x1 bytes), align: 0
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_SPCR                 0000002D 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002E - 0000002E (0x1 bytes), align: 0
  Segment part 2. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_SPSR                 0000002E 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002F - 0000002F (0x1 bytes), align: 0
  Segment part 3. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_SPDR                 0000002F 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from avr_pwm
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRB                 
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::new AvrSpi()    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::AvrSpi()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::Init()          
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::WriteByte(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::ReadByte(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISpi::ISpi()            
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 14. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::__vtbl          

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_timer.r90
  PROGRAM MODULE, NAME : avr_timer

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000043 - 00000043 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_OCR2                 00000043 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000044 - 00000044 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TCNT2                00000044 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000045 - 00000045 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TCCR2                00000045 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000057 - 00000057 (0x1 bytes), align: 0
  Segment part 4. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TIMSK                00000057 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EC3 - 00000EC3 (0x1 bytes), align: 0
  Segment part 13.            Intra module refs:   Avr_timer0::Avr_timer0()
                                                   Avr_timer0::isTimeOut()
                                                   timer_cmp()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timeout                 00000EC3 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::new Avr_timer0()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F68 - 00002F83 (0x1c bytes), align: 1
  Segment part 16.            Intra module refs:   timer_cmp()::??INTVEC 36
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timer_cmp()             00002F68 
               interrupt function
               CSTACK = 00000000 ( 00000003 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F84 - 00002FAB (0x28 bytes), align: 1
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::Avr_timer0()
                                   00002F84        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FAC - 00002FC1 (0x16 bytes), align: 1
  Segment part 18.            Intra module refs:   Avr_timer0::Avr_timer0()
                                                   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::Init()      00002FAC 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FC2 - 00002FC9 (0x8 bytes), align: 1
  Segment part 19.            Intra module refs:   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::GetTimeOutMS()
                                   00002FC2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FCA - 00002FE1 (0x18 bytes), align: 1
  Segment part 20.            Intra module refs:   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::isTimeOut()
                                   00002FCA 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FE2 - 00002FE3 (0x2 bytes), align: 1
  Segment part 21.            Intra module refs:   Avr_timer0::Avr_timer0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimer::ITimer()        00002FE2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimer::~ITimer()       
    -------------------------------------------------------------------------
CODE
  Segment part 23. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::~Avr_timer0()
                                   
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 00000027 (0x28 bytes), align: 1
  Segment part 9. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timer_cmp()::??INTVEC 36
                                   00000024 
    -------------------------------------------------------------------------
CSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 14. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000010A - 00000111 (0x8 bytes), align: 0
  Segment part 12.            Intra module refs:   Avr_timer0::Avr_timer0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::__vtbl      0000010A 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\avr_uart.r90
  PROGRAM MODULE, NAME : avr_uart

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000029 - 00000029 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UBRR0L               00000029 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002A - 0000002A (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_uart0::Init()
                                                   Avr_uart0::SendTxEvent()
                                                   usart0_txc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UCSR0B               0000002A 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002B - 0000002B (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UCSR0A               0000002B 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002C - 0000002C (0x1 bytes), align: 0
  Segment part 4. ROOT.       Intra module refs:   usart0_rxc()
                                                   usart0_txc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UDR0                 0000002C 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000031 - 00000031 (0x1 bytes), align: 0
  Segment part 5. ROOT.       Intra module refs:   Avr_uart0::Init()
                                                   E02SMBLed::E02SMBLed() (dio_adaptor)
                                                   E02SMBLed::GetPort() (dio_adaptor)
                                                   E02SMBLed::SetPort(unsigned char) (dio_adaptor)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRD                 00000031 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000090 - 00000090 (0x1 bytes), align: 0
  Segment part 6. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UBRR0H               00000090 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000095 - 00000095 (0x1 bytes), align: 0
  Segment part 7. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UCSR0C               00000095 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EC4 - 00000EC5 (0x2 bytes), align: 0
  Segment part 22.            Intra module refs:   Avr_uart0::Avr_uart0()
                                                   usart0_rxc()
                                                   usart0_txc()
           LOCAL                   ADDRESS         
           =====                   =======         
           uart0                   00000EC4 
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::new Avr_uart0()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FE4 - 00003047 (0x64 bytes), align: 1
  Segment part 25.            Intra module refs:   usart0_rxc()::??INTVEC 72
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_rxc()            00002FE4 
               interrupt function
               calls direct
               CSTACK = 00000000 ( 00000010 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003048 - 000030BB (0x74 bytes), align: 1
  Segment part 26.            Intra module refs:   usart0_txc()::??INTVEC 76
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_txc()            00003048 
               interrupt function
               calls direct
               CSTACK = 00000000 ( 00000011 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030BC - 000030EF (0x34 bytes), align: 1
  Segment part 27.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Avr_uart0()
                                   000030BC        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030F0 - 0000316D (0x7e bytes), align: 1
  Segment part 28.            Intra module refs:   Avr_uart0::Avr_uart0()
                                                   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Init()       000030F0 
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000316E - 0000316F (0x2 bytes), align: 1
  Segment part 29.            Intra module refs:   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Run()        0000316E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003170 - 00003173 (0x4 bytes), align: 1
  Segment part 30.            Intra module refs:   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::SendTxEvent()
                                   00003170 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Write(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003174 - 00003189 (0x16 bytes), align: 1
  Segment part 32.            Intra module refs:   Avr_uart0::Avr_uart0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISerialPort::ISerialPort(unsigned long)
                                   00003174 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISerialPort::~ISerialPort()
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000318A - 000031CB (0x42 bytes), align: 1
  Segment part 34.            Intra module refs:   usart0_rxc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISerialPort::SendrxBuff(unsigned char)
                                   0000318A 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000031CC - 0000321B (0x50 bytes), align: 1
  Segment part 35.            Intra module refs:   usart0_txc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISerialPort::SendtxBuff(unsigned char &)
                                   000031CC 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::~Avr_uart0()
                                   
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 9. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 10. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 11. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 0000004B (0x4c bytes), align: 1
  Segment part 12. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_rxc()::??INTVEC 72
                                   00000048 
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 0000004F (0x50 bytes), align: 1
  Segment part 13. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_txc()::??INTVEC 76
                                   0000004C 
    -------------------------------------------------------------------------
CSTACK
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C84 - 00005C8D (0xa bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
INITTAB
  Segment part 19. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005C8E - 00005CBF (0x32 bytes), align: 0
  Segment part 21.            Intra module refs:   Segment part 20
    -------------------------------------------------------------------------
INITTAB
  Segment part 23. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000B04 - 00000B0D (0xa bytes), align: 0
  Segment part 17.            Intra module refs:   ISerialPort::SendrxBuff(unsigned char)
                                                   ISerialPort::SendtxBuff(unsigned char &)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000B0E - 00000B3F (0x32 bytes), align: 0
  Segment part 20.            Intra module refs:   ISerialPort::SendrxBuff(unsigned char)
                                                   ISerialPort::SendtxBuff(unsigned char &)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000112 - 00000119 (0x8 bytes), align: 0
  Segment part 16.            Intra module refs:   Avr_uart0::Avr_uart0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::__vtbl       00000112 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\clcd.r90
  PROGRAM MODULE, NAME : clcd

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::new Clcd()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000321C - 0000322F (0x14 bytes), align: 1
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Clcd()            0000321C        ClcdAdaptor::ClcdAdaptor() (clcd_adaptor)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003230 - 00003299 (0x6a bytes), align: 1
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Write(unsigned char, char *)
                                   00003230        mylcdAdaptor::Write(char *) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000005 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Write(unsigned char, char __flash *)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000329A - 0000329B (0x2 bytes), align: 1
  Segment part 16.            Intra module refs:   Clcd::Clcd()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Init()            0000329A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005CC0 - 00005CCC (0xd bytes), align: 0
  Segment part 8.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005CCD - 00005CF4 (0x28 bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 10
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000B40 - 00000B4C (0xd bytes), align: 0
  Segment part 7.             Intra module refs:   Clcd::Write(unsigned char, char *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000B4D - 00000B74 (0x28 bytes), align: 0
  Segment part 10.            Intra module refs:   Clcd::Write(unsigned char, char *)

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\clcd_adaptor.r90
  PROGRAM MODULE, NAME : clcd_adaptor

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000055 - 00000055 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   ClcdAdaptor::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_MCUCR                00000055 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000006C - 0000006C (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   ClcdAdaptor::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_XMCRB                0000006C 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000006D - 0000006D (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   ClcdAdaptor::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_XMCRA                0000006D 
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::new ClcdAdaptor()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000329C - 000032BD (0x22 bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::ClcdAdaptor()
                                   0000329C        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000032BE - 00003315 (0x58 bytes), align: 1
  Segment part 13.            Intra module refs:   ClcdAdaptor::ClcdAdaptor()
                                                   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::Init()     000032BE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003316 - 0000332D (0x18 bytes), align: 1
  Segment part 14.            Intra module refs:   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::SetData(unsigned char)
                                   00003316 
               calls direct
               CSTACK = 00000000 ( 00000003 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000332E - 00003349 (0x1c bytes), align: 1
  Segment part 15.            Intra module refs:   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::SetInstruction(unsigned char)
                                   0000332E 
               calls direct
               CSTACK = 00000000 ( 00000003 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::Data4bit_out(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::~Clcd()           
    -------------------------------------------------------------------------
CODE
  Segment part 18. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::~ClcdAdaptor()
                                   
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000011A - 00000121 (0x8 bytes), align: 0
  Segment part 10.            Intra module refs:   ClcdAdaptor::ClcdAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::__vtbl     0000011A 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\dac7512.r90
  PROGRAM MODULE, NAME : dac7512

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::new Dac7512(ISpi &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Dac7512(ISpi &)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Init()         
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::SetMode(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Write(unsigned short)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Write(unsigned short, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 14. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\dio.r90
  PROGRAM MODULE, NAME : dio

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::new DOut()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::new DIn(DInEvent &, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::new DIn()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000334A - 00003351 (0x8 bytes), align: 1
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::DOut()            0000334A        Led::Led() (led)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003352 - 0000337B (0x2a bytes), align: 1
  Segment part 18.            Intra module refs:   DOut::Flip(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::Set(unsigned char)
                                   00003352        Led::evTimerExpir() (led)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::Get()             
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000337C - 00003391 (0x16 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::Flip(unsigned char)
                                   0000337C        Led::evTimerExpir() (led)
                                                   myTimer1s::TimeOutEvent() (Term_Project_s)
                                                   myTimer500ms::TimeOutEvent() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::DIn(DInEvent &, unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003392 - 000033A9 (0x18 bytes), align: 1
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::DIn()              00003392        DigialIn::DigialIn() (dio_adaptor)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000033AA - 000033EB (0x42 bytes), align: 1
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::SetEvent(DInEvent &)
                                   000033AA        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::Get()              
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000033EC - 00003417 (0x2c bytes), align: 1
  Segment part 25.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::SetTimerInterval(unsigned char)
                                   000033EC        DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char) (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::evISR()            
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003418 - 000034D7 (0xc0 bytes), align: 1
  Segment part 27.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::evTimerExpir()     00003418        DInTimerAdaptor::TimeOutEvent() (BCComponentManager)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005CF5 - 00005CFC (0x8 bytes), align: 0
  Segment part 8.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005CFD - 00005D2B (0x2f bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 10
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005D2C - 00005D42 (0x17 bytes), align: 0
  Segment part 13.            Intra module refs:   Segment part 12
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000B75 - 00000B7C (0x8 bytes), align: 0
  Segment part 7.             Intra module refs:   DIn::SetEvent(DInEvent &)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000B7D - 00000BAB (0x2f bytes), align: 0
  Segment part 10.            Intra module refs:   DIn::SetEvent(DInEvent &)
                                                   DIn::SetTimerInterval(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000BAC - 00000BC2 (0x17 bytes), align: 0
  Segment part 12.            Intra module refs:   DIn::SetTimerInterval(unsigned char)

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\dio_adaptor.r90
  PROGRAM MODULE, NAME : dio_adaptor

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from avr_uart
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRD                 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000032 - 00000032 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   E02SMBLed::GetPort()
                                                   E02SMBLed::SetPort(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_PORTD                00000032 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000063 - 00000063 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   DigialIn::GetPort()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_PING                 00000063 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000064 - 00000064 (0x1 bytes), align: 0
  Segment part 4. ROOT.       Intra module refs:   DigialIn::DigialIn()
                                                   DigialIn::GetPort()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRG                 00000064 
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::new E02SMBLed()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::new DigialIn(DInEvent &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::new DigialIn()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000034D8 - 00003503 (0x2c bytes), align: 1
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::E02SMBLed()
                                   000034D8        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003504 - 0000353F (0x3c bytes), align: 1
  Segment part 24.            Intra module refs:   E02SMBLed::E02SMBLed()
                                                   E02SMBLed::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::SetPort(unsigned char)
                                   00003504 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003540 - 0000356F (0x30 bytes), align: 1
  Segment part 25.            Intra module refs:   E02SMBLed::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::GetPort()    00003540 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::DigialIn(DInEvent &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003570 - 00003599 (0x2a bytes), align: 1
  Segment part 27.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::DigialIn()    00003570        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000359A - 000035D3 (0x3a bytes), align: 1
  Segment part 28.            Intra module refs:   DigialIn::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::GetPort()     0000359A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::~DOut()           
    -------------------------------------------------------------------------
CODE
  Segment part 30. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::~DIn()             
    -------------------------------------------------------------------------
CODE
  Segment part 31. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::~Led()             
    -------------------------------------------------------------------------
CODE
  Segment part 32. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::~E02SMBLed()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 33. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::~DigialIn()   
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005D43 - 00005D82 (0x40 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
INITTAB
  Segment part 15. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005D83 - 00005DBC (0x3a bytes), align: 0
  Segment part 17.            Intra module refs:   Segment part 16
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005DBD - 00005DF1 (0x35 bytes), align: 0
  Segment part 19.            Intra module refs:   Segment part 18
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000BC3 - 00000C02 (0x40 bytes), align: 0
  Segment part 13.            Intra module refs:   E02SMBLed::GetPort()
                                                   E02SMBLed::SetPort(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000C03 - 00000C3C (0x3a bytes), align: 0
  Segment part 16.            Intra module refs:   DigialIn::GetPort()
                                                   E02SMBLed::GetPort()
                                                   E02SMBLed::SetPort(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000C3D - 00000C71 (0x35 bytes), align: 0
  Segment part 18.            Intra module refs:   DigialIn::GetPort()
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000122 - 00000127 (0x6 bytes), align: 0
  Segment part 11.            Intra module refs:   E02SMBLed::E02SMBLed()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::__vtbl       00000122 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000128 - 0000012B (0x4 bytes), align: 0
  Segment part 12.            Intra module refs:   DigialIn::DigialIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::__vtbl        00000128 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\led.r90
  PROGRAM MODULE, NAME : led

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::new Led()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000035D4 - 000035F7 (0x24 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::Led()              000035D4        E02SMBLed::E02SMBLed() (dio_adaptor)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000035F8 - 0000361B (0x24 bytes), align: 1
  Segment part 10.            Intra module refs:   Led::Led()
                                                   Led::evTimerExpir()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::Init()             000035F8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::Blink(unsigned char, unsigned char, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000361C - 000036C9 (0xae bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::evTimerExpir()     0000361C        TimerWithLedAdapter::TimeOutEvent() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::~DOut()           
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from MC_E02SMB_v1_3DriverFactory
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::~Led()             
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000012C - 00000131 (0x6 bytes), align: 0
  Segment part 7.             Intra module refs:   Led::Led()
           LOCAL                   ADDRESS         
           =====                   =======         
           Led::__vtbl             0000012C 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\mcp3204.r90
  PROGRAM MODULE, NAME : mcp3204

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::new Mcp3204(ISpi &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::Mcp3204(ISpi &)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::Init()         
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::SetChannel(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::GetADC()       
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::GetADC(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 10. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\pwm.r90
  PROGRAM MODULE, NAME : pwm

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::new Pwm(IPwmPort *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000036CA - 00003703 (0x3a bytes), align: 1
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::Pwm(IPwmPort *)    000036CA        BCComponentManager::CreatePwm() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003704 - 00003721 (0x1e bytes), align: 1
  Segment part 19.            Intra module refs:   Pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::~Pwm()             00003704        <Unnamed 5> (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003722 - 000037B5 (0x94 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::SetDuty(unsigned short)
                                   00003722        myPwmAdaptor::SetDuty(unsigned short) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000005 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000037B6 - 000037FF (0x4a bytes), align: 1
  Segment part 21.            Intra module refs:   Pwm::SetDuty(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::Run()              000037B6 
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::Stop()             
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005DF2 - 00005DFC (0xb bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005DFD - 00005E2B (0x2f bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E2C - 00005E35 (0xa bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E36 - 00005E47 (0x12 bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000C72 - 00000C7C (0xb bytes), align: 0
  Segment part 8.             Intra module refs:   Pwm::Pwm(IPwmPort *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000C7D - 00000CAB (0x2f bytes), align: 0
  Segment part 11.            Intra module refs:   Pwm::Pwm(IPwmPort *)
                                                   Pwm::Run()
                                                   Pwm::SetDuty(unsigned short)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000CAC - 00000CB5 (0xa bytes), align: 0
  Segment part 13.            Intra module refs:   Pwm::Run()
                                                   Pwm::SetDuty(unsigned short)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000CB6 - 00000CC7 (0x12 bytes), align: 0
  Segment part 15.            Intra module refs:   Pwm::SetDuty(unsigned short)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000132 - 00000133 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   Pwm::Pwm(IPwmPort *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::__vtbl             00000132 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\ringbuffer.r90
  PROGRAM MODULE, NAME : ringbuffer

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::new RingBuffer()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003800 - 00003817 (0x18 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::RingBuffer()
                                   00003800        SerialIO::SerialIO(ISerialPort &) (serialIO)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::Flush()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::isEmpty()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003818 - 00003865 (0x4e bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::PushBack(unsigned char)
                                   00003818        SerialIO::PushBackRxBuff(unsigned char) (serialIO)
                                                   SerialIO::PushBackTxBuff(unsigned char) (serialIO)
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003866 - 000038A3 (0x3e bytes), align: 1
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::Pop(unsigned char &)
                                   00003866        SerialIO::PopRxBuff(unsigned char &) (serialIO)
                                                   SerialIO::PopTxBuff(unsigned char &) (serialIO)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::~RingBuffer()
                                   
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000134 - 00000135 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   RingBuffer::RingBuffer()
           LOCAL                   ADDRESS         
           =====                   =======         
           RingBuffer::__vtbl      00000134 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\serialIO.r90
  PROGRAM MODULE, NAME : serialIO

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::new SerialIO(ISerialPort &, SerialEvent &, WRITE_OPT_T)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::new SerialIO(ISerialPort &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::SerialIO(ISerialPort &, SerialEvent &, WRITE_OPT_T)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000038A4 - 000038F1 (0x4e bytes), align: 1
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::SerialIO(ISerialPort &)
                                   000038A4        BCComponentManager::Init() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000038F2 - 0000393F (0x4e bytes), align: 1
  Segment part 29.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::SetEvent(SerialEvent &)
                                   000038F2        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::rxFlush()     
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::txFlush()     
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003940 - 000039A3 (0x64 bytes), align: 1
  Segment part 32.            Intra module refs:   SerialIO::Write(char __flash *)
                                                   SerialIO::Write(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(unsigned char)
                                   00003940        mySerialEvent::Receive(unsigned char) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(unsigned char const *, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000039A4 - 00003A19 (0x76 bytes), align: 1
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(char const *)
                                   000039A4        mySerialEvent::Receive(unsigned char) (Term_Project_s)
                                                   mySerialOutAdaptor::Write(char *) (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003A1A - 00003A8F (0x76 bytes), align: 1
  Segment part 35.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(char __flash *)
                                   00003A1A        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003A90 - 00003ADD (0x4e bytes), align: 1
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::evTick()      00003A90        BCComponentMod::Execute() (BCComponentManager)
               calls direct and indirect
               CSTACK = 00000000 ( 00000003 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003ADE - 00003AF7 (0x1a bytes), align: 1
  Segment part 37.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PushBackRxBuff(unsigned char)
                                   00003ADE        ISerialPort::SendrxBuff(unsigned char) (avr_uart)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003AF8 - 00003B11 (0x1a bytes), align: 1
  Segment part 38.            Intra module refs:   SerialIO::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PopRxBuff(unsigned char &)
                                   00003AF8 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003B12 - 00003B2B (0x1a bytes), align: 1
  Segment part 39.            Intra module refs:   SerialIO::Write(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PushBackTxBuff(unsigned char)
                                   00003B12 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003B2C - 00003B45 (0x1a bytes), align: 1
  Segment part 40.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PopTxBuff(unsigned char &)
                                   00003B2C        ISerialPort::SendtxBuff(unsigned char &) (avr_uart)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 41. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::~RingBuffer()
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003B46 - 00003B4D (0x8 bytes), align: 1
  Segment part 42.            Intra module refs:   SerialIO::SetEvent(SerialEvent &)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialEvent::SetSerialIO(SerialIO &)
                                   00003B46 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::~SerialIO()   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003B4E - 00003B7F (0x32 bytes), align: 1
  Segment part 44.            Intra module refs:   SerialIO::SerialIO(ISerialPort &)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ISerialPort::SetSerialIO(SerialIO &)
                                   00003B4E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E48 - 00005E4F (0x8 bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E50 - 00005E83 (0x34 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E84 - 00005E8B (0x8 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E8C - 00005E98 (0xd bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005E99 - 00005EA2 (0xa bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005EA3 - 00005ED4 (0x32 bytes), align: 0
  Segment part 24.            Intra module refs:   Segment part 23
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000CC8 - 00000CCF (0x8 bytes), align: 0
  Segment part 8.             Intra module refs:   SerialIO::SetEvent(SerialEvent &)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000CD0 - 00000D03 (0x34 bytes), align: 0
  Segment part 11.            Intra module refs:   SerialIO::SetEvent(SerialEvent &)
                                                   SerialIO::Write(char __flash *)
                                                   SerialIO::Write(char const *)
                                                   SerialIO::Write(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D04 - 00000D0B (0x8 bytes), align: 0
  Segment part 13.            Intra module refs:   SerialIO::Write(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D0C - 00000D18 (0xd bytes), align: 0
  Segment part 19.            Intra module refs:   SerialIO::Write(char __flash *)
                                                   SerialIO::Write(char const *)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D19 - 00000D22 (0xa bytes), align: 0
  Segment part 21.            Intra module refs:   ISerialPort::SetSerialIO(SerialIO &)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D23 - 00000D54 (0x32 bytes), align: 0
  Segment part 23.            Intra module refs:   ISerialPort::SetSerialIO(SerialIO &)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000136 - 00000137 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   SerialIO::SerialIO(ISerialPort &)
           LOCAL                   ADDRESS         
           =====                   =======         
           SerialIO::__vtbl        00000136 

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\split2.r90
  PROGRAM MODULE, NAME : split2

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _LocaleC_isspace        
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           isspace                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           char_allocator::char_allocator()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _String_val::_String_val(char_allocator)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(_Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::~string()       
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator=(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator[](size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::size() const    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::substr(size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_AllocHolder()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 21. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 22. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 _Copy_backward_opt0(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=string const *, _BidIt2=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Backward_copier<string, 0>::_Copy(string const *, string const *, string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=string *, _BidIt2=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new(unsigned int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Allocator<void>::allocate(unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 30. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Allocator<void>::deallocate(void *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Construct(_T1 *, _T2 const &)[with _T1=string, _T2=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Destroy(_Ty *)[with _Ty=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void allocator<string>::allocator(allocator<_Other> const &)[with _Other=void]
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::deallocate(string *, unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::allocate(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::construct(string *, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::destroy(string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::max_size() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 39. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<void>::allocator()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Destroy_range(_Ty *, _Ty *, _Alloc &)[with _Ty=string, _Alloc=allocator<string>]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy0(_InIt, _InIt, _FwdIt)[with _InIt=string const *, _FwdIt=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copier<string, 0>::_Copy(string const *, string const *, string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=string const *, _FwdIt=string *, _Alloc=allocator<string>]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=string const *, _FwdIt=string *, _Alloc=allocator<string>]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=string *, _Diff=unsigned int, _Tval=string, _Alloc=allocator<string>]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 47. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Vector_value()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 48. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Zero()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 49. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_ToBptr(void *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 50. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bfirst() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 51. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Blast() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 52. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bend() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 53. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bsize() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 54. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bcapacity() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Capacity<_Sz>() const[with _Alloc=allocator<void>, _Sz=21]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=21]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Xlen() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Vector_impl()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Altyval() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_EraseAll()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Tidy0()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=string, _Alloc=allocator<string>, _Ty1=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=string, _Alloc=allocator<string>, _Ty1=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<string, allocator<string>>::_Push_back(_Ty1 const &)[with _Ty1=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Mytyfirst() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Mytylast() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Mytyend() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::size() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::capacity() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Ufill(string *, unsigned int, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Ucopy(string const *, string const *, string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::vector()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::push_back(_ParamTy)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           split(string const &)   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\terminal_service.r90
  PROGRAM MODULE, NAME : terminal_service

  SEGMENTS IN THE MODULE
  ======================
NEAR_F
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           errormsg                
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::new TerminalService(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::TerminalService(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::Init()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::Input(char)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 23. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           TerminalService::Input(char)::ctrl
                                   
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 25. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           TerminalService::Input(char)::listpointer
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::isprint(char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::Input(string const &)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::AddCommand(ITerminalCommand &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           char_traits::length(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 34. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_AllocHolder()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 35. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 36. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 37. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           char_allocator::char_allocator()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 38. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _String_val::_String_val(char_allocator)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 40. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(_Myt const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(char const *, char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 43. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::~string()       
    -------------------------------------------------------------------------
CODE
  Segment part 44. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator=(_Myt const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator+=(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator+=(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 49. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(_Myt const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(char *, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::erase(char *, char *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::clear()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::begin()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::end()           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::push_back(char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::size() const    
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::empty() const   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::compare(_Myt const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Pdif(char const *, char const *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr()        
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 62. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _OutIt _Copy_opt0(_InIt, _InIt, _OutIt)[with _InIt=string const *, _OutIt=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Copier<string, 0>::_Copy(string const *, string const *, string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Copy_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty1 *_Copy_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _OutIt copy(_InIt, _InIt, _OutIt)[with _InIt=string *, _OutIt=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 68. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 _Copy_backward_opt0(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=string const *, _BidIt2=string *]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 69. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Backward_copier<string, 0>::_Copy(string const *, string const *, string *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 70. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 71. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 72. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 73. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 74. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 75. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=string *, _BidIt2=string *]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 76. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 77. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new(unsigned int, void *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 78. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Allocator<void>::allocate(unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 79. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Allocator<void>::deallocate(void *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 80. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Construct(_T1 *, _T2 const &)[with _T1=string, _T2=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 81. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Destroy(_Ty *)[with _Ty=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 82. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void allocator<string>::allocator(allocator<_Other> const &)[with _Other=void]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void allocator<unsigned char>::allocator(allocator<_Other> const &)[with _Other=void]
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 84. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void allocator<unsigned short>::allocator(allocator<_Other> const &)[with _Other=void]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 85. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::deallocate(string *, unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 86. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned short>::deallocate(unsigned short *, unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 87. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::allocate(unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned char>::allocate(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 89. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned short>::allocate(unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 90. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::construct(string *, string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 91. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::destroy(string *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 92. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<string>::max_size() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned char>::max_size() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 94. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<unsigned short>::max_size() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 95. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           allocator<void>::allocator()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 96. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Destroy_range(_Ty *, _Ty *, _Alloc &)[with _Ty=string, _Alloc=allocator<string>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 97. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy0(_InIt, _InIt, _FwdIt)[with _InIt=string const *, _FwdIt=string *]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 98. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copy(char const *, char const *, char *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 99. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copier<string, 0>::_Copy(string const *, string const *, string *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 100. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 101. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 102. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 103. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=string const *, _FwdIt=string *, _Alloc=allocator<string>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 104. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 105. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=string const *, _FwdIt=string *, _Alloc=allocator<string>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 106. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 107. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=string *, _Diff=unsigned int, _Tval=string, _Alloc=allocator<string>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 108. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=unsigned short *, _Diff=unsigned int, _Tval=unsigned short, _Alloc=allocator<unsigned short>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 109. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Vector_value()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 110. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Zero()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Buy(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 112. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_ToBptr(void *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 113. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bfirst() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 114. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Blast() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 115. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bend() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 116. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bsize() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 117. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Bcapacity() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 118. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Capacity<_Sz>() const[with _Alloc=allocator<void>, _Sz=21]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 119. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Capacity<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 120. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=21]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=1]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 122. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 123. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Xlen() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 124. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Vector_impl()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 125. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Vector_impl()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 126. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Altyval() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 127. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 128. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_EraseAll()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 129. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 130. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Tidy0()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 131. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 132. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Tidy()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 133. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 134. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Destroy(unsigned short *, unsigned short *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Assign(_Vector_impl<string, allocator<string>> const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 136. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=string, _Alloc=allocator<string>, _Ty1=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 137. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 138. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=string, _Alloc=allocator<string>, _Ty1=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 139. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 140. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Erase(string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 141. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<string, allocator<string>>::_Push_back(_Ty1 const &)[with _Ty1=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 142. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back(_Ty1 const &)[with _Ty1=ITerminalCommand *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 143. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Mytyfirst() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 144. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyfirst() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 145. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Mytylast() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 146. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 147. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Mytyend() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 148. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyend() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 149. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 150. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 151. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::size() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 152. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::size() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 153. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::capacity() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 154. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::capacity() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 155. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 156. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 157. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 158. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 159. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 160. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 161. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Ufill(string *, unsigned int, string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 162. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 163. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Ucopy(string const *, string const *, string *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 164. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 165. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::vector()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 166. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITerminalCommand *>::vector()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 167. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::~vector()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 168. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::operator=(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 169. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::begin()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 170. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITerminalCommand *>::begin()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 171. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::size() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 172. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITerminalCommand *>::size() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 173. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::empty() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 174. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::operator[](unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 175. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITerminalCommand *>::operator[](unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 176. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::push_back(_ParamTy)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 177. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<ITerminalCommand *>::push_back(ITerminalCommand *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 178. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::erase(string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 179. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::_P(string *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 180. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           vector<string>::_I(string *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 181. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator+(char const *, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 182. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator+(string const &, char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 183. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator==(string const &, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 184. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITerminalCommand::operator==(string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 185. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITerminalCommand::SetTerminalService(TerminalService &)
                                   
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 24. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_I
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 20. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\type.r90
  PROGRAM MODULE, NAME : type

  SEGMENTS IN THE MODULE
  ======================
NEAR_F
  Relative segment, address: CODE 00000138 - 00000290 (0x159 bytes), align: 0
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           gnu_lic                 00000138        Term_Project_s::Init() (Term_Project_s)
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\work\ATmega128_Debug\Obj\xmodem.r90
  PROGRAM MODULE, NAME : xmodem

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\Program Files\IAR Systems\Embedded Workbench 5.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.r90
  LIBRARY MODULE, NAME : ?abort

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003B80 - 00003B91 (0x12 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           abort                   00003B80        _Nomemory() (?nomemory)
                                                   __pure_virtual_called (?xpurevirtual)
                                                   __record_needed_destruction (?cppinit)
                                                   __taabi_assert (?xassert)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?__dbg_break

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003B92 - 00003B93 (0x2 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __DebugBreak            00003B92        __exit (?__exit)
                                                   __iar_ReportAssert (?_ReportAssert)
                                                   abort (?abort)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?_ReportAssert

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003B94 - 00003BBB (0x28 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_ReportAssert      00003B94        __taabi_assert (?xassert)
               calls direct
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?__exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003BBC - 00003BCD (0x12 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __exit                  00003BBC        Segment part 5 (?_exit)
                                                   abort (?abort)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?_exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003BCE, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _exit                   00003BCE        ?cstartup_call_main (?C_STARTUP)
                                                   exit (?exit)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003BCE - 00003BD1 (0x4 bytes), align: 1
  Segment part 1.             Intra module refs:   __cstart_call_dtors
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003BD2 - 00003BD5 (0x4 bytes), align: 1
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __cstart_call_dtors     00003BD2        __record_needed_destruction (?cppinit)
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __cstart_closeall       
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003BD6 - 00003BD9 (0x4 bytes), align: 1
  Segment part 4.             Intra module refs:   Segment part 1
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003BDA - 00003BDD (0x4 bytes), align: 1
  Segment part 5.             Intra module refs:   _exit

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?cppinit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003BDE - 00003C3B (0x5e bytes), align: 1
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __call_ctors            00003BDE        ?call_ctors (?C_STARTUP)
               calls indirect
               CSTACK = 00000000 ( 0000000B )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __alloc_record_needed_destruction
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000EC6 - 00000EC7 (0x2 bytes), align: 0
  Segment part 3.             Intra module refs:   Segment part 10
                                                   __call_dtors
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003C3C - 00003C67 (0x2c bytes), align: 1
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __record_needed_destruction
                                   00003C3C        BCComponentManager::CreateAdc() (BCComponentManager)
                                                   BCComponentManager::CreatePwm() (BCComponentManager)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   MC_E02SMBDriverFactory::CreateAdc() (MC_E02SMB_v1_3DriverFactory)
                                                   TimerManager::GetInstance(ITimer *) (TimerManager)
                                                   __sti__routine() (BCComponentManager)
                                                   __sti__routine() (MC_E02SMB_v1_3DriverFactory)
                                                   __sti__routine() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003C68 - 00003C6D (0x6 bytes), align: 1
  Segment part 8.             Intra module refs:   __call_dtors
                                                   __record_needed_destruction
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003C6E - 00003CA9 (0x3c bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __call_dtors            00003C6E        __cstart_call_dtors (?_exit)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CAA - 00003CAF (0x6 bytes), align: 1
  Segment part 10.            Intra module refs:   __call_dtors
                                                   __record_needed_destruction
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CB0 - 00003CB9 (0xa bytes), align: 1
  Segment part 11.            Intra module refs:   __call_dtors
                                                   __record_needed_destruction
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __tiny_vec_cctor        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_vec_cctor        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?RESET

  SEGMENTS IN THE MODULE
  ======================
INTVEC
  Common segment, address: CODE 00000000 - 00000003 (0x4 bytes), align: 1
  Segment part 0. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __program_start         00000000        Absolute parts (?ABS_ENTRY_MOD)
           ?RESET                  00000000        Segment part 2 (?C_STARTUP)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?C_STARTUP

  SEGMENTS IN THE MODULE
  ======================
CSTACK
  Segment part 0. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CBA, align: 1
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?C_STARTUP              00003CBA        Segment part 0 (?RESET)
           __RESTART               00003CBA 
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __RSTACK_in_external_ram
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __RSTACK_in_external_ram_new_way
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CBA - 00003CC5 (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   Segment part 2
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?zero_reg_initialization
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CC6 - 00003CC9 (0x4 bytes), align: 1
  Segment part 7.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?call_low_level_init    00003CC6 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CCA - 00003CD1 (0x8 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?need_segment_init      00003CCA        ?<Segment init: NEAR_I> (BCComponentManager)
                                                   ?<Segment init: NEAR_Z> (BCComponentManager)
    -------------------------------------------------------------------------
DIFUNCT
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CD2 - 00003CE1 (0x10 bytes), align: 1
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?call_ctors             00003CD2        Segment part 45 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 61 (BCComponentManager)
                                                   Segment part 76 (Term_Project_s)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003CE2 - 00003CED (0xc bytes), align: 1
  Segment part 11.            Intra module refs:   ?call_low_level_init
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?cstartup_call_main     00003CE2 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?delop_0

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003CEE - 00003CF9 (0xc bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator delete(void *)
                                   00003CEE        Adc::~Adc() (adc)
                                                   AdcEvent::~AdcEvent() (Term_Project_s)
                                                   Avr_adc::~Avr_adc() (avr_adc)
                                                   Avr_pwm::~Avr_pwm() (avr_pwm)
                                                   Avr_timer0::~Avr_timer0() (MC_E02SMB_v1_3DriverFactory)
                                                   Avr_uart0::~Avr_uart0() (MC_E02SMB_v1_3DriverFactory)
                                                   BCComponentMod::~BCComponentMod() (BCComponentManager)
                                                   CalClkFuncGen::~CalClkFuncGen() (CalClkFuncGen)
                                                   Clcd::~Clcd() (MC_E02SMB_v1_3DriverFactory)
                                                   ClcdAdaptor::~ClcdAdaptor() (MC_E02SMB_v1_3DriverFactory)
                                                   DIn::~DIn() (MC_E02SMB_v1_3DriverFactory)
                                                   DInEvent::~DInEvent() (Term_Project_s)
                                                   DInTimerAdaptor::~DInTimerAdaptor() (BCComponentManager)
                                                   DOut::~DOut() (MC_E02SMB_v1_3DriverFactory)
                                                   DigialIn::~DigialIn() (MC_E02SMB_v1_3DriverFactory)
                                                   E02SMBLed::~E02SMBLed() (MC_E02SMB_v1_3DriverFactory)
                                                   IAdcPort::~IAdcPort() (avr_adc)
                                                   IModule::~IModule() (BCComponentManager)
                                                   IPwmOut::~IPwmOut() (Term_Project_s)
                                                   IPwmPort::~IPwmPort() (avr_pwm)
                                                   ISerialPort::~ISerialPort() (MC_E02SMB_v1_3DriverFactory)
                                                   IStringOut::~IStringOut() (Term_Project_s)
                                                   ITimer::~ITimer() (MC_E02SMB_v1_3DriverFactory)
                                                   ITimerEvent::~ITimerEvent() (BCComponentManager)
                                                   Led::~Led() (MC_E02SMB_v1_3DriverFactory)
                                                   Pwm::~Pwm() (pwm)
                                                   RingBuffer::~RingBuffer() (BCComponentManager)
                                                   SerialEvent::~SerialEvent() (Term_Project_s)
                                                   SerialIO::~SerialIO() (BCComponentManager)
                                                   SystemManager::~SystemManager() (System_Manager)
                                                   Term_Project_s::~Term_Project_s() (Term_Project_s)
                                                   TimerManager::~TimerManager() (TimerManager)
                                                   TimerWithLedAdapter::~TimerWithLedAdapter() (BCComponentManager)
                                                   _Allocator<void>::deallocate(void *) (TimerManager)
                                                   myAdcAdaptor::~myAdcAdaptor() (Term_Project_s)
                                                   myPwmAdaptor::~myPwmAdaptor() (Term_Project_s)
                                                   mySWEvent::~mySWEvent() (Term_Project_s)
                                                   mySerialEvent::~mySerialEvent() (Term_Project_s)
                                                   mySerialOutAdaptor::~mySerialOutAdaptor() (Term_Project_s)
                                                   myTimer1s::~myTimer1s() (Term_Project_s)
                                                   myTimer500ms::~myTimer500ms() (Term_Project_s)
                                                   mylcdAdaptor::~mylcdAdaptor() (Term_Project_s)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?div

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003CFA - 00003D1D (0x24 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           div                     00003CFA        _GenldLarge (?xprintflarge)
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?errno

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Errno             
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __taabi_errno_addr      
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003D1E - 00003D21 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           exit                    00003D1E        ?cstartup_call_main (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?ios

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Fnarray::new _Fnarray(int, ios_base::event_callback, ios_base::_Fnarray *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Iosarray::new _Iosarray(int, ios_base::_Iosarray *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Iosarray::_Iosarray(int, ios_base::_Iosarray *)
                                   
               not allocated function
    -------------------------------------------------------------------------
NEAR_I
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BADOFF                 
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           fpos::_Stz              
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Fpz                    
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Index        
    -------------------------------------------------------------------------
NEAR_I
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Sync         
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::clear(int, bool)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::copyfmt(ios_base const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::imbue(locale const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::register_callback(event_callback, int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::~ios_base()   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Callfns(enum event)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Findarr(int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Addstd()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Init()       
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Tidy()       
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 6. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::__vtbl        

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?istream

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::in_avail()   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
    -------------------------------------------------------------------------
CODE
  Segment part 5. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
    -------------------------------------------------------------------------
CODE
  Segment part 6. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::snextc()     
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputbackc(char)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sungetc()    
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 10. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios::clear(int, bool)   
    -------------------------------------------------------------------------
CODE
  Segment part 11. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::_Sentry_base(istream &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::~_Sentry_base()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::sentry::sentry(istream &, bool)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Ipfx(bool)    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(_Bool &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(short &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned short &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(int &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned int &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(long long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned long long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(float &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(double &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(long double &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(void * &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(_Mysb *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get(char *, int, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get(char &)    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get(_Mysb &, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::getline(char *, int, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::ignore(int, int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::read(char *, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::readsome(char *, int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::peek()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::putback(char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::unget()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::sync()         
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::seekg(streampos)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::seekg(long, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::tellg()        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator>>(istream &, char *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 120. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator>>(istream &, char &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 122. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws(istream &)           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 124. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 126. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?S_EC_MUL_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003D22 - 00003D31 (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?S_EC_MUL_L02           00003D22        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   Segment part 19 (?xprintflarge)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   div (?div)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?S_SHL_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?S_SHL_L02              

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?US_SHR_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?US_SHR_L02             

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?US_DIVMOD_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003D32 - 00003D59 (0x28 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?US_DIVMOD_L02          00003D32        ?SS_DIVMOD_L02 (?SS_DIVMOD_L02)
                                                   CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   Led::evTimerExpir() (led)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?SS_DIVMOD_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003D5A - 00003D89 (0x30 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SS_DIVMOD_L02          00003D62        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   CalClkFuncGen::Switch() (CalClkFuncGen)
                                                   CalClkFuncGen::tm1s() (CalClkFuncGen)
                                                   Segment part 5 (?xassert)
                                                   div (?div)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?L_EC_MUL_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003D8A - 00003DC9 (0x40 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_EC_MUL_L03           00003D8A        Avr_uart0::Init() (avr_uart)
                                                   _LdtobLarge (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?UL_SHR_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003DCA - 00003DD9 (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL_SHR_L03             00003DCA        Segment part 9 (?FLOATS_L04)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?UL_DIVMOD_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003DDA - 00003E1F (0x46 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL_DIVMOD_L03          00003DDA        ?SL_DIVMOD_L03 (?SL_DIVMOD_L03)
                                                   Avr_uart0::Init() (avr_uart)
                                                   Segment part 62 (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?SL_DIVMOD_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003E20 - 00003E43 (0x24 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SL_DIVMOD_L03          00003E20        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003E44 - 00003E53 (0x10 bytes), align: 1
  Segment part 1.             Intra module refs:   ?SL_DIVMOD_L03
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_NEG_L03              00003E44        Segment part 9 (?FLOATS_L04)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003E54 - 00003E63 (0x10 bytes), align: 1
  Segment part 2.             Intra module refs:   ?SL_DIVMOD_L03
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_NEG_Q_L03            00003E54 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?FLOATS_L04

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003E64 - 00003E8D (0x2a bytes), align: 1
  Segment part 0.             Intra module refs:   ?F2SL_L04
                                                   ?F2UL_L04
                                                   ?F_ADD_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003E8E - 00003EE1 (0x54 bytes), align: 1
  Segment part 1.             Intra module refs:   ?F_ADD_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_ROUND_L04            00003EAE 
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003EE2 - 00003EE3 (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?F_ROUND_L04
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SL2F_L04               
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003EE4 - 00003EEF (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   ?UL2F_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003EF0 - 00003EF3 (0x4 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL2F_L04               00003EF0        Adc::SetFrequency(unsigned char) (adc)
                                                   _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003EF4 - 00003F07 (0x14 bytes), align: 1
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F2UL_L04               00003EF4        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003F08 - 00003F19 (0x12 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F2SL_L04               00003F08        Adc::SetFrequency(unsigned char) (adc)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003F1A - 00003F3D (0x24 bytes), align: 1
  Segment part 9.             Intra module refs:   ?F2SL_L04
                                                   ?F2UL_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003F3E - 00003F6B (0x2e bytes), align: 1
  Segment part 10.            Intra module refs:   ?F_ADD_L04
                                                   ?F_CMP_LT_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 11
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?TEST_P_L04             00003F3E 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003F6C - 00003F8B (0x20 bytes), align: 1
  Segment part 11.            Intra module refs:   ?F_ADD_L04
                                                   ?F_CMP_LT_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 17
                                                   Segment part 22
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003F8C - 00004033 (0xa8 bytes), align: 1
  Segment part 12.            Intra module refs:   ?F_SUB_L04
                                                   Segment part 17
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_ADD_L04              00003FAC 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004034 - 00004039 (0x6 bytes), align: 1
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_SUB_L04              00004034        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000403A - 00004045 (0xc bytes), align: 1
  Segment part 14.            Intra module refs:   ?F2SL_L04
                                                   ?F_DIV_L04
                                                   ?F_INFINITE_L04
                                                   ?F_MUL_L04
                                                   ?F_NAN_L04
                                                   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_ZERO_L04             0000403A 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004046 - 0000404D (0x8 bytes), align: 1
  Segment part 15.            Intra module refs:   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 3
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_INFINITE_L04         00004046 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000404E - 00004053 (0x6 bytes), align: 1
  Segment part 16.            Intra module refs:   ?F_ADD_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 17
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_NAN_L04              0000404E 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004054 - 0000406D (0x1a bytes), align: 1
  Segment part 17.            Intra module refs:   ?F_DIV_L04
                                                   ?F_MUL_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000406E - 00004143 (0xd6 bytes), align: 1
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_MUL_L04              0000406E        Adc::SetFrequency(unsigned char) (adc)
                                                   Segment part 55 (?xprintflarge)
                                                   scale (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004144 - 00004253 (0x110 bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_DIV_L04              00004160        Adc::SetFrequency(unsigned char) (adc)
                                                   _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_CMP_EQ_L04           
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004254 - 0000425B (0x8 bytes), align: 1
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_CMP_LT_L04           00004254        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000425C - 00004283 (0x28 bytes), align: 1
  Segment part 22.            Intra module refs:   ?F_CMP_LT_L04
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_CMP_GE_L04           

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xV_SWITCH_L06

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004284 - 0000431F (0x9c bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?CV_SWITCH_L06          00004296        _PrintfLarge (?xprintflarge)
           ?SV_SWITCH_L06          0000429E 
           ?LV_SWITCH_L06          000042AA 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?MOVE_LONG_L07

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004320 - 00004335 (0x16 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_SRAM_SRAM_16_L07    00004320        Segment part 51 (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Segment part 1. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_FLASH_SRAM_16EC_16_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_FLASH_SRAM_24EC_16_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_GENERIC24_SRAM_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_SRAM_GENERIC24_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_FLASH_GENERIC24_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_GENERIC_GENERIC_24_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_GENERIC24_FARG_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LONG_FARG_8_L07        
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LONG_FARG_16_L07       
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LONG_FARG_24_L07       
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?FLASH_FARG_8_L07       
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?FLASH_FARG_16_L07      
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?FLASH_FARG_24_L07      
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?HUGEFLASH_FARG_L07     
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?MEMCLR_8_L07           
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?MEMCLR_16_L07          

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?PROLOGUE_L09

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004336 - 00004337 (0x2 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE16_L09         00004336        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004338 - 00004339 (0x2 bytes), align: 1
  Segment part 1.             Intra module refs:   ?PROLOGUE16_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE15_L09         00004338 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000433A - 0000433B (0x2 bytes), align: 1
  Segment part 2.             Intra module refs:   ?PROLOGUE15_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE14_L09         0000433A 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000433C - 0000433D (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?PROLOGUE14_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE13_L09         0000433C 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000433E - 0000433F (0x2 bytes), align: 1
  Segment part 4.             Intra module refs:   ?PROLOGUE13_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE12_L09         0000433E 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004340 - 00004341 (0x2 bytes), align: 1
  Segment part 5.             Intra module refs:   ?PROLOGUE12_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE11_L09         00004340        _GenldLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   __call_ctors (?cppinit)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004342 - 00004343 (0x2 bytes), align: 1
  Segment part 6.             Intra module refs:   ?PROLOGUE11_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE10_L09         00004342        __taabi_assert (?xassert)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004344 - 00004345 (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   ?PROLOGUE10_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE9_L09          00004344 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004346 - 00004347 (0x2 bytes), align: 1
  Segment part 8.             Intra module refs:   ?PROLOGUE9_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE8_L09          00004346        CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   div (?div)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004348 - 00004349 (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   ?PROLOGUE8_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE7_L09          00004348        Adc::SetFrequency(unsigned char) (adc)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000434A - 0000434B (0x2 bytes), align: 1
  Segment part 10.            Intra module refs:   ?PROLOGUE7_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE6_L09          0000434A        BCComponentManager::Init() (BCComponentManager)
                                                   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char) (BCComponentManager)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   TimerManager::AddEvent(ITimerEvent *) (TimerManager)
                                                   _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *] (TimerManager)
                                                   _PutcharsLarge (?xprintflarge)
                                                   _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short] (TimerManager)
                                                   _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   allocator<unsigned short>::deallocate(unsigned short *, unsigned int) (TimerManager)
                                                   pad (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000434C - 0000434D (0x2 bytes), align: 1
  Segment part 11.            Intra module refs:   ?PROLOGUE6_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE5_L09          0000434C        Clcd::Write(unsigned char, char *) (clcd)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   SystemManager::Run(unsigned char) (System_Manager)
                                                   mylcdAdaptor::SetClcd(Clcd *, unsigned char) (Term_Project_s)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000434E - 0000434F (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   ?PROLOGUE5_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE4_L09          0000434E        Adc::Adc(IAdcPort *) (adc)
                                                   Adc::Addevent(AdcEvent *) (adc)
                                                   Adc::evTick() (adc)
                                                   Adc::~Adc() (adc)
                                                   Avr_adc::~Avr_adc() (avr_adc)
                                                   Avr_pwm::Avr_pwm(unsigned char) (avr_pwm)
                                                   Avr_pwm::SetDuty(unsigned short) (avr_pwm)
                                                   Avr_pwm::SetPreScaler(unsigned char) (avr_pwm)
                                                   Avr_pwm::~Avr_pwm() (avr_pwm)
                                                   Avr_timer0::~Avr_timer0() (MC_E02SMB_v1_3DriverFactory)
                                                   Avr_uart0::~Avr_uart0() (MC_E02SMB_v1_3DriverFactory)
                                                   BCComponentManager::CreateAdc() (BCComponentManager)
                                                   BCComponentManager::CreateDIn() (BCComponentManager)
                                                   BCComponentManager::CreatePwm() (BCComponentManager)
                                                   BCComponentMod::~BCComponentMod() (BCComponentManager)
                                                   CalClkFuncGen::Init() (CalClkFuncGen)
                                                   CalClkFuncGen::SetPwm(IPwmOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::Switch() (CalClkFuncGen)
                                                   CalClkFuncGen::tm500ms() (CalClkFuncGen)
                                                   ClcdAdaptor::~ClcdAdaptor() (MC_E02SMB_v1_3DriverFactory)
                                                   DIn::SetEvent(DInEvent &) (dio)
                                                   DIn::SetTimerInterval(unsigned char) (dio)
                                                   DIn::evTimerExpir() (dio)
                                                   DInTimerAdaptor::~DInTimerAdaptor() (BCComponentManager)
                                                   DOut::Flip(unsigned char) (dio)
                                                   DOut::Set(unsigned char) (dio)
                                                   DigialIn::~DigialIn() (MC_E02SMB_v1_3DriverFactory)
                                                   E02SMBLed::SetPort(unsigned char) (dio_adaptor)
                                                   E02SMBLed::~E02SMBLed() (MC_E02SMB_v1_3DriverFactory)
                                                   ISerialPort::SendrxBuff(unsigned char) (avr_uart)
                                                   ISerialPort::SendtxBuff(unsigned char &) (avr_uart)
                                                   ISerialPort::SetSerialIO(SerialIO &) (serialIO)
                                                   ITimerEvent::SetIntervalms(unsigned short) (adc)
                                                   Led::evTimerExpir() (led)
                                                   Led::~Led() (MC_E02SMB_v1_3DriverFactory)
                                                   Pwm::Pwm(IPwmPort *) (pwm)
                                                   Pwm::Run() (pwm)
                                                   RingBuffer::PushBack(unsigned char) (ringbuffer)
                                                   SerialIO::PopRxBuff(unsigned char &) (serialIO)
                                                   SerialIO::PopTxBuff(unsigned char &) (serialIO)
                                                   SerialIO::PushBackRxBuff(unsigned char) (serialIO)
                                                   SerialIO::PushBackTxBuff(unsigned char) (serialIO)
                                                   SerialIO::SerialIO(ISerialPort &) (serialIO)
                                                   SerialIO::SetEvent(SerialEvent &) (serialIO)
                                                   SerialIO::Write(unsigned char) (serialIO)
                                                   SerialIO::~SerialIO() (BCComponentManager)
                                                   SystemManager::InitModule() (System_Manager)
                                                   Term_Project_s::~Term_Project_s() (Term_Project_s)
                                                   TimerManager::TimerManager(ITimer *) (TimerManager)
                                                   TimerManager::evTick() (TimerManager)
                                                   TimerManager::~TimerManager() (TimerManager)
                                                   TimerWithLedAdapter::TimerWithLedAdapter(Led *) (BCComponentManager)
                                                   TimerWithLedAdapter::~TimerWithLedAdapter() (BCComponentManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll() (TimerManager)
                                                   _Vector_value<allocator<void>>::_Bcapacity() const (TimerManager)
                                                   _Vector_value<allocator<void>>::_Bsize() const (TimerManager)
                                                   __iar_Dunscale (?xprintflarge)
                                                   allocator<unsigned short>::allocate(unsigned int) (TimerManager)
                                                   avr_delay_ms(unsigned int) (avr_common)
                                                   malloc (?xxmemxmalloc)
                                                   myAdcAdaptor::Converted(unsigned short) (Term_Project_s)
                                                   myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myAdcAdaptor::~myAdcAdaptor() (Term_Project_s)
                                                   myPwmAdaptor::SetDuty(unsigned short) (Term_Project_s)
                                                   myPwmAdaptor::SetPwm(Pwm *) (Term_Project_s)
                                                   myPwmAdaptor::~myPwmAdaptor() (Term_Project_s)
                                                   mySWEvent::Changed(enum DInEvent::EDGE) (Term_Project_s)
                                                   mySWEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySWEvent::~mySWEvent() (Term_Project_s)
                                                   mySerialEvent::Receive(unsigned char) (Term_Project_s)
                                                   mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySerialEvent::~mySerialEvent() (Term_Project_s)
                                                   mySerialOutAdaptor::SetSerial(SerialIO *) (Term_Project_s)
                                                   mySerialOutAdaptor::Write(char *) (Term_Project_s)
                                                   mySerialOutAdaptor::~mySerialOutAdaptor() (Term_Project_s)
                                                   myTimer1s::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myTimer1s::~myTimer1s() (Term_Project_s)
                                                   myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myTimer500ms::~myTimer500ms() (Term_Project_s)
                                                   mylcdAdaptor::Write(char *) (Term_Project_s)
                                                   mylcdAdaptor::~mylcdAdaptor() (Term_Project_s)
                                                   sprintf (?sprintf)
                                                   vector<ITimerEvent *>::operator[](unsigned int) (TimerManager)
                                                   void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back(_Ty1 const &)[with _Ty1=ITimerEvent *] (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004350 - 00004351 (0x2 bytes), align: 1
  Segment part 13.            Intra module refs:   ?PROLOGUE4_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE3_L09          00004350        ClcdAdaptor::SetData(unsigned char) (clcd_adaptor)
                                                   ClcdAdaptor::SetInstruction(unsigned char) (clcd_adaptor)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004352 - 00004353 (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   ?PROLOGUE3_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE2_L09          00004352 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004354 - 00004355 (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   ?PROLOGUE2_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE1_L09          00004354 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004356 - 00004357 (0x2 bytes), align: 1
  Segment part 16.            Intra module refs:   ?PROLOGUE1_L09

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?EPILOGUE_B_L09

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004358 - 00004359 (0x2 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B16_L09       00004358        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   Segment part 43 (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000435A - 0000435B (0x2 bytes), align: 1
  Segment part 1.             Intra module refs:   ?EPILOGUE_B16_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B15_L09       0000435A 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000435C - 0000435D (0x2 bytes), align: 1
  Segment part 2.             Intra module refs:   ?EPILOGUE_B15_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B14_L09       0000435C 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000435E - 0000435F (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?EPILOGUE_B14_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B13_L09       0000435E 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004360 - 00004361 (0x2 bytes), align: 1
  Segment part 4.             Intra module refs:   ?EPILOGUE_B13_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B12_L09       00004360 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004362 - 00004363 (0x2 bytes), align: 1
  Segment part 5.             Intra module refs:   ?EPILOGUE_B12_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B11_L09       00004362        Segment part 68 (?xprintflarge)
                                                   __call_ctors (?cppinit)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004364 - 00004365 (0x2 bytes), align: 1
  Segment part 6.             Intra module refs:   ?EPILOGUE_B11_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B10_L09       00004364        __taabi_assert (?xassert)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004366 - 00004367 (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   ?EPILOGUE_B10_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B9_L09        00004366 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004368 - 00004369 (0x2 bytes), align: 1
  Segment part 8.             Intra module refs:   ?EPILOGUE_B9_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B8_L09        00004368        CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   div (?div)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000436A - 0000436B (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   ?EPILOGUE_B8_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B7_L09        0000436A        Adc::SetFrequency(unsigned char) (adc)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000436C - 0000436D (0x2 bytes), align: 1
  Segment part 10.            Intra module refs:   ?EPILOGUE_B7_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B6_L09        0000436C        BCComponentManager::Init() (BCComponentManager)
                                                   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char) (BCComponentManager)
                                                   Segment part 41 (?xprintflarge)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   TimerManager::AddEvent(ITimerEvent *) (TimerManager)
                                                   _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *] (TimerManager)
                                                   _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short] (TimerManager)
                                                   _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   allocator<unsigned short>::deallocate(unsigned short *, unsigned int) (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000436E - 0000436F (0x2 bytes), align: 1
  Segment part 11.            Intra module refs:   ?EPILOGUE_B6_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B5_L09        0000436E        Clcd::Write(unsigned char, char *) (clcd)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   SystemManager::Run(unsigned char) (System_Manager)
                                                   mylcdAdaptor::SetClcd(Clcd *, unsigned char) (Term_Project_s)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004370 - 00004371 (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   ?EPILOGUE_B5_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B4_L09        00004370        Adc::Adc(IAdcPort *) (adc)
                                                   Adc::Addevent(AdcEvent *) (adc)
                                                   Adc::evTick() (adc)
                                                   Adc::~Adc() (adc)
                                                   Avr_adc::~Avr_adc() (avr_adc)
                                                   Avr_pwm::Avr_pwm(unsigned char) (avr_pwm)
                                                   Avr_pwm::SetDuty(unsigned short) (avr_pwm)
                                                   Avr_pwm::SetPreScaler(unsigned char) (avr_pwm)
                                                   Avr_pwm::~Avr_pwm() (avr_pwm)
                                                   Avr_timer0::~Avr_timer0() (MC_E02SMB_v1_3DriverFactory)
                                                   Avr_uart0::~Avr_uart0() (MC_E02SMB_v1_3DriverFactory)
                                                   BCComponentManager::CreateAdc() (BCComponentManager)
                                                   BCComponentManager::CreateDIn() (BCComponentManager)
                                                   BCComponentManager::CreatePwm() (BCComponentManager)
                                                   BCComponentMod::~BCComponentMod() (BCComponentManager)
                                                   CalClkFuncGen::Init() (CalClkFuncGen)
                                                   CalClkFuncGen::SetPwm(IPwmOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::Switch() (CalClkFuncGen)
                                                   CalClkFuncGen::tm500ms() (CalClkFuncGen)
                                                   ClcdAdaptor::~ClcdAdaptor() (MC_E02SMB_v1_3DriverFactory)
                                                   DIn::SetEvent(DInEvent &) (dio)
                                                   DIn::SetTimerInterval(unsigned char) (dio)
                                                   DIn::evTimerExpir() (dio)
                                                   DInTimerAdaptor::~DInTimerAdaptor() (BCComponentManager)
                                                   DOut::Flip(unsigned char) (dio)
                                                   DOut::Set(unsigned char) (dio)
                                                   DigialIn::~DigialIn() (MC_E02SMB_v1_3DriverFactory)
                                                   E02SMBLed::SetPort(unsigned char) (dio_adaptor)
                                                   E02SMBLed::~E02SMBLed() (MC_E02SMB_v1_3DriverFactory)
                                                   ISerialPort::SendrxBuff(unsigned char) (avr_uart)
                                                   ISerialPort::SendtxBuff(unsigned char &) (avr_uart)
                                                   ISerialPort::SetSerialIO(SerialIO &) (serialIO)
                                                   ITimerEvent::SetIntervalms(unsigned short) (adc)
                                                   Led::evTimerExpir() (led)
                                                   Led::~Led() (MC_E02SMB_v1_3DriverFactory)
                                                   Pwm::Pwm(IPwmPort *) (pwm)
                                                   Pwm::Run() (pwm)
                                                   RingBuffer::PushBack(unsigned char) (ringbuffer)
                                                   SerialIO::PopRxBuff(unsigned char &) (serialIO)
                                                   SerialIO::PopTxBuff(unsigned char &) (serialIO)
                                                   SerialIO::PushBackRxBuff(unsigned char) (serialIO)
                                                   SerialIO::PushBackTxBuff(unsigned char) (serialIO)
                                                   SerialIO::SerialIO(ISerialPort &) (serialIO)
                                                   SerialIO::SetEvent(SerialEvent &) (serialIO)
                                                   SerialIO::Write(unsigned char) (serialIO)
                                                   SerialIO::~SerialIO() (BCComponentManager)
                                                   SystemManager::InitModule() (System_Manager)
                                                   Term_Project_s::~Term_Project_s() (Term_Project_s)
                                                   TimerManager::TimerManager(ITimer *) (TimerManager)
                                                   TimerManager::evTick() (TimerManager)
                                                   TimerManager::~TimerManager() (TimerManager)
                                                   TimerWithLedAdapter::TimerWithLedAdapter(Led *) (BCComponentManager)
                                                   TimerWithLedAdapter::~TimerWithLedAdapter() (BCComponentManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll() (TimerManager)
                                                   _Vector_value<allocator<void>>::_Bcapacity() const (TimerManager)
                                                   _Vector_value<allocator<void>>::_Bsize() const (TimerManager)
                                                   __iar_Dunscale (?xprintflarge)
                                                   allocator<unsigned short>::allocate(unsigned int) (TimerManager)
                                                   avr_delay_ms(unsigned int) (avr_common)
                                                   malloc (?xxmemxmalloc)
                                                   myAdcAdaptor::Converted(unsigned short) (Term_Project_s)
                                                   myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myAdcAdaptor::~myAdcAdaptor() (Term_Project_s)
                                                   myPwmAdaptor::SetDuty(unsigned short) (Term_Project_s)
                                                   myPwmAdaptor::SetPwm(Pwm *) (Term_Project_s)
                                                   myPwmAdaptor::~myPwmAdaptor() (Term_Project_s)
                                                   mySWEvent::Changed(enum DInEvent::EDGE) (Term_Project_s)
                                                   mySWEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySWEvent::~mySWEvent() (Term_Project_s)
                                                   mySerialEvent::Receive(unsigned char) (Term_Project_s)
                                                   mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySerialEvent::~mySerialEvent() (Term_Project_s)
                                                   mySerialOutAdaptor::SetSerial(SerialIO *) (Term_Project_s)
                                                   mySerialOutAdaptor::Write(char *) (Term_Project_s)
                                                   mySerialOutAdaptor::~mySerialOutAdaptor() (Term_Project_s)
                                                   myTimer1s::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myTimer1s::~myTimer1s() (Term_Project_s)
                                                   myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myTimer500ms::~myTimer500ms() (Term_Project_s)
                                                   mylcdAdaptor::Write(char *) (Term_Project_s)
                                                   mylcdAdaptor::~mylcdAdaptor() (Term_Project_s)
                                                   sprintf (?sprintf)
                                                   vector<ITimerEvent *>::operator[](unsigned int) (TimerManager)
                                                   void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back(_Ty1 const &)[with _Ty1=ITimerEvent *] (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004372 - 00004373 (0x2 bytes), align: 1
  Segment part 13.            Intra module refs:   ?EPILOGUE_B4_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B3_L09        00004372        ClcdAdaptor::SetData(unsigned char) (clcd_adaptor)
                                                   ClcdAdaptor::SetInstruction(unsigned char) (clcd_adaptor)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004374 - 00004375 (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   ?EPILOGUE_B3_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B2_L09        00004374 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004376 - 00004377 (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   ?EPILOGUE_B2_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B1_L09        00004376 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004378 - 00004381 (0xa bytes), align: 1
  Segment part 16.            Intra module refs:   ?EPILOGUE_B1_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B0_L09        00004378 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR4_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R4_is_cg_reg
                                   00004382        ?ULL_DIV_L12 (?LL_DIV_L12)
                                                   ?ULL_MOD_L12 (?LL_DIV_L12)
                                                   Adc::SetFrequency(unsigned char) (adc)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   Clcd::Write(unsigned char, char *) (clcd)
                                                   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char) (BCComponentManager)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   Segment part 1 (?LL_DIV_L12)
                                                   Segment part 2 (?LL_DIV_L12)
                                                   Segment part 3 (?LL_DIV_L12)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   SystemManager::Run(unsigned char) (System_Manager)
                                                   TimerManager::AddEvent(ITimerEvent *) (TimerManager)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *] (TimerManager)
                                                   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _PutcharsLarge (?xprintflarge)
                                                   _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short] (TimerManager)
                                                   _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
                                                   _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   __taabi_assert (?xassert)
                                                   allocator<unsigned short>::deallocate(unsigned short *, unsigned int) (TimerManager)
                                                   mylcdAdaptor::SetClcd(Clcd *, unsigned char) (Term_Project_s)
                                                   pad (?xprintflarge)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR5_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R5_is_cg_reg
                                   00004382        Adc::SetFrequency(unsigned char) (adc)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char) (BCComponentManager)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   TimerManager::AddEvent(ITimerEvent *) (TimerManager)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *] (TimerManager)
                                                   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _PutcharsLarge (?xprintflarge)
                                                   _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short] (TimerManager)
                                                   _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short] (TimerManager)
                                                   _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
                                                   _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   __taabi_assert (?xassert)
                                                   allocator<unsigned short>::deallocate(unsigned short *, unsigned int) (TimerManager)
                                                   pad (?xprintflarge)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR6_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R6_is_cg_reg
                                   00004382        Adc::SetFrequency(unsigned char) (adc)
                                                   CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   __taabi_assert (?xassert)
                                                   div (?div)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR7_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R7_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>] (TimerManager)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   __taabi_assert (?xassert)
                                                   div (?div)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR8_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R8_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   __taabi_assert (?xassert)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR9_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R9_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   __taabi_assert (?xassert)
                                                   scale (?xprintflarge)
                                                   void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short] (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR10_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R10_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR11_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R11_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR12_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R12_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR13_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R13_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR14_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R14_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR15_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R15_is_cg_reg
                                   00004382        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?LL_MUL_L12

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_MUL_L12             

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?LL_DIV_L12

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004382 - 00004387 (0x6 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ULL_DIV_L12            00004382        _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004388 - 000043A3 (0x1c bytes), align: 1
  Segment part 1.             Intra module refs:   ?ULL_DIV_L12
                                                   ?ULL_MOD_L12
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000043A4 - 000043D3 (0x30 bytes), align: 1
  Segment part 2.             Intra module refs:   ?ULL_DIV_L12
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000043D4 - 000043DF (0xc bytes), align: 1
  Segment part 3.             Intra module refs:   ?ULL_MOD_L12
                                                   Segment part 2
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000043E0 - 00004443 (0x64 bytes), align: 1
  Segment part 4.             Intra module refs:   ?ULL_DIV_L12
                                                   ?ULL_MOD_L12
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004444 - 0000444B (0x8 bytes), align: 1
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ULL_MOD_L12            00004444        _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SLL_DIV_L12            
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SLL_MOD_L12            

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?LONGLONG

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_SHL_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 1. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ULL_SHR_L12            
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SLL_SHR_L12            
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_ADD_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_AND_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_IOR_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_XOR_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_SUB_L12             
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000444C - 0000446B (0x20 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_NEG_L12             0000444C        _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000446C - 0000448D (0x22 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_CMP_L12             0000446C        Segment part 15 (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?low_level_init

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000448E - 00004491 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __low_level_init        0000448E        ?call_low_level_init (?C_STARTUP)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memchr

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memchr                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004492 - 000044B1 (0x20 bytes), align: 1
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Memchr            00004492        _PrintfLarge (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memcmp

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memcmp                  
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memcpy

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000044B2 - 000044CB (0x1a bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memcpy                  000044B2        Segment part 69 (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memmove

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000044CC - 0000450B (0x40 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memmove                 000044CC        _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memset

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memset                  
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?new

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00000EC8 - 00000EC9 (0x2 bytes), align: 0
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_New_hand          00000EC8        operator new(size_t) (?newop_0)
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           set_new_handler(new_handler)
                                   
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?newop_0

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000450C - 00004545 (0x3a bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new(size_t)    0000450C        _Allocator<void>::allocate(unsigned int) (TimerManager)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?nomemory

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004546 - 00004549 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Nomemory()             00004546        operator new(size_t) (?newop_0)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?ostream

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 12. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
    -------------------------------------------------------------------------
CODE
  Segment part 13. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::snextc()     
    -------------------------------------------------------------------------
CODE
  Segment part 15. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, unsigned long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, long long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, unsigned long long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, void const *) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios::clear(int, bool)   
    -------------------------------------------------------------------------
CODE
  Segment part 21. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::_Sentry_base(ostream &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::~_Sentry_base()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 24. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::sentry(ostream &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::~sentry()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(_Bool)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(short)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned short)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(long long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned long long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(float)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(double)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(long double)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(void const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(_Mysb *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::put(char)      
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::write(char const *, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::flush()        
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::seekp(streampos)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::seekp(long, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator<<(ostream &, char const *)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator<<(ostream &, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 10. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?segment_init

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000454A - 00004551 (0x8 bytes), align: 1
  Segment part 3.             Intra module refs:   __segment_init
           LOCAL                   ADDRESS         
           =====                   =======         
           __memclr                0000454A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004552 - 0000455D (0xc bytes), align: 1
  Segment part 4.             Intra module refs:   __segment_init
           LOCAL                   ADDRESS         
           =====                   =======         
           __flashcpy              00004552 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000455E - 00004569 (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   __flashcpy
                                                   __memclr
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000456A - 000045C9 (0x60 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __segment_init          0000456A        ?need_segment_init (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 7. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?sprintf

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000045CA - 00004613 (0x4a bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sprintf                 000045CA        CalClkFuncGen::InputAdc(unsigned short) (CalClkFuncGen)
                                                   CalClkFuncGen::tm1s() (CalClkFuncGen)
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strchr

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strchr                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004614 - 00004627 (0x14 bytes), align: 1
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Strchr            00004614        _PrintfLarge (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strcspn

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strcspn                 
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?string

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Eos(size_t)    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Inside(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. TENTATIVE. Used definition from terminal_service
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr()        
    -------------------------------------------------------------------------
CODE
  Segment part 9. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr() const
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::snextc()     
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios::clear(int, bool)   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::_Sentry_base(ostream &)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::~_Sentry_base()
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::sentry(ostream &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::~sentry()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::_Sentry_base(istream &)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::~_Sentry_base()
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::sentry::sentry(istream &, bool)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _String_base::_Xlen() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _String_base::_Xran() const
                                   
               not allocated function
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::npos            
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(_Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(_Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(size_t, _Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(size_t, char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(size_t, size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::erase(size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::replace(size_t, size_t, _Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::replace(size_t, size_t, char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::replace(size_t, size_t, size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::copy(char *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::swap(string &)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::rfind(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_first_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_last_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 120. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 122. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_first_not_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 124. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 126. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 129. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 130. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 131. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_last_not_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 132. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 133. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 134. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 136. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::compare(size_t, size_t, _Myt const &, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 137. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 138. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::compare(size_t, size_t, char const *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 139. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 140. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Copy(size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 141. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 142. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 143. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 144. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 145. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Grow(size_t, bool)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 146. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Tidy(bool, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 147. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 148. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 149. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator>>(istream &, string &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 150. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 151. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 152. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 153. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 154. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           getline(istream &, string &, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 155. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 156. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 157. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 158. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 159. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 160. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator<<(ostream &, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 161. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 162. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 163. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 164. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strlen

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004628 - 0000463B (0x14 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strlen                  00004628        CalClkFuncGen::StrShift(char *) (CalClkFuncGen)
                                                   _PrintfLarge (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strtol

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strtol                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xassert

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000463C - 0000463D (0x2 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_EmptyStepPoint    0000463C        Adc::Adc(IAdcPort *) (adc)
                                                   Adc::Addevent(AdcEvent *) (adc)
                                                   Avr_pwm::SetPreScaler(unsigned char) (avr_pwm)
                                                   BCComponentManager::BCComponentManager() (BCComponentManager)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   BCComponentMod::Execute() (BCComponentManager)
                                                   BCComponentMod::Init() (BCComponentManager)
                                                   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::SetPwm(IPwmOut *) (CalClkFuncGen)
                                                   Clcd::Write(unsigned char, char *) (clcd)
                                                   DIn::SetEvent(DInEvent &) (dio)
                                                   DIn::SetTimerInterval(unsigned char) (dio)
                                                   DigialIn::GetPort() (dio_adaptor)
                                                   DriverFactory::DriverFactory() (MC_E02SMB_v1_3DriverFactory)
                                                   E02SMBLed::GetPort() (dio_adaptor)
                                                   E02SMBLed::SetPort(unsigned char) (dio_adaptor)
                                                   ISerialPort::SendrxBuff(unsigned char) (avr_uart)
                                                   ISerialPort::SendtxBuff(unsigned char &) (avr_uart)
                                                   ISerialPort::SetSerialIO(SerialIO &) (serialIO)
                                                   ITimerEvent::SetIntervalms(unsigned short) (adc)
                                                   Pwm::Pwm(IPwmPort *) (pwm)
                                                   Pwm::Run() (pwm)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   SerialIO::SetEvent(SerialEvent &) (serialIO)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   SerialIO::Write(unsigned char) (serialIO)
                                                   SystemManager::SystemManager() (System_Manager)
                                                   TimerManager::AddEvent(ITimerEvent *) (TimerManager)
                                                   TimerManager::GetInstance(ITimer *) (TimerManager)
                                                   TimerManager::TimerManager(ITimer *) (TimerManager)
                                                   TimerManager::evTick() (TimerManager)
                                                   main (System_main)
                                                   myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myPwmAdaptor::SetPwm(Pwm *) (Term_Project_s)
                                                   mySWEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySerialOutAdaptor::SetSerial(SerialIO *) (Term_Project_s)
                                                   mySerialOutAdaptor::Write(char *) (Term_Project_s)
                                                   myTimer1s::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mylcdAdaptor::SetClcd(Clcd *, unsigned char) (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000463E - 0000468D (0x50 bytes), align: 1
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __taabi_assert          0000463E        Adc::Adc(IAdcPort *) (adc)
                                                   Adc::Addevent(AdcEvent *) (adc)
                                                   Avr_pwm::SetPreScaler(unsigned char) (avr_pwm)
                                                   BCComponentManager::BCComponentManager() (BCComponentManager)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   BCComponentMod::Execute() (BCComponentManager)
                                                   BCComponentMod::Init() (BCComponentManager)
                                                   CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *) (CalClkFuncGen)
                                                   CalClkFuncGen::SetPwm(IPwmOut *) (CalClkFuncGen)
                                                   Clcd::Write(unsigned char, char *) (clcd)
                                                   DIn::SetEvent(DInEvent &) (dio)
                                                   DIn::SetTimerInterval(unsigned char) (dio)
                                                   DigialIn::GetPort() (dio_adaptor)
                                                   DriverFactory::DriverFactory() (MC_E02SMB_v1_3DriverFactory)
                                                   E02SMBLed::GetPort() (dio_adaptor)
                                                   E02SMBLed::SetPort(unsigned char) (dio_adaptor)
                                                   ISerialPort::SendrxBuff(unsigned char) (avr_uart)
                                                   ISerialPort::SendtxBuff(unsigned char &) (avr_uart)
                                                   ISerialPort::SetSerialIO(SerialIO &) (serialIO)
                                                   ITimerEvent::SetIntervalms(unsigned short) (adc)
                                                   Pwm::Pwm(IPwmPort *) (pwm)
                                                   Pwm::Run() (pwm)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   SerialIO::SetEvent(SerialEvent &) (serialIO)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   SerialIO::Write(unsigned char) (serialIO)
                                                   SystemManager::SystemManager() (System_Manager)
                                                   TimerManager::AddEvent(ITimerEvent *) (TimerManager)
                                                   TimerManager::GetInstance(ITimer *) (TimerManager)
                                                   TimerManager::TimerManager(ITimer *) (TimerManager)
                                                   TimerManager::evTick() (TimerManager)
                                                   main (System_main)
                                                   myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myPwmAdaptor::SetPwm(Pwm *) (Term_Project_s)
                                                   mySWEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mySerialOutAdaptor::SetSerial(SerialIO *) (Term_Project_s)
                                                   mySerialOutAdaptor::Write(char *) (Term_Project_s)
                                                   myTimer1s::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *) (Term_Project_s)
                                                   mylcdAdaptor::SetClcd(Clcd *, unsigned char) (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000015 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000468E - 00004697 (0xa bytes), align: 1
  Segment part 5.             Intra module refs:   __taabi_assert
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xcloseall

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Close_all              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xdnorm

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004698 - 00004733 (0x9c bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dnorm             00004698        __iar_Dunscale (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xdscale

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dscale            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xdtento

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. TENTATIVE. Used definition from ?xprintflarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dunscale          
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           dmul                    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           ddiv                    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dtento            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xgetmemchunk

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00004734 - 00004759 (0x26 bytes), align: 1
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_GetMemChunk      00004734        __near_findmem (?xxmemxmalloc)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000ECA - 00000ECB (0x2 bytes), align: 0
  Segment part 3.             Intra module refs:   __near_GetMemChunk
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_HEAP
  Segment part 6. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xlocnum

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 10. TENTATIVE. Used definition from terminal_service
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(char const *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator[](size_t)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::c_str() const   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
    -------------------------------------------------------------------------
CODE
  Segment part 15. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
    -------------------------------------------------------------------------
CODE
  Segment part 16. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::operator*() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::equal(_Myt const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::_Inc()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::_Peek()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ostrit::operator=(char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Getloctxt(_Istrit &, _Istrit &, size_t, char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, _Bool &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned short &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned int &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, long long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned long long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, float &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, double &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, long double &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, void * &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::_Getifld(char *, _InIt &, _InIt &, int, locale const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::_Getffld(char *, _InIt &, _InIt &, locale const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 120. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 122. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 124. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 126. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 129. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 130. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 131. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 132. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 133. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 134. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 136. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 137. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 138. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 139. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, _Bool) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 140. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 141. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 142. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 143. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 144. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 145. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 146. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 147. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 148. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 149. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, double) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 150. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 151. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 152. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 153. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, long double) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 154. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 155. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 156. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 157. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 158. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 159. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 160. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 161. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 162. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 163. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 164. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 165. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 166. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 167. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 168. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 169. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 170. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Ffmt(char *, char, int) const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 171. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Fput(_OutIt, ios_base &, char, char const *, size_t, size_t, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 172. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 173. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 174. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 175. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 176. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 177. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 178. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 179. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 180. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 181. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 182. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 183. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 184. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 185. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 186. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 187. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 188. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 189. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 190. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 191. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 192. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 193. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 194. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 195. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 196. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 197. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Ifmt(char *, char const *, int) const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 198. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Iput(_OutIt, ios_base &, char, char *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 199. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 200. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 201. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 202. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 203. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 204. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 205. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 206. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 207. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 208. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 209. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 210. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 211. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 212. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 213. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 214. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 215. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 216. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 217. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 218. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 219. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Put(_OutIt, char const *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 220. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 221. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 222. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 223. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 224. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Putc(_OutIt, char const *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 225. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 226. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 227. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 228. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 229. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Putgrouped(_OutIt, char const *, size_t, char) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 230. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 231. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 232. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 233. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 234. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 235. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 236. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Rep(_OutIt, char, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 237. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 8. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xprintflarge

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000475A - 00004B93 (0x43a bytes), align: 1
  Segment part 12.            Intra module refs:   Segment part 90
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _PrintfLarge            0000475A        sprintf (?sprintf)
               calls direct
               CSTACK = 00000000 ( 00000071 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004B94 - 00004B9D (0xa bytes), align: 1
  Segment part 13.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004B9E - 00004BA1 (0x4 bytes), align: 1
  Segment part 14.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BA2 - 00004BA5 (0x4 bytes), align: 1
  Segment part 15.            Intra module refs:   Segment part 14
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BA6 - 00004BC1 (0x1c bytes), align: 1
  Segment part 16.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BC2 - 00004BCD (0xc bytes), align: 1
  Segment part 17.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BCE - 00004BD9 (0xc bytes), align: 1
  Segment part 18.            Intra module refs:   Segment part 17
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BDA - 00004BED (0x14 bytes), align: 1
  Segment part 19.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BEE - 00004BF3 (0x6 bytes), align: 1
  Segment part 20.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004BF4 - 00004C03 (0x10 bytes), align: 1
  Segment part 21.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C04 - 00004C09 (0x6 bytes), align: 1
  Segment part 22.            Intra module refs:   Segment part 23
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C0A - 00004C0B (0x2 bytes), align: 1
  Segment part 23.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C0C - 00004C11 (0x6 bytes), align: 1
  Segment part 24.            Intra module refs:   Segment part 23
                                                   Segment part 70
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C12 - 00004C19 (0x8 bytes), align: 1
  Segment part 25.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C1A - 00004C1F (0x6 bytes), align: 1
  Segment part 26.            Intra module refs:   Segment part 22
                                                   Segment part 25
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C20 - 00004C29 (0xa bytes), align: 1
  Segment part 27.            Intra module refs:   Segment part 22
                                                   Segment part 25
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C2A - 00004C2F (0x6 bytes), align: 1
  Segment part 28.            Intra module refs:   Segment part 36
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C30 - 00004C39 (0xa bytes), align: 1
  Segment part 29.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C3A - 00004C3D (0x4 bytes), align: 1
  Segment part 30.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C3E - 00004C41 (0x4 bytes), align: 1
  Segment part 31.            Intra module refs:   Segment part 30
                                                   Segment part 33
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C42 - 00004C45 (0x4 bytes), align: 1
  Segment part 32.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C46 - 00004C4B (0x6 bytes), align: 1
  Segment part 33.            Intra module refs:   Segment part 32
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C4C - 00004C55 (0xa bytes), align: 1
  Segment part 34.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C56 - 00004C5D (0x8 bytes), align: 1
  Segment part 35.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C5E - 00004C65 (0x8 bytes), align: 1
  Segment part 36.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C66 - 00004C71 (0xc bytes), align: 1
  Segment part 37.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C72 - 00004C7D (0xc bytes), align: 1
  Segment part 38.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C7E - 00004C83 (0x6 bytes), align: 1
  Segment part 39.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004C84 - 00004CB3 (0x30 bytes), align: 1
  Segment part 40.            Intra module refs:   Segment part 33
           LOCAL                   ADDRESS         
           =====                   =======         
           pad                     00004C84 
               calls direct
               CSTACK = 00000000 ( 00000007 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004CB4 - 00004CB9 (0x6 bytes), align: 1
  Segment part 41.            Intra module refs:   _PutcharsLarge
                                                   pad
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004CBA - 00004E3F (0x186 bytes), align: 1
  Segment part 42.            Intra module refs:   _PrintfLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _LitobLarge             00004CBA 
               CSTACK = 00000000 ( 00000030 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E40 - 00004E45 (0x6 bytes), align: 1
  Segment part 43.            Intra module refs:   _LdtobLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E46 - 00004E4D (0x8 bytes), align: 1
  Segment part 44.            Intra module refs:   Segment part 63
                                                   _LitobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E4E - 00004E57 (0xa bytes), align: 1
  Segment part 45.            Intra module refs:   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E58 - 00004E61 (0xa bytes), align: 1
  Segment part 46.            Intra module refs:   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E62 - 00004E67 (0x6 bytes), align: 1
  Segment part 47.            Intra module refs:   _LdtobLarge
                                                   _LitobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E68 - 00004E7F (0x18 bytes), align: 1
  Segment part 48.            Intra module refs:   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E80 - 00004E81 (0x2 bytes), align: 1
  Segment part 49.            Intra module refs:   Segment part 48
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E82 - 00004E89 (0x8 bytes), align: 1
  Segment part 50.            Intra module refs:   Segment part 49
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E8A - 00004E91 (0x8 bytes), align: 1
  Segment part 51.            Intra module refs:   Segment part 48
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004E92 - 00004ED9 (0x48 bytes), align: 1
  Segment part 52.            Intra module refs:   _LdtobLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           scale                   00004E92 
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00004EDA - 0000511F (0x246 bytes), align: 1
  Segment part 53.            Intra module refs:   _PrintfLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _LdtobLarge             00004EDA 
               calls direct
               CSTACK = 00000000 ( 00000041 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005120 - 0000512B (0xc bytes), align: 1
  Segment part 54.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000512C - 00005135 (0xa bytes), align: 1
  Segment part 55.            Intra module refs:   _LdtobLarge
                                                   scale
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005136 - 00005139 (0x4 bytes), align: 1
  Segment part 56.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000513A - 0000513F (0x6 bytes), align: 1
  Segment part 57.            Intra module refs:   Segment part 56
                                                   _LdtobLarge
                                                   scale
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005140 - 00005141 (0x2 bytes), align: 1
  Segment part 58.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005142 - 00005147 (0x6 bytes), align: 1
  Segment part 59.            Intra module refs:   Segment part 58
                                                   _GenldLarge
                                                   _LdtobLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005148 - 0000514D (0x6 bytes), align: 1
  Segment part 60.            Intra module refs:   _LdtobLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000514E - 00005157 (0xa bytes), align: 1
  Segment part 61.            Intra module refs:   _LdtobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005158 - 00005167 (0x10 bytes), align: 1
  Segment part 62.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005168 - 0000516D (0x6 bytes), align: 1
  Segment part 63.            Intra module refs:   _LdtobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000516E - 00005177 (0xa bytes), align: 1
  Segment part 64.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005178 - 00005179 (0x2 bytes), align: 1
  Segment part 65.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000517A - 00005181 (0x8 bytes), align: 1
  Segment part 66.            Intra module refs:   Segment part 65
                                                   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005182 - 0000540F (0x28e bytes), align: 1
  Segment part 67.            Intra module refs:   _LdtobLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _GenldLarge             00005182 
               calls direct
               CSTACK = 00000000 ( 00000017 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005410 - 00005413 (0x4 bytes), align: 1
  Segment part 68.            Intra module refs:   _GenldLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005414 - 00005417 (0x4 bytes), align: 1
  Segment part 69.            Intra module refs:   Segment part 80
                                                   _GenldLarge
                                                   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005418 - 0000541D (0x6 bytes), align: 1
  Segment part 70.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000541E - 00005427 (0xa bytes), align: 1
  Segment part 71.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005428 - 0000542D (0x6 bytes), align: 1
  Segment part 72.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000542E - 00005437 (0xa bytes), align: 1
  Segment part 73.            Intra module refs:   Segment part 72
                                                   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005438 - 0000543F (0x8 bytes), align: 1
  Segment part 74.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005440 - 0000544B (0xc bytes), align: 1
  Segment part 75.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000544C - 00005455 (0xa bytes), align: 1
  Segment part 76.            Intra module refs:   _GenldLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005456 - 0000545B (0x6 bytes), align: 1
  Segment part 77.            Intra module refs:   _GenldLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000545C - 00005473 (0x18 bytes), align: 1
  Segment part 78.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005474 - 00005477 (0x4 bytes), align: 1
  Segment part 79.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005478 - 00005481 (0xa bytes), align: 1
  Segment part 80.            Intra module refs:   Segment part 78
                                                   Segment part 79
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005482 - 0000548B (0xa bytes), align: 1
  Segment part 81.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000548C - 00005491 (0x6 bytes), align: 1
  Segment part 82.            Intra module refs:   _GenldLarge
                                                   pad
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005492 - 00005495 (0x4 bytes), align: 1
  Segment part 83.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005496 - 0000549B (0x6 bytes), align: 1
  Segment part 84.            Intra module refs:   Segment part 83
                                                   _GenldLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000549C - 000054A1 (0x6 bytes), align: 1
  Segment part 85.            Intra module refs:   _GenldLarge
                                                   _LdtobLarge
                                                   _PutcharLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000054A2 - 000054A3 (0x2 bytes), align: 1
  Segment part 86.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000054A4 - 000054AB (0x8 bytes), align: 1
  Segment part 87.            Intra module refs:   Segment part 86
                                                   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000054AC - 000054E5 (0x3a bytes), align: 1
  Segment part 88.            Intra module refs:   _PrintfLarge
                                                   _PutcharsLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _PutcharLarge           000054AC 
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000054E6 - 0000550D (0x28 bytes), align: 1
  Segment part 89.            Intra module refs:   Segment part 30
                                                   pad
           LOCAL                   ADDRESS         
           =====                   =======         
           _PutcharsLarge          000054E6 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000550E - 0000558D (0x80 bytes), align: 1
  Segment part 91.            Intra module refs:   _LdtobLarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dunscale          0000550E 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005ED5 - 00005EDB (0x7 bytes), align: 0
  Segment part 4.             Intra module refs:   Segment part 3
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005EDC - 00005EEB (0x10 bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005EEC - 00005EED (0x2 bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00005EEE - 00005EF5 (0x8 bytes), align: 0
  Segment part 10.            Intra module refs:   __Constant_0_0
    -------------------------------------------------------------------------
SWITCH
  Relative segment, address: CODE 00000292 - 000002C5 (0x34 bytes), align: 1
  Segment part 90.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D55 - 00000D5B (0x7 bytes), align: 0
  Segment part 3.             Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D5C - 00000D6B (0x10 bytes), align: 0
  Segment part 6.             Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D6C - 00000D6D (0x2 bytes), align: 0
  Segment part 8.             Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000D6E - 00000D75 (0x8 bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 14
                                                   _LitobLarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_0_0          00000D6E 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xpurevirtual

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000558E - 00005591 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __pure_virtual_called   0000558E        Led::__vtbl (led)
                                                   SystemManager::__vtbl (System_Manager)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xsprout

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00005592 - 000055AD (0x1c bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _SProut                 00005592        sprintf (?sprintf)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstod

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stod              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstof

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stof              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoflt

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Stoflt                 
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstold

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stold             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoll

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stoll             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 4. TENTATIVE. Used definition from ?xprintflarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_0_0          
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_0_80000000   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_1_80000000   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstopfx

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _LocaleC_isalpha        
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           isalnum                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Stopfx                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoul

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stoul             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoull

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stoull            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xxmemxfree

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000055AE - 00005665 (0xb8 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           free                    000055AE        __near_findmem (?xxmemxmalloc)
                                                   operator delete(void *) (?delop_0)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005666 - 00005673 (0xe bytes), align: 1
  Segment part 4.             Intra module refs:   free
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005674 - 0000567D (0xa bytes), align: 1
  Segment part 5.             Intra module refs:   free
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_free             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xxmemxmalloc

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00000ECC - 00000ECF (0x4 bytes), align: 0
  Segment part 3.             Intra module refs:   __near_findmem
                                                   malloc
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_Aldata           00000ECC        free (?xxmemxfree)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000567E - 000056F9 (0x7c bytes), align: 1
  Segment part 5.             Intra module refs:   malloc
           LOCAL                   ADDRESS         
           =====                   =======         
           __near_findmem          0000567E 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000056FA - 000056FF (0x6 bytes), align: 1
  Segment part 6.             Intra module refs:   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005700 - 00005701 (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   Segment part 6
                                                   malloc
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005702 - 00005707 (0x6 bytes), align: 1
  Segment part 8.             Intra module refs:   Segment part 7
                                                   Segment part 9
                                                   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005708 - 00005713 (0xc bytes), align: 1
  Segment part 9.             Intra module refs:   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005714 - 0000571F (0xc bytes), align: 1
  Segment part 10.            Intra module refs:   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00005720 - 000057C7 (0xa8 bytes), align: 1
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           malloc                  00005720        operator new(size_t) (?newop_0)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000057C8 - 000057D1 (0xa bytes), align: 1
  Segment part 12.            Intra module refs:   malloc
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_malloc           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  DEFINED ABSOLUTE ENTRIES
  PROGRAM MODULE, NAME : ?FILLER_BYTES

  SEGMENTS IN THE MODULE
  ======================
INTVEC
  Common segment, address: CODE 00000000 - 00000057 (0x58 bytes), align: 0
  Segment part 1.
    -------------------------------------------------------------------------
?FILL1
  Relative segment, address: CODE 00000058 - 0000008B (0x34 bytes), align: 0
  Segment part 0.




                ****************************************
                *                                      *
                *            MODULE SUMMARY            *
                *                                      *
                ****************************************

Module                         CODE      DATA
------                         ----      ----
                              (Rel)  (Rel)  (Abs)
?C_STARTUP                       52
?EPILOGUE_B_L09                  42
?FILLER_BYTES                    52
  + common                       88
?FLOATS_L04                   1 056
?LL_DIV_L12                     202
?LONGLONG                        66
?L_EC_MUL_L03                    64
?MOVE_LONG_L07                   22
?PROLOGUE_L09                    34
?RESET
  + common                        4
?SL_DIVMOD_L03                   68
?SS_DIVMOD_L02                   48
?S_EC_MUL_L02                    16
?UL_DIVMOD_L03                   70
?UL_SHR_L03                      16
?US_DIVMOD_L02                   40
?_ReportAssert                   40
?__dbg_break                      2
?__exit                          18
?_exit                           16
?abort                           18
?cppinit                        220      2
?delop_0                         12
?div                             36
?exit                             4
?low_level_init                   4
?memchr                          32
?memcpy                          26
?memmove                         64
?new                                     2
?newop_0                         58
?nomemory                         4
?segment_init                   128
?sprintf                         74
?strchr                          20
?strlen                          20
?xV_SWITCH_L06                  156
?xassert                         92
?xdnorm                         156
?xgetmemchunk                    38      2
?xprintflarge                 3 593     25
  + shared                      128      8
?xpurevirtual                     4
?xsprout                         28
?xxmemxfree                     208
?xxmemxmalloc                   340      4
BCComponentManager            1 767    283
  + shared                      160
CalClkFuncGen                 2 622    307
DriverFactory                            2
MC_E02SMB_v1_3DriverFactory     716    166
  + shared                      410
System_Manager                  315     65
  + shared                        2
System_main                     167     55
Term_Project_s                2 715    295
TimerManager                    990    141
  + shared                    1 660
adc                             577    143
avr_adc                         272      3      4
  + common                       88
avr_common                       60
avr_pwm                         321     61      2
  + shared                                      1
avr_spi                                         3
avr_timer                       132      1      4
  + common                       40
avr_uart                        636     62      6
  + shared                       80             1
  + common
clcd                            181     53
clcd_adaptor                    182             3
dio                             476     78
dio_adaptor                     437    175      3
led                             252
pwm                             398     86
ringbuffer                      166
serialIO                        875    141
type                            345
N/A (command line)                   1 376
N/A (alignment)
----------                   ------  -----     --
Total:                       24 221  3 536     27
  + common                       88


                ****************************************
                *                                      *
                *              CALL GRAPH              *
                *                                      *
                ****************************************

  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000000 00000000
  01  ADC_conv_done()
      | Stack used (prev) :  00000000 00000000
      | + function block  :  00000008 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  00000008 00000002


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000008 00000002
  01  timer_cmp()
      | Stack used (prev) :  00000008 00000002
      | + function block  :  00000003 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  0000000B 00000004


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  0000000B 00000004
  05          __DebugBreak
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000000 00000002
  04        __iar_ReportAssert
            | Stack used (prev) :  0000000B 00000006
            | + function block  :  0000000A 00000002
  06            __DebugBreak
                | Stack used (prev) :  0000000B 00000004
                | + function block  :  00000000 00000002
                |  Already listed
  05          __exit
              | Stack used (prev) :  0000000B 00000006
              | + function block  :  00000002 00000002
  05          __DebugBreak
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000000 00000002
              |  Already listed
  04        abort
            | Stack used (prev) :  0000000D 00000008
            | + function block  :  00000000 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
  04        RingBuffer::PushBack(unsigned char)
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000004 00000002
  03      SerialIO::PushBackRxBuff(unsigned char)
          | Stack used (prev) :  0000000F 00000006
          | + function block  :  00000004 00000002
  02    ISerialPort::SendrxBuff(unsigned char)
        | Stack used (prev) :  0000002A 0000000C
        | + function block  :  00000004 00000002
  01  usart0_rxc()
      | Stack used (prev) :  0000002E 0000000E
      | + function block  :  00000010 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  0000003E 00000010


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  0000003E 00000010
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  04        RingBuffer::Pop(unsigned char &)
            | Stack used (prev) :  0000003E 00000010
            | + function block  :  00000000 00000002
  03      SerialIO::PopTxBuff(unsigned char &)
          | Stack used (prev) :  0000003E 00000012
          | + function block  :  00000004 00000002
  02    ISerialPort::SendtxBuff(unsigned char &)
        | Stack used (prev) :  00000042 00000014
        | + function block  :  00000004 00000002
  01  usart0_txc()
      | Stack used (prev) :  00000046 00000016
      | + function block  :  00000011 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  00000057 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  04        free
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000000 00000002
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      RingBuffer::~RingBuffer()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  03      RingBuffer::~RingBuffer()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    SerialIO::~SerialIO()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 1>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      ITimerEvent::~ITimerEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    DInTimerAdaptor::~DInTimerAdaptor()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 2>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  03      ITimerEvent::~ITimerEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    TimerWithLedAdapter::~TimerWithLedAdapter()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 3>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  03      ITimerEvent::~ITimerEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    Adc::~Adc()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 4>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  02    Pwm::~Pwm()
        | Stack used (prev) :  00000057 0000001C
        | + function block  :  00000002 00000002
  01  <Unnamed 5>
      | Stack used (prev) :  00000059 0000001E
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005B 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      IModule::~IModule()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    BCComponentMod::~BCComponentMod()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 0>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    DIn::evTimerExpir()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000004 00000002
  01  DInTimerAdaptor::TimeOutEvent()
      | Stack used (prev) :  0000005B 0000001A
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005D 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      Led::Init()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  03      Led::Init()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
          |  Already listed
  04        DOut::Set(unsigned char)
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000004 00000002
  03      DOut::Flip(unsigned char)
          | Stack used (prev) :  0000005B 0000001A
          | + function block  :  00000004 00000002
  03      DOut::Set(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000004 00000002
          |  Already listed
  02    Led::evTimerExpir()
        | Stack used (prev) :  0000005F 0000001C
        | + function block  :  00000004 00000002
  01  TimerWithLedAdapter::TimeOutEvent()
      | Stack used (prev) :  00000063 0000001E
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000065 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  02    GetBCComponentManager()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
  02    GetBCComponentManager()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  02    BCComponentManager::CreateSerialIO(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
  02    BCComponentManager::CreateTimer()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
  01  BCComponentMod::Init()
      | Stack used (prev) :  00000057 0000001A
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000059 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  04        RingBuffer::Pop(unsigned char &)
            | Stack used (prev) :  0000003E 00000010
            | + function block  :  00000000 00000002
            |  Already listed
  03      SerialIO::PopRxBuff(unsigned char &)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000004 00000002
  02    SerialIO::evTick()
        | Stack used (prev) :  0000005B 0000001A
        | + function block  :  00000003 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  03      ITimerEvent::CalTime(unsigned short)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  03      ITimerEvent::GetState()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  04        vector<ITimerEvent *>::begin()
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000000 00000002
  03      vector<ITimerEvent *>::operator[](unsigned int)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000004 00000002
  03      vector<ITimerEvent *>::operator[](unsigned int)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000004 00000002
          |  Already listed
  03      vector<ITimerEvent *>::operator[](unsigned int)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000004 00000002
          |  Already listed
  06            _Vector_value<allocator<void>>::_Blast() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
  06            _Vector_value<allocator<void>>::_Bfirst() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
  05          _Vector_value<allocator<void>>::_Bsize() const
              | Stack used (prev) :  00000057 0000001A
              | + function block  :  00000004 00000002
  04        _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
            | Stack used (prev) :  0000005B 0000001C
            | + function block  :  00000002 00000002
  03      vector<ITimerEvent *>::size() const
          | Stack used (prev) :  0000005D 0000001E
          | + function block  :  00000002 00000002
  02    TimerManager::evTick()
        | Stack used (prev) :  0000005F 00000020
        | + function block  :  00000004 00000002
  01  BCComponentMod::Execute()
      | Stack used (prev) :  00000063 00000022
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000065 00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    operator delete(void *)
        | Stack used (prev) :  00000057 0000001A
        | + function block  :  00000000 00000002
        |  Already listed
  01  CalClkFuncGen::~CalClkFuncGen()
      | Stack used (prev) :  00000057 0000001C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000059 0000001E


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      IAdcPort::~IAdcPort()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    Avr_adc::~Avr_adc()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 6>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      ITimer::~ITimer()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    Avr_timer0::~Avr_timer0()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 0>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      ISerialPort::~ISerialPort()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    Avr_uart0::~Avr_uart0()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 1>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      IPwmPort::~IPwmPort()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    Avr_pwm::~Avr_pwm()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 2>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  05          operator delete(void *)
              | Stack used (prev) :  00000057 0000001A
              | + function block  :  00000000 00000002
              |  Already listed
  04        DOut::~DOut()
            | Stack used (prev) :  00000057 0000001C
            | + function block  :  00000002 00000002
  03      Led::~Led()
          | Stack used (prev) :  00000059 0000001E
          | + function block  :  00000004 00000002
  02    E02SMBLed::~E02SMBLed()
        | Stack used (prev) :  0000005D 00000020
        | + function block  :  00000004 00000002
  01  <Unnamed 3>
      | Stack used (prev) :  00000061 00000022
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000063 00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      DIn::~DIn()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    DigialIn::~DigialIn()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 4>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      Clcd::~Clcd()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    ClcdAdaptor::~ClcdAdaptor()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 5>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateTimer()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateUart()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateSPI()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateDIn()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateDOut(char *)
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateLed(unsigned char)
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateClcd()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateDac7512()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateMcp3204()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreateAdc()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  DriverFactory::CreatePwm()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  MC_E02SMBDriverFactory::CreateTimer()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  MC_E02SMBDriverFactory::CreateUart()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  MC_E02SMBDriverFactory::CreateLed(unsigned char)
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  MC_E02SMBDriverFactory::CreateClcd()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  MC_E02SMBDriverFactory::CreateDIn()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      abort
          | Stack used (prev) :  0000000D 00000008
          | + function block  :  00000000 00000002
          |  Already listed
  02    __record_needed_destruction
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000002 00000002
  03      IAdcPort::IAdcPort()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  03      Avr_adc::Init()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  03      Avr_adc::SetPrescaler(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  02    Avr_adc::Avr_adc()
        | Stack used (prev) :  00000057 0000001A
        | + function block  :  00000002 00000002
  01  MC_E02SMBDriverFactory::CreateAdc()
      | Stack used (prev) :  00000059 0000001C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005B 0000001E


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  MC_E02SMBDriverFactory::CreatePwm()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    operator delete(void *)
        | Stack used (prev) :  00000057 0000001A
        | + function block  :  00000000 00000002
        |  Already listed
  01  SystemManager::~SystemManager()
      | Stack used (prev) :  00000057 0000001C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000059 0000001E


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  SystemManager::Exit()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  03      SystemManager::~SystemManager()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    Term_Project_s::~Term_Project_s()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 0>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    CalClkFuncGen::~CalClkFuncGen()
        | Stack used (prev) :  00000057 0000001C
        | + function block  :  00000002 00000002
        |  Already listed
  01  <Unnamed 1>
      | Stack used (prev) :  00000059 0000001E
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005B 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      AdcEvent::~AdcEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    myAdcAdaptor::~myAdcAdaptor()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 2>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      IPwmOut::~IPwmOut()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    myPwmAdaptor::~myPwmAdaptor()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 3>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      IStringOut::~IStringOut()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    mylcdAdaptor::~mylcdAdaptor()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 4>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  03      IStringOut::~IStringOut()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    mySerialOutAdaptor::~mySerialOutAdaptor()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 5>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      SerialEvent::~SerialEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    mySerialEvent::~mySerialEvent()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 6>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  03      ITimerEvent::~ITimerEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    myTimer1s::~myTimer1s()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 7>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  03      ITimerEvent::~ITimerEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  02    myTimer500ms::~myTimer500ms()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 8>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000057 0000001A
            | + function block  :  00000000 00000002
            |  Already listed
  03      DInEvent::~DInEvent()
          | Stack used (prev) :  00000057 0000001C
          | + function block  :  00000002 00000002
  02    mySWEvent::~mySWEvent()
        | Stack used (prev) :  00000059 0000001E
        | + function block  :  00000004 00000002
  01  <Unnamed 9>
      | Stack used (prev) :  0000005D 00000020
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 00000022


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    DOut::Flip(unsigned char)
        | Stack used (prev) :  0000005B 0000001A
        | + function block  :  00000004 00000002
        |  Already listed
  06            _PutcharLarge
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000002 00000002
  05          _PutcharsLarge
              | Stack used (prev) :  00000059 0000001A
              | + function block  :  00000006 00000002
  05          _PutcharsLarge
              | Stack used (prev) :  00000059 0000001A
              | + function block  :  00000006 00000002
              |  Already listed
  05          _PutcharsLarge
              | Stack used (prev) :  00000059 0000001A
              | + function block  :  00000006 00000002
              |  Already listed
  05          _PutcharLarge
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000002 00000002
              |  Already listed
  07              __iar_Dnorm
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
  06            __iar_Dunscale
                | Stack used (prev) :  00000057 0000001A
                | + function block  :  00000004 00000002
  07              memcpy
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
  07              div
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000008 00000004
  06            _GenldLarge
                | Stack used (prev) :  0000005F 0000001C
                | + function block  :  00000017 00000002
  06            scale
                | Stack used (prev) :  00000057 00000018
                | + function block  :  0000000A 00000004
  06            scale
                | Stack used (prev) :  00000057 00000018
                | + function block  :  0000000A 00000004
                |  Already listed
  06            memcpy
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
                |  Already listed
  05          _LdtobLarge
              | Stack used (prev) :  00000076 0000001E
              | + function block  :  00000041 00000002
  05          _LitobLarge
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000030 00000004
  05          _LitobLarge
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000030 00000004
              |  Already listed
  06            _PutcharsLarge
                | Stack used (prev) :  00000059 0000001A
                | + function block  :  00000006 00000002
                |  Already listed
  05          pad
              | Stack used (prev) :  0000005F 0000001C
              | + function block  :  00000007 00000002
  05          pad
              | Stack used (prev) :  0000005F 0000001C
              | + function block  :  00000007 00000002
              |  Already listed
  05          pad
              | Stack used (prev) :  0000005F 0000001C
              | + function block  :  00000007 00000002
              |  Already listed
  05          pad
              | Stack used (prev) :  0000005F 0000001C
              | + function block  :  00000007 00000002
              |  Already listed
  05          pad
              | Stack used (prev) :  0000005F 0000001C
              | + function block  :  00000007 00000002
              |  Already listed
  05          strlen
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000000 00000002
  05          __iar_Strchr
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000000 00000002
  05          __iar_Memchr
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000000 00000002
  04        _PrintfLarge
            | Stack used (prev) :  000000B7 00000020
            | + function block  :  00000071 00000002
  03      sprintf
          | Stack used (prev) :  00000128 00000022
          | + function block  :  00000008 00000002
  02    CalClkFuncGen::tm1s()
        | Stack used (prev) :  00000130 00000024
        | + function block  :  00000017 00000002
  01  myTimer1s::TimeOutEvent()
      | Stack used (prev) :  00000147 00000026
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000149 00000028


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    DOut::Flip(unsigned char)
        | Stack used (prev) :  0000005B 0000001A
        | + function block  :  00000004 00000002
        |  Already listed
  04        strlen
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000000 00000002
            |  Already listed
  03      CalClkFuncGen::StrShift(char *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000008 00000002
  02    CalClkFuncGen::tm500ms()
        | Stack used (prev) :  0000005F 0000001C
        | + function block  :  00000004 00000002
  01  myTimer500ms::TimeOutEvent()
      | Stack used (prev) :  00000063 0000001E
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000065 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    CalClkFuncGen::Switch()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000004 00000004
  01  mySWEvent::Changed(enum DInEvent::EDGE)
      | Stack used (prev) :  0000005B 0000001C
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005F 0000001E


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      sprintf
          | Stack used (prev) :  00000128 00000022
          | + function block  :  00000008 00000002
          |  Already listed
  02    CalClkFuncGen::InputAdc(unsigned short)
        | Stack used (prev) :  00000130 00000024
        | + function block  :  00000032 00000002
  01  myAdcAdaptor::Converted(unsigned short)
      | Stack used (prev) :  00000162 00000026
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000166 00000028


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  03      Pwm::Run()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000004 00000002
  02    Pwm::SetDuty(unsigned short)
        | Stack used (prev) :  0000005B 0000001A
        | + function block  :  00000005 00000002
  01  myPwmAdaptor::SetDuty(unsigned short)
      | Stack used (prev) :  00000060 0000001C
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000064 0000001E


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  05          RingBuffer::PushBack(unsigned char)
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000004 00000002
              |  Already listed
  04        SerialIO::PushBackTxBuff(unsigned char)
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000004 00000002
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  0000005B 0000001A
          | + function block  :  00000004 00000002
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  0000005B 0000001A
          | + function block  :  00000004 00000002
          |  Already listed
  02    SerialIO::Write(char const *)
        | Stack used (prev) :  0000005F 0000001C
        | + function block  :  00000006 00000002
  02    SerialIO::Write(unsigned char)
        | Stack used (prev) :  0000005B 0000001A
        | + function block  :  00000004 00000002
        |  Already listed
  03      CalClkFuncGen::InputTime(char *)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  02    CalClkFuncGen::InputCh(char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000013 00000004
  01  mySerialEvent::Receive(unsigned char)
      | Stack used (prev) :  0000006A 0000001E
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000006E 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  02    SerialIO::Write(char const *)
        | Stack used (prev) :  0000005F 0000001C
        | + function block  :  00000006 00000002
        |  Already listed
  01  mySerialOutAdaptor::Write(char *)
      | Stack used (prev) :  00000065 0000001E
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000069 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    Clcd::Write(unsigned char, char *)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000005 00000002
  01  mylcdAdaptor::Write(char *)
      | Stack used (prev) :  0000005C 0000001A
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000060 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      operator delete(void *)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000000 00000002
          |  Already listed
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyend() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyfirst() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyfirst() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
                |  Already listed
  07              _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
  07              _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyfirst() const
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
                  |  Already listed
  07              _Vector_impl<unsigned short, allocator<unsigned short>>::_Destroy(unsigned short *, unsigned short *)
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_EraseAll()
                | Stack used (prev) :  00000057 0000001A
                | + function block  :  00000004 00000002
  07              void allocator<unsigned short>::allocator(allocator<_Other> const &)[with _Other=void]
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
  08                allocator<void>::allocator()
                    | Stack used (prev) :  00000057 00000018
                    | + function block  :  00000000 00000002
  07              _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval() const
                  | Stack used (prev) :  00000057 0000001A
                  | + function block  :  00000002 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Altyval() const
                | Stack used (prev) :  00000059 0000001C
                | + function block  :  00000005 00000002
  08                operator delete(void *)
                    | Stack used (prev) :  00000057 0000001A
                    | + function block  :  00000000 00000002
                    |  Already listed
  07              _Allocator<void>::deallocate(void *)
                  | Stack used (prev) :  00000057 0000001C
                  | + function block  :  00000002 00000002
  06            allocator<unsigned short>::deallocate(unsigned short *, unsigned int)
                | Stack used (prev) :  00000059 0000001E
                | + function block  :  00000006 00000002
  05          _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
              | Stack used (prev) :  0000005F 00000020
              | + function block  :  00000009 00000002
  05          _Vector_value<allocator<void>>::_Zero()
              | Stack used (prev) :  00000057 00000018
              | + function block  :  00000000 00000002
  04        _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy()
            | Stack used (prev) :  00000068 00000022
            | + function block  :  00000002 00000002
  03      vector<ITimerEvent *>::~vector()
          | Stack used (prev) :  0000006A 00000024
          | + function block  :  00000002 00000002
  02    TimerManager::~TimerManager()
        | Stack used (prev) :  0000006C 00000026
        | + function block  :  00000004 00000002
  01  <Unnamed 0>
      | Stack used (prev) :  00000070 00000028
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000072 0000002A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    Adc::evTick()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000004 00000002
  01  Adc::TimeOutEvent()
      | Stack used (prev) :  0000005B 0000001A
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005D 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_adc::isConverted()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_adc::GetAdc()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    Avr_pwm::SetPreScaler(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000004 00000002
  01  Avr_pwm::Run()
      | Stack used (prev) :  0000005B 0000001A
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005D 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    Avr_pwm::SetPreScaler(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000004 00000002
        |  Already listed
  01  Avr_pwm::Stop()
      | Stack used (prev) :  0000005B 0000001A
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005D 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    Avr_pwm::SetOcr(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
  01  Avr_pwm::SetDuty(unsigned short)
      | Stack used (prev) :  00000057 0000001A
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005B 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_pwm::GetResolution()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_timer0::Init()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_timer0::GetTimeOutMS()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_timer0::isTimeOut()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_uart0::Init()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000002 00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000059 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_uart0::Run()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  Avr_uart0::SendTxEvent()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
          |  Already listed
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
          |  Already listed
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
          |  Already listed
  02    avr_delay_ms(unsigned int)
        | Stack used (prev) :  00000057 0000001A
        | + function block  :  00000004 00000002
  02    avr_delay_us(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::Init()
      | Stack used (prev) :  0000005B 0000001C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005D 0000001E


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    avr_delay_us(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::SetData(unsigned char)
      | Stack used (prev) :  00000057 0000001A
      | + function block  :  00000003 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005A 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    avr_delay_us(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::SetInstruction(unsigned char)
      | Stack used (prev) :  00000057 0000001A
      | + function block  :  00000003 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005A 0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  01  E02SMBLed::SetPort(unsigned char)
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000005B 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  01  E02SMBLed::GetPort()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000059 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  01  DigialIn::GetPort()
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000059 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  02    abort
        | Stack used (prev) :  0000000D 00000008
        | + function block  :  00000000 00000002
        |  Already listed
  01  __pure_virtual_called
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000057 00000018
  01  _SProut
      | Stack used (prev) :  00000057 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000057 0000001A


  ->Sub-tree of type: Indirectly called function tree that makes indirect
                    : calls (Is not an interrupt and is not flagged as not
                    : overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000166 0000002A
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  0000005B 0000001A
          | + function block  :  00000004 00000002
          |  Already listed
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  0000005B 0000001A
          | + function block  :  00000004 00000002
          |  Already listed
  02    SerialIO::Write(char __flash *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000006 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  03      SerialEvent::SetSerialIO(SerialIO &)
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000000 00000002
  02    SerialIO::SetEvent(SerialEvent &)
        | Stack used (prev) :  00000166 0000002C
        | + function block  :  00000004 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    DIn::SetEvent(DInEvent &)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  03      ITimerEvent::SetIntervalms(unsigned short)
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000004 00000002
  02    Adc::SetFrequency(unsigned char)
        | Stack used (prev) :  0000016A 0000002A
        | + function block  :  00000007 00000004
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    Adc::Addevent(AdcEvent *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  03      ITimerEvent::Resume()
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000000 00000002
  02    Adc::Run()
        | Stack used (prev) :  00000166 0000002C
        | + function block  :  00000002 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  07              void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=unsigned short *, _Diff=unsigned int, _Tval=unsigned short, _Alloc=allocator<unsigned short>]
                  | Stack used (prev) :  00000166 0000002A
                  | + function block  :  00000000 00000002
  07              void allocator<unsigned short>::allocator(allocator<_Other> const &)[with _Other=void]
                  | Stack used (prev) :  00000057 00000018
                  | + function block  :  00000000 00000002
                  |  Already listed
  08                allocator<void>::allocator()
                    | Stack used (prev) :  00000057 00000018
                    | + function block  :  00000000 00000002
                    |  Already listed
  07              _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                  | Stack used (prev) :  00000166 0000002A
                  | + function block  :  00000002 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                | Stack used (prev) :  00000168 0000002C
                | + function block  :  0000000A 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
                |  Already listed
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
                |  Already listed
  10                    _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                        | Stack used (prev) :  00000168 0000002C
                        | + function block  :  0000000A 00000002
                        |  Already listed
  17                                  memmove
                                      | Stack used (prev) :  00000166 0000002A
                                      | + function block  :  00000000 00000002
  16                                _Uninit_copy(char const *, char const *, char *)
                                    | Stack used (prev) :  00000166 0000002C
                                    | + function block  :  00000008 00000002
  15                              _Uninit_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                  | Stack used (prev) :  0000016E 0000002E
                                  | + function block  :  00000006 00000002
  14                            _Ty *_Uninit_copy(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
                                | Stack used (prev) :  00000174 00000030
                                | + function block  :  00000006 00000002
  13                          _FwdIt _Uninit_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
                              | Stack used (prev) :  0000017A 00000032
                              | + function block  :  00000008 00000002
  12                        _FwdIt _Uninitialized_copy(_InIt, _InIt, _FwdIt, _Alloc &)[with _InIt=unsigned short const *, _FwdIt=unsigned short *, _Alloc=allocator<unsigned short>]
                            | Stack used (prev) :  00000182 00000034
                            | + function block  :  00000008 00000002
  12                        void allocator<unsigned short>::allocator(allocator<_Other> const &)[with _Other=void]
                            | Stack used (prev) :  00000057 00000018
                            | + function block  :  00000000 00000002
                            |  Already listed
  12                        _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                            | Stack used (prev) :  00000166 0000002A
                            | + function block  :  00000002 00000002
                            |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
                          | Stack used (prev) :  0000018A 00000036
                          | + function block  :  0000000A 00000002
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Ucopy(unsigned short const *, unsigned short const *, unsigned short *)
                          | Stack used (prev) :  0000018A 00000036
                          | + function block  :  0000000A 00000002
                          |  Already listed
  14                            _Vector_value<allocator<void>>::_Bend() const
                                | Stack used (prev) :  00000166 0000002A
                                | + function block  :  00000000 00000002
  14                            _Vector_value<allocator<void>>::_Bfirst() const
                                | Stack used (prev) :  00000057 00000018
                                | + function block  :  00000000 00000002
                                |  Already listed
  13                          _Vector_value<allocator<void>>::_Bcapacity() const
                              | Stack used (prev) :  00000166 0000002C
                              | + function block  :  00000004 00000002
  12                        _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Capacity<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
                            | Stack used (prev) :  0000016A 0000002E
                            | + function block  :  00000002 00000002
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::capacity() const
                          | Stack used (prev) :  0000016C 00000030
                          | + function block  :  00000002 00000002
  12                        _Vector_value<_Alloc>::size_type _Vector_value<_Alloc>::_Size<_Sz>() const[with _Alloc=allocator<void>, _Sz=2]
                            | Stack used (prev) :  0000005B 0000001C
                            | + function block  :  00000002 00000002
                            |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::size() const
                          | Stack used (prev) :  00000166 0000002A
                          | + function block  :  00000002 00000002
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                          | Stack used (prev) :  00000057 00000018
                          | + function block  :  00000000 00000002
                          |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                          | Stack used (prev) :  00000057 00000018
                          | + function block  :  00000000 00000002
                          |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                          | Stack used (prev) :  00000057 00000018
                          | + function block  :  00000000 00000002
                          |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytylast() const
                          | Stack used (prev) :  00000057 00000018
                          | + function block  :  00000000 00000002
                          |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Mytyfirst() const
                          | Stack used (prev) :  00000057 00000018
                          | + function block  :  00000000 00000002
                          |  Already listed
  11                      _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
                          | Stack used (prev) :  0000005F 00000020
                          | + function block  :  00000009 00000002
                          |  Already listed
  11                      _Vector_value<allocator<void>>::_Xlen() const
                          | Stack used (prev) :  00000166 0000002A
                          | + function block  :  00000000 00000002
  11                      allocator<unsigned short>::max_size() const
                          | Stack used (prev) :  00000166 0000002A
                          | + function block  :  00000000 00000002
  11                      allocator<unsigned short>::max_size() const
                          | Stack used (prev) :  00000166 0000002A
                          | + function block  :  00000000 00000002
                          |  Already listed
  16                                free
                                    | Stack used (prev) :  00000057 00000018
                                    | + function block  :  00000000 00000002
                                    |  Already listed
  16                                __near_GetMemChunk
                                    | Stack used (prev) :  00000166 0000002A
                                    | + function block  :  00000000 00000002
  15                              __near_findmem
                                  | Stack used (prev) :  00000166 0000002C
                                  | + function block  :  00000002 00000002
  14                            malloc
                                | Stack used (prev) :  00000168 0000002E
                                | + function block  :  00000004 00000002
  15                              abort
                                  | Stack used (prev) :  0000000D 00000008
                                  | + function block  :  00000000 00000002
                                  |  Already listed
  14                            _Nomemory()
                                | Stack used (prev) :  00000166 0000002A
                                | + function block  :  00000000 00000002
  13                          operator new(size_t)
                              | Stack used (prev) :  0000016C 00000030
                              | + function block  :  00000004 00000002
  12                        _Allocator<void>::allocate(unsigned int)
                            | Stack used (prev) :  00000170 00000032
                            | + function block  :  00000002 00000002
  11                      allocator<unsigned short>::allocate(unsigned int)
                          | Stack used (prev) :  00000172 00000034
                          | + function block  :  00000004 00000002
  11                      void allocator<unsigned short>::allocator(allocator<_Other> const &)[with _Other=void]
                          | Stack used (prev) :  00000057 00000018
                          | + function block  :  00000000 00000002
                          |  Already listed
  15                              memmove
                                  | Stack used (prev) :  00000166 0000002A
                                  | + function block  :  00000000 00000002
                                  |  Already listed
  14                            _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                | Stack used (prev) :  00000166 0000002A
                                | + function block  :  00000008 00000004
  13                          _Ty *_Copy_backward_opt(_Ty const *, _Ty const *, _Ty *)[with _Ty=unsigned short]
                              | Stack used (prev) :  0000016E 0000002E
                              | + function block  :  00000006 00000002
  12                        _Ty1 *_Copy_backward_opt(_Ty1 *, _Ty1 *, _Ty1 *)[with _Ty1=unsigned short]
                            | Stack used (prev) :  00000174 00000030
                            | + function block  :  00000006 00000002
  11                      _BidIt2 copy_backward(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=unsigned short *, _BidIt2=unsigned short *]
                          | Stack used (prev) :  0000017A 00000032
                          | + function block  :  00000006 00000002
  11                      _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_Alval()
                          | Stack used (prev) :  00000166 0000002A
                          | + function block  :  00000002 00000002
                          |  Already listed
  10                    _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                        | Stack used (prev) :  00000194 00000038
                        | + function block  :  00000014 00000002
  09                  _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                      | Stack used (prev) :  000001A8 0000003A
                      | + function block  :  00000008 00000002
  08                void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
                    | Stack used (prev) :  000001B0 0000003C
                    | + function block  :  0000000A 00000002
  08                _Vector_value<allocator<void>>::_Bfirst() const
                    | Stack used (prev) :  00000057 00000018
                    | + function block  :  00000000 00000002
                    |  Already listed
  08                _Vector_value<allocator<void>>::_Bfirst() const
                    | Stack used (prev) :  00000057 00000018
                    | + function block  :  00000000 00000002
                    |  Already listed
  08                _Vector_value<allocator<void>>::_ToBptr(void *)
                    | Stack used (prev) :  00000166 0000002A
                    | + function block  :  00000000 00000002
  07              _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                  | Stack used (prev) :  000001BA 0000003E
                  | + function block  :  0000000A 00000002
  06            _Vector_impl<_Ty, _Alloc>::pointer _Vector_impl<_Ty, _Alloc>::_Insert(_Vector_impl<_Ty, _Alloc>::pointer, _Ty1 const &)[with _Ty=unsigned short, _Alloc=allocator<unsigned short>, _Ty1=unsigned short]
                | Stack used (prev) :  000001C4 00000040
                | + function block  :  00000006 00000002
  05          _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
              | Stack used (prev) :  000001CA 00000042
              | + function block  :  00000004 00000002
  04        void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back(_Ty1 const &)[with _Ty1=ITimerEvent *]
            | Stack used (prev) :  000001CE 00000044
            | + function block  :  00000004 00000002
  03      vector<ITimerEvent *>::push_back(ITimerEvent *)
          | Stack used (prev) :  000001D2 00000046
          | + function block  :  00000004 00000002
  03      vector<ITimerEvent *>::operator[](unsigned int)
          | Stack used (prev) :  00000057 0000001A
          | + function block  :  00000004 00000002
          |  Already listed
  03      vector<ITimerEvent *>::size() const
          | Stack used (prev) :  0000005D 0000001E
          | + function block  :  00000002 00000002
          |  Already listed
  03      vector<ITimerEvent *>::size() const
          | Stack used (prev) :  0000005D 0000001E
          | + function block  :  00000002 00000002
          |  Already listed
  02    TimerManager::AddEvent(ITimerEvent *)
        | Stack used (prev) :  000001D6 00000048
        | + function block  :  00000006 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    mylcdAdaptor::SetClcd(Clcd *, unsigned char)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000005 00000002
  02    mylcdAdaptor::SetClcd(Clcd *, unsigned char)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000005 00000002
        |  Already listed
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    mySerialOutAdaptor::SetSerial(SerialIO *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    mySerialEvent::SetCalClkFuncGen(CalClkFuncGen *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    myPwmAdaptor::SetPwm(Pwm *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    myAdcAdaptor::SetCalClkFuncGen(CalClkFuncGen *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    mySWEvent::SetCalClkFuncGen(CalClkFuncGen *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  02    mySWEvent::SetLed(Led *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000000 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    myTimer500ms::SetCalClkFuncGen(CalClkFuncGen *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  02    myTimer500ms::SetLed(Led *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000000 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    myTimer1s::SetCalClkFuncGen(CalClkFuncGen *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  02    myTimer1s::SetLed(Led *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000000 00000002
  02    GetDriverFactory()
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000000 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    CalClkFuncGen::SetPwm(IPwmOut *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000008 00000002
  02    CalClkFuncGen::Init()
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  02    ITimerEvent::Resume()
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000000 00000002
        |  Already listed
  02    GetBCComponentManager()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  03      __record_needed_destruction
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000002 00000002
          |  Already listed
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  03      Pwm::Pwm(IPwmPort *)
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000004 00000002
  02    BCComponentManager::CreatePwm()
        | Stack used (prev) :  0000016A 0000002C
        | + function block  :  00000004 00000002
  03      __record_needed_destruction
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000002 00000002
          |  Already listed
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  04        ITimerEvent::ITimerEvent(unsigned char, unsigned short)
            | Stack used (prev) :  00000166 0000002A
            | + function block  :  00000000 00000002
  03      Adc::Adc(IAdcPort *)
          | Stack used (prev) :  00000166 0000002C
          | + function block  :  00000004 00000002
  03      TimerManager::AddEvent(ITimerEvent *)
          | Stack used (prev) :  000001D6 00000048
          | + function block  :  00000006 00000002
          |  Already listed
  02    BCComponentManager::CreateAdc()
        | Stack used (prev) :  000001DC 0000004A
        | + function block  :  00000004 00000002
  02    BCComponentManager::CreateDIn()
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000004 00000002
  02    BCComponentManager::CreateSerialIO(unsigned char)
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  02    BCComponentManager::CreateLed(enum LED)
        | Stack used (prev) :  00000166 0000002A
        | + function block  :  00000000 00000002
  02    BCComponentManager::CreateTimer()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  01  Term_Project_s::Init()
      | Stack used (prev) :  000001E0 0000004C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that makes indirect
                    : calls (Is not an interrupt and is not flagged as not
                    : overlayable)
    | Stack used          :  000001E2 0000004E


  ->Sub-tree of type: Function tree that makes indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  000001E2 0000004E
  02    __taabi_assert
        | Stack used (prev) :  00000015 0000000A
        | + function block  :  00000015 00000002
        |  Already listed
  02    __iar_EmptyStepPoint
        | Stack used (prev) :  0000000B 00000004
        | + function block  :  00000000 00000002
        |  Already listed
  03      SystemManager::RunTail()
          | Stack used (prev) :  000001E2 0000004E
          | + function block  :  00000000 00000002
  02    SystemManager::Run(unsigned char)
        | Stack used (prev) :  000001E2 00000050
        | + function block  :  00000005 00000002
  02    SystemManager::InitModule()
        | Stack used (prev) :  000001E2 0000004E
        | + function block  :  00000004 00000002
  02    SystemManager::Instance()
        | Stack used (prev) :  000001E2 0000004E
        | + function block  :  00000000 00000002
  02    GetBCComponentManager()
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000000 00000002
        |  Already listed
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  03      __record_needed_destruction
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000002 00000002
          |  Already listed
  05          __taabi_assert
              | Stack used (prev) :  00000015 0000000A
              | + function block  :  00000015 00000002
              |  Already listed
  05          __iar_EmptyStepPoint
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000000 00000002
              |  Already listed
  04        ISerialPort::SetSerialIO(SerialIO &)
            | Stack used (prev) :  000001E2 0000004E
            | + function block  :  00000004 00000002
  04        RingBuffer::RingBuffer()
            | Stack used (prev) :  000001E2 0000004E
            | + function block  :  00000000 00000002
  03      SerialIO::SerialIO(ISerialPort &)
          | Stack used (prev) :  000001E6 00000050
          | + function block  :  00000004 00000002
  03      TimerManager::AddEvent(ITimerEvent *)
          | Stack used (prev) :  000001D6 00000048
          | + function block  :  00000006 00000002
          |  Already listed
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  04        __record_needed_destruction
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000002 00000002
            |  Already listed
  05          __taabi_assert
              | Stack used (prev) :  00000015 0000000A
              | + function block  :  00000015 00000002
              |  Already listed
  05          __iar_EmptyStepPoint
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000000 00000002
              |  Already listed
  08                _ClassUtil::_AllocHolder<_Alloc, false>[with _Alloc=allocator<void>]::_AllocHolder()
                    | Stack used (prev) :  000001E2 0000004E
                    | + function block  :  00000000 00000002
  07              _Vector_value<allocator<void>>::_Vector_value()
                  | Stack used (prev) :  000001E2 00000050
                  | + function block  :  00000002 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Vector_impl()
                | Stack used (prev) :  000001E4 00000052
                | + function block  :  00000002 00000002
  06            _Vector_value<allocator<void>>::_Zero()
                | Stack used (prev) :  00000057 00000018
                | + function block  :  00000000 00000002
                |  Already listed
  05          vector<ITimerEvent *>::vector()
              | Stack used (prev) :  000001E6 00000054
              | + function block  :  00000002 00000002
  04        TimerManager::TimerManager(ITimer *)
            | Stack used (prev) :  000001E8 00000056
            | + function block  :  00000004 00000002
  03      TimerManager::GetInstance(ITimer *)
          | Stack used (prev) :  000001EC 00000058
          | + function block  :  00000002 00000002
  03      SystemManager::AddModule(IModule &)
          | Stack used (prev) :  000001E2 0000004E
          | + function block  :  00000000 00000002
  03      SystemManager::Instance()
          | Stack used (prev) :  000001E2 0000004E
          | + function block  :  00000000 00000002
          |  Already listed
  03      GetDriverFactory()
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000000 00000002
          |  Already listed
  04        ITimerEvent::Resume()
            | Stack used (prev) :  00000166 0000002A
            | + function block  :  00000000 00000002
            |  Already listed
  04        ITimerEvent::ITimerEvent(unsigned char, unsigned short)
            | Stack used (prev) :  00000166 0000002A
            | + function block  :  00000000 00000002
            |  Already listed
  03      TimerWithLedAdapter::TimerWithLedAdapter(Led *)
          | Stack used (prev) :  000001E2 0000004E
          | + function block  :  00000004 00000002
  03      TimerWithLedAdapter::TimerWithLedAdapter(Led *)
          | Stack used (prev) :  000001E2 0000004E
          | + function block  :  00000004 00000002
          |  Already listed
  05          __taabi_assert
              | Stack used (prev) :  00000015 0000000A
              | + function block  :  00000015 00000002
              |  Already listed
  05          __iar_EmptyStepPoint
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000000 00000002
              |  Already listed
  04        DIn::SetTimerInterval(unsigned char)
            | Stack used (prev) :  000001E2 0000004E
            | + function block  :  00000004 00000002
  04        ITimerEvent::Resume()
            | Stack used (prev) :  00000166 0000002A
            | + function block  :  00000000 00000002
            |  Already listed
  04        ITimerEvent::ITimerEvent(unsigned char, unsigned short)
            | Stack used (prev) :  00000166 0000002A
            | + function block  :  00000000 00000002
            |  Already listed
  03      DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
          | Stack used (prev) :  000001E6 00000050
          | + function block  :  00000006 00000002
  02    BCComponentManager::Init()
        | Stack used (prev) :  000001EE 0000005A
        | + function block  :  00000006 00000002
  01  main
      | Stack used (prev) :  000001F4 0000005C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Function tree that makes indirect calls
    | Stack used          :  000001F6 0000005E


  ->Sub-tree of type: Function tree that makes indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  000001F6 0000005E
  01  __call_ctors
      | Stack used (prev) :  000001F6 0000005E
      | + function block  :  0000000B 00000002
  <-Sub-tree of type: Function tree that makes indirect calls
    | Stack used          :  00000201 00000060


  ->Sub-tree of type: Function tree that makes indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000201 00000060
  01  __call_dtors
      | Stack used (prev) :  00000201 00000060
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Function tree that makes indirect calls
    | Stack used          :  00000203 00000062


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000203 00000062
  02    __record_needed_destruction
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000002 00000002
        |  Already listed
  03      IModule::IModule()
          | Stack used (prev) :  00000203 00000062
          | + function block  :  00000000 00000002
  02    BCComponentMod::BCComponentMod()
        | Stack used (prev) :  00000203 00000064
        | + function block  :  00000002 00000002
  03      __taabi_assert
          | Stack used (prev) :  00000015 0000000A
          | + function block  :  00000015 00000002
          |  Already listed
  03      __iar_EmptyStepPoint
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000000 00000002
          |  Already listed
  02    BCComponentManager::BCComponentManager()
        | Stack used (prev) :  00000203 00000062
        | + function block  :  00000002 00000002
  01  __sti__routine()
      | Stack used (prev) :  00000205 00000066
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000205 00000068


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000205 00000068
  02    __record_needed_destruction
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000002 00000002
        |  Already listed
  03      DIn::DIn()
          | Stack used (prev) :  00000205 00000068
          | + function block  :  00000000 00000002
  02    DigialIn::DigialIn()
        | Stack used (prev) :  00000205 0000006A
        | + function block  :  00000002 00000002
  04        Led::Init()
            | Stack used (prev) :  00000057 00000018
            | + function block  :  00000000 00000002
            |  Already listed
  04        DOut::DOut()
            | Stack used (prev) :  00000205 00000068
            | + function block  :  00000000 00000002
  03      Led::Led()
          | Stack used (prev) :  00000205 0000006A
          | + function block  :  00000002 00000002
  03      E02SMBLed::SetPort(unsigned char)
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000004 00000002
          |  Already listed
  02    E02SMBLed::E02SMBLed()
        | Stack used (prev) :  00000207 0000006C
        | + function block  :  00000002 00000002
  03      ClcdAdaptor::Init()
          | Stack used (prev) :  0000005B 0000001C
          | + function block  :  00000002 00000002
          |  Already listed
  04        Clcd::Init()
            | Stack used (prev) :  00000205 00000068
            | + function block  :  00000000 00000002
  03      Clcd::Clcd()
          | Stack used (prev) :  00000205 0000006A
          | + function block  :  00000002 00000002
  02    ClcdAdaptor::ClcdAdaptor()
        | Stack used (prev) :  00000207 0000006C
        | + function block  :  00000002 00000002
  03      ISerialPort::ISerialPort(unsigned long)
          | Stack used (prev) :  00000205 00000068
          | + function block  :  00000000 00000002
  03      Avr_uart0::Init()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000002 00000004
          |  Already listed
  02    Avr_uart0::Avr_uart0()
        | Stack used (prev) :  00000205 0000006A
        | + function block  :  00000002 00000002
  03      ITimer::ITimer()
          | Stack used (prev) :  00000205 00000068
          | + function block  :  00000000 00000002
  03      Avr_timer0::Init()
          | Stack used (prev) :  00000057 00000018
          | + function block  :  00000000 00000002
          |  Already listed
  02    Avr_timer0::Avr_timer0()
        | Stack used (prev) :  00000205 0000006A
        | + function block  :  00000002 00000002
  03      IPwmPort::IPwmPort()
          | Stack used (prev) :  00000205 00000068
          | + function block  :  00000000 00000002
  03      Avr_pwm::Init()
          | Stack used (prev) :  00000205 00000068
          | + function block  :  00000000 00000002
  02    Avr_pwm::Avr_pwm(unsigned char)
        | Stack used (prev) :  00000205 0000006A
        | + function block  :  00000004 00000002
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  03      DriverFactory::DriverFactory()
          | Stack used (prev) :  00000205 00000068
          | + function block  :  00000002 00000002
  02    MC_E02SMBDriverFactory::MC_E02SMBDriverFactory()
        | Stack used (prev) :  00000207 0000006A
        | + function block  :  00000002 00000002
  01  __sti__routine()
      | Stack used (prev) :  00000209 0000006E
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000209 00000070


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000209 00000070
  02    __record_needed_destruction
        | Stack used (prev) :  00000057 00000018
        | + function block  :  00000002 00000002
        |  Already listed
  03      IStringOut::IStringOut()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000000 00000002
  02    mylcdAdaptor::mylcdAdaptor()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
  02    mylcdAdaptor::mylcdAdaptor()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
        |  Already listed
  03      IStringOut::IStringOut()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000000 00000002
          |  Already listed
  02    mySerialOutAdaptor::mySerialOutAdaptor()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
  03      SerialEvent::SerialEvent()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000000 00000002
  02    mySerialEvent::mySerialEvent()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
  03      IPwmOut::IPwmOut()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000000 00000002
  02    myPwmAdaptor::myPwmAdaptor()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
  03      AdcEvent::AdcEvent()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000000 00000002
  02    myAdcAdaptor::myAdcAdaptor()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
  03      DInEvent::DInEvent()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000000 00000002
  02    mySWEvent::mySWEvent()
        | Stack used (prev) :  00000209 00000072
        | + function block  :  00000002 00000002
  03      ITimerEvent::ITimerEvent(unsigned char, unsigned short)
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000000 00000002
          |  Already listed
  02    myTimer500ms::myTimer500ms()
        | Stack used (prev) :  00000209 00000070
        | + function block  :  00000002 00000002
  03      ITimerEvent::ITimerEvent(unsigned char, unsigned short)
          | Stack used (prev) :  00000166 0000002A
          | + function block  :  00000000 00000002
          |  Already listed
  02    myTimer1s::myTimer1s()
        | Stack used (prev) :  00000209 00000070
        | + function block  :  00000002 00000002
  04        __taabi_assert
            | Stack used (prev) :  00000015 0000000A
            | + function block  :  00000015 00000002
            |  Already listed
  04        __iar_EmptyStepPoint
            | Stack used (prev) :  0000000B 00000004
            | + function block  :  00000000 00000002
            |  Already listed
  03      SystemManager::SystemManager()
          | Stack used (prev) :  00000209 00000070
          | + function block  :  00000002 00000002
  02    Term_Project_s::Term_Project_s()
        | Stack used (prev) :  0000020B 00000072
        | + function block  :  00000002 00000002
  02    CalClkFuncGen::CalClkFuncGen()
        | Stack used (prev) :  00000209 00000070
        | + function block  :  00000000 00000002
  01  __sti__routine()
      | Stack used (prev) :  0000020D 00000074
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  0000020D 00000076


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  0000020D 00000076
  01  exit
      | Stack used (prev) :  0000020D 00000076
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  0000020D 00000078


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  0000020D 00000078
  01  __low_level_init
      | Stack used (prev) :  0000020D 00000078
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  0000020D 0000007A


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  0000020D 0000007A
  02    __flashcpy
        | Stack used (prev) :  0000020D 0000007A
        | + function block  :  00000000 00000002
  02    __memclr
        | Stack used (prev) :  0000020D 0000007A
        | + function block  :  00000000 00000002
  01  __segment_init
      | Stack used (prev) :  0000020D 0000007C
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  0000020D 0000007E




                ****************************************
                *                                      *
                *      SEGMENTS IN ADDRESS ORDER       *
                *                                      *
                ****************************************


SEGMENT              SPACE    START ADDRESS   END ADDRESS     SIZE  TYPE  ALIGN
=======              =====    =============   ===========     ====  ====  =====
INTVEC               CODE          00000000 - 00000057          58   com    1
?FILL1               CODE          00000058 - 0000008B          34   rel    0
NEAR_F               CODE          0000008C - 00000290         205   rel    0
SWITCH               CODE          00000292 - 000002C5          34   rel    1
DIFUNCT              CODE          000002C6 - 000002CB           6   rel    0
CODE                 CODE          000002CC - 000057D1        5506   rel    1
INITTAB              CODE          000057D2 - 000057DF           E   rel    0
NEAR_ID              CODE          000057E0 - 00005EF5         716   rel    0
ABSOLUTE             DATA               0000001C                     rel    0
                     DATA               0000001D                   
                     DATA               0000001E                   
                     DATA               0000001F                   
                     DATA          00000024 - 00000027           4 
                     DATA          00000029 - 0000002F           7 
                     DATA          00000031 - 00000032           2 
                     DATA          00000037 - 00000037           1 
                     DATA          00000043 - 00000045           3 
                     DATA          00000051 - 00000051           1 
                     DATA          00000053 - 00000053           1 
                     DATA          00000055 - 00000055           1 
                     DATA          00000057 - 00000057           1 
                     DATA          00000063 - 00000064           2 
                     DATA          0000006C - 0000006D           2 
                     DATA          00000090 - 00000090           1 
                     DATA          00000095 - 00000095           1 
CSTACK               DATA          00000100 - 000003BF         2C0   dse    0
NEAR_HEAP            DATA          000003C0 - 0000061F         260   dse    0
RSTACK               DATA          00000620 - 0000065F          40   dse    0
NEAR_I               DATA          00000660 - 00000D75         716   rel    0
NEAR_Z               DATA          00000D76 - 00000ECF         15A   rel    0

                ****************************************
                *                                      *
                *        END OF CROSS REFERENCE        *
                *                                      *
                ****************************************

 24 257 bytes of CODE memory (+             52 range fill )
  3 536 bytes of DATA memory (+ 27 absolute )

Errors: none
Warnings: none

