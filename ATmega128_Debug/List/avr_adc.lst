###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    20/Dec/2013  10:32:42 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_adc.cpp        #
#    Command line =  C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_adc.cpp        #
#                    --cpu=m128 -ms -o C:\work\ATmega128_Debug\Obj\ -D        #
#                    xNDEBUG -D xWATCHDOG_ENABLE -lC                          #
#                    C:\work\ATmega128_Debug\List\ -y                         #
#                    --initializers_in_flash -z2 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --cross_call_passes=2 --debug                  #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    C:\work\ -I C:\work/TIEL_FrameWork/Basic_Component\ -I   #
#                    C:\work/TIEL_FrameWork/BSP/MC_E02SMB_v1_3\ -I            #
#                    C:\work/TIEL_FrameWork/Common\ -I                        #
#                    C:\work/TIEL_FrameWork/Configuration\ -I                 #
#                    C:\work/TIEL_FrameWork/CPU/AVR_Driver\ -I                #
#                    C:\work/TIEL_FrameWork/Driver_Interface\ -I              #
#                    C:\work/TIEL_FrameWork/Drivers\ -I                       #
#                    C:\work/TIEL_FrameWork/Service\ -I                       #
#                    C:\work/TIEL_FrameWork/System\ -I                        #
#                    C:\work/TIEL_FrameWork/Test\ -I                          #
#                    C:\work/TIEL_FrameWork/Utils\ -I C:\work/BUILD_COUNT\    #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.4\avr\INC\DLIB\" --eeprom_size 4096 --eec++  #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"          #
#    List file    =  C:\work\ATmega128_Debug\List\avr_adc.lst                 #
#    Object file  =  C:\work\ATmega128_Debug\Obj\avr_adc.r90                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_adc.cpp
      1          #include "avr_adc.h"

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 IAdcPort::IAdcPort()
   \                     ??IAdcPort:
   \   00000000   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 IAdcPort::~IAdcPort()
   \                     `?~IAdcPort`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2F08               MOV     R16, R24
   \   00000008   2B09               OR      R16, R25
   \   0000000A   F031               BREQ    `?~IAdcPort_1`
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   FF00               SBRS    R16, 0
   \   00000010   C003               RJMP    `?~IAdcPort_1`
   \   00000012   018C               MOVW    R17:R16, R25:R24
   \   00000014   ........           CALL    `??operator delete`
   \                     `?~IAdcPort_1`:
   \   00000018   9189               LD      R24, Y+
   \   0000001A   9199               LD      R25, Y+
   \   0000001C   9508               RET
      2          
      3          // Include I/O definition file
      4          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x24
   \   <__C5> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x26
   \   <__C6> volatile __io _A_ADCSR
   \                     _A_ADCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   <__C7> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1
      5          #include <inavr.h> //_interrupt()
      6          #include <cassert>
      7          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          volatile unsigned short adc_result;
   \                     adc_result:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          volatile unsigned char isconv =0;
   \                     isconv:
   \   00000000                      DS8 1
     10          #pragma vector = ADC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     11          __interrupt void ADC_conv_done(void)
   \                     ??ADC_conv_done:
     12          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   935A               ST      -Y, R21
   \   00000006   934A               ST      -Y, R20
   \   00000008   933A               ST      -Y, R19
   \   0000000A   932A               ST      -Y, R18
   \   0000000C   931A               ST      -Y, R17
   \   0000000E   930A               ST      -Y, R16
   \   00000010   B74F               IN      R20, 0x3F
   \   00000012   B75B               IN      R21, 0x3B
     13            adc_result = ADCL;
   \   00000014   B104               IN      R16, 0x04
   \   00000016   E010               LDI     R17, 0
   \   00000018   9300....           STS     adc_result, R16
   \   0000001C   9310....           STS     (adc_result + 1), R17
     14            adc_result |= ((unsigned short)ADCH)<<8;
                                                          ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000020   B115               IN      R17, 0x05
   \   00000022   E000               LDI     R16, 0
   \   00000024   ....               LDI     R30, LOW(adc_result)
   \   00000026   ....               LDI     R31, (adc_result) >> 8
   \   00000028   8120               LD      R18, Z
   \   0000002A   8131               LDD     R19, Z+1
   \   0000002C   2B20               OR      R18, R16
   \   0000002E   2B31               OR      R19, R17
   \   00000030   8320               ST      Z, R18
   \   00000032   8331               STD     Z+1, R19
     15           
     16            isconv=1;
   \   00000034   E001               LDI     R16, 1
   \   00000036   9300....           STS     isconv, R16
     17          }
   \   0000003A   BF5B               OUT     0x3B, R21
   \   0000003C   BF4F               OUT     0x3F, R20
   \   0000003E   9109               LD      R16, Y+
   \   00000040   9119               LD      R17, Y+
   \   00000042   9129               LD      R18, Y+
   \   00000044   9139               LD      R19, Y+
   \   00000046   9149               LD      R20, Y+
   \   00000048   9159               LD      R21, Y+
   \   0000004A   91E9               LD      R30, Y+
   \   0000004C   91F9               LD      R31, Y+
   \   0000004E   9518               RETI
   \   00000050                      REQUIRE _A_ADC
     18          

   \                                 In  segment CODE, align 2, keep-with-next
     19          void Avr_adc::SetChannel(unsigned char _ch)
   \                     ??SetChannel:
     20          {
     21            __disable_interrupt();
   \   00000000   94F8               CLI
     22            ADMUX = (ADMUX & 0xf8) | ( _ch & 0x07);
   \   00000002   B147               IN      R20, 0x07
   \   00000004   7F48               ANDI    R20, 0xF8
   \   00000006   2F32               MOV     R19, R18
   \   00000008   7037               ANDI    R19, 0x07
   \   0000000A   2B43               OR      R20, R19
   \   0000000C   B947               OUT     0x07, R20
     23            __enable_interrupt();  
   \   0000000E   9478               SEI
     24          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_ADMUX
     25          

   \                                 In  segment CODE, align 2, keep-with-next
     26          void Avr_adc::SetPrescaler(unsigned char _pre)
   \                     ??SetPrescaler:
     27          {
     28            __disable_interrupt();
   \   00000000   94F8               CLI
     29            ADCSR = (ADCSR & 0xf8 )|(_pre & 0x07);
   \   00000002   B146               IN      R20, 0x06
   \   00000004   7F48               ANDI    R20, 0xF8
   \   00000006   2F32               MOV     R19, R18
   \   00000008   7037               ANDI    R19, 0x07
   \   0000000A   2B43               OR      R20, R19
   \   0000000C   B946               OUT     0x06, R20
     30            __enable_interrupt();
   \   0000000E   9478               SEI
     31          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_ADCSR
     32          
     33          

   \                                 In  segment CODE, align 2, keep-with-next
     34          void Avr_adc::Init(void)
   \                     ??Init:
     35          {
     36            __disable_interrupt();
   \   00000000   94F8               CLI
     37            ADMUX = 0x00;
   \   00000002   E020               LDI     R18, 0
   \   00000004   B927               OUT     0x07, R18
     38            ADCSR = ( 1 << ADEN) | ( 1 << ADFR) |( 1 << ADPS2) |( 1 << ADPS1) |( 1 << ADPS0) ;
   \   00000006   EA27               LDI     R18, 167
   \   00000008   B926               OUT     0x06, R18
     39            
     40            ADCSR |= ( 1 << ADIE);
   \   0000000A   9A33               SBI     0x06, 0x03
     41            ADCSR |= ( 1 << ADSC);
   \   0000000C   9A36               SBI     0x06, 0x06
     42            
     43            __enable_interrupt();
   \   0000000E   9478               SEI
     44          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_ADCSR
   \   00000012                      REQUIRE _A_ADMUX
     45          
     46          

   \                                 In  segment CODE, align 2, keep-with-next
     47          Avr_adc::Avr_adc()
   \                     ??Avr_adc:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     48          {
   \   00000006   018D               MOVW    R17:R16, R27:R26
   \   00000008   ........           CALL    ??IAdcPort
   \   0000000C   ....               LDI     R16, LOW(??__vtbl)
   \   0000000E   ....               LDI     R17, (??__vtbl) >> 8
   \   00000010   930D               ST      X+, R16
   \   00000012   931C               ST      X, R17
   \   00000014   9711               SBIW    R27:R26, 1
     49          
     50            Init();
   \   00000016   018D               MOVW    R17:R16, R27:R26
   \   00000018   ....               RCALL   ??Init
     51            SetPrescaler(7);
   \   0000001A   E027               LDI     R18, 7
   \   0000001C   018D               MOVW    R17:R16, R27:R26
   \   0000001E   ....               RCALL   ??SetPrescaler
     52          }
   \   00000020   018D               MOVW    R17:R16, R27:R26
   \   00000022   91A9               LD      R26, Y+
   \   00000024   91B9               LD      R27, Y+
   \   00000026   9508               RET
     53          

   \                                 In  segment CODE, align 2, keep-with-next
     54          Avr_adc::~Avr_adc()
   \                     `?~Avr_adc`:
     55          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   2B09               OR      R16, R25
   \   0000000C   F059               BREQ    `?~Avr_adc_1`
     56          
     57          }
   \   0000000E   E020               LDI     R18, 0
   \   00000010   E030               LDI     R19, 0
   \   00000012   018C               MOVW    R17:R16, R25:R24
   \   00000014   ........           CALL    `?~IAdcPort`
   \   00000018   2F0A               MOV     R16, R26
   \   0000001A   FF00               SBRS    R16, 0
   \   0000001C   C003               RJMP    `?~Avr_adc_1`
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   ........           CALL    `??operator delete`
   \                     `?~Avr_adc_1`:
   \   00000024   E0E4               LDI     R30, 4
   \   00000026   ........           JMP     ?EPILOGUE_B4_L09
     58          

   \                                 In  segment CODE, align 2, keep-with-next
     59          unsigned char Avr_adc::isConverted(void)
   \                     ??isConverted:
     60          {
   \   00000000   0198               MOVW    R19:R18, R17:R16
     61            return isconv & 0x01;  
   \   00000002   ....               LDI     R30, LOW(isconv)
   \   00000004   ....               LDI     R31, (isconv) >> 8
   \   00000006   8100               LD      R16, Z
   \   00000008   7001               ANDI    R16, 0x01
   \   0000000A   9508               RET
     62          }
     63          

   \                                 In  segment CODE, align 2, keep-with-next
     64          unsigned short Avr_adc::GetAdc(void)
   \                     ??GetAdc:
     65          {
   \   00000000   01A8               MOVW    R21:R20, R17:R16
     66             unsigned short r;
     67            
     68            __disable_interrupt();
   \   00000002   94F8               CLI
     69             r = adc_result;
   \   00000004   9120....           LDS     R18, adc_result
   \   00000008   9130....           LDS     R19, (adc_result + 1)
   \   0000000C   0189               MOVW    R17:R16, R19:R18
     70             isconv = 0;
   \   0000000E   E020               LDI     R18, 0
   \   00000010   9320....           STS     isconv, R18
     71             __enable_interrupt();
   \   00000014   9478               SEI
     72             
     73             return r; 
   \   00000016   9508               RET
     74          }

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??ADC_conv_done??INTVEC 84`:
   \   00000054   ........           JMP     ??ADC_conv_done

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 Avr_adc *Avr_adc::new Avr_adc()
   \                     `??new Avr_adc`:
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F019               BREQ    `??new Avr_adc_1`
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   ....               RCALL   ??Avr_adc
   \   00000012   9508               RET
   \                     `??new Avr_adc_1`:
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9508               RET

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     ADC_conv_done()                    8      2
     Avr_adc::Avr_adc()                 2      2
       -> IAdcPort::IAdcPort()          2      2
       -> Avr_adc::Init()               2      2
       -> Avr_adc::SetPrescaler(unsigned char)
                                        2      2
     Avr_adc::GetAdc()                  0      2
     Avr_adc::Init()                    0      2
     Avr_adc::SetChannel(unsigned char)
                                        0      2
     Avr_adc::SetPrescaler(unsigned char)
                                        0      2
     Avr_adc::isConverted()             0      2
     Avr_adc::new Avr_adc()             0      2
       -> operator new(size_t)          0      2
       -> Avr_adc::Avr_adc()            0      2
     Avr_adc::~Avr_adc()                4      2
       -> IAdcPort::~IAdcPort()         4      2
       -> operator delete(void *)       4      2
     IAdcPort::IAdcPort()               0      2
     IAdcPort::~IAdcPort()              2      2
       -> operator delete(void *)       2      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     IAdcPort::IAdcPort()              2
     IAdcPort::~IAdcPort()            30
     _A_ADC                            2
     _A_ADCSR                          1
     _A_ADMUX                          1
     adc_result                        2
     isconv                            1
     ADC_conv_done()                  80
     Avr_adc::SetChannel(unsigned char)
                                      18
     Avr_adc::SetPrescaler(unsigned char)
                                      18
     Avr_adc::Init()                  18
     Avr_adc::Avr_adc()               40
     Avr_adc::~Avr_adc()              42
     Avr_adc::isConverted()           12
     Avr_adc::GetAdc()                24
     ??ADC_conv_done??INTVEC 84        4
     Avr_adc::new Avr_adc()           26
      Others                          13

 
   4 bytes in segment ABSOLUTE
 310 bytes in segment CODE
   7 bytes in segment INITTAB
   4 bytes in segment INTVEC
   6 bytes in segment NEAR_F
   3 bytes in segment NEAR_Z
 
 278 bytes of CODE memory (+ 49 bytes shared)
   3 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: 1
