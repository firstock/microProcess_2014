###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    20/Dec/2013  10:32:43 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_spi.cpp        #
#    Command line =  C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_spi.cpp        #
#                    --cpu=m128 -ms -o C:\work\ATmega128_Debug\Obj\ -D        #
#                    xNDEBUG -D xWATCHDOG_ENABLE -lC                          #
#                    C:\work\ATmega128_Debug\List\ -y                         #
#                    --initializers_in_flash -z2 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --cross_call_passes=2 --debug                  #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    C:\work\ -I C:\work/TIEL_FrameWork/Basic_Component\ -I   #
#                    C:\work/TIEL_FrameWork/BSP/MC_E02SMB_v1_3\ -I            #
#                    C:\work/TIEL_FrameWork/Common\ -I                        #
#                    C:\work/TIEL_FrameWork/Configuration\ -I                 #
#                    C:\work/TIEL_FrameWork/CPU/AVR_Driver\ -I                #
#                    C:\work/TIEL_FrameWork/Driver_Interface\ -I              #
#                    C:\work/TIEL_FrameWork/Drivers\ -I                       #
#                    C:\work/TIEL_FrameWork/Service\ -I                       #
#                    C:\work/TIEL_FrameWork/System\ -I                        #
#                    C:\work/TIEL_FrameWork/Test\ -I                          #
#                    C:\work/TIEL_FrameWork/Utils\ -I C:\work/BUILD_COUNT\    #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.4\avr\INC\DLIB\" --eeprom_size 4096 --eec++  #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"          #
#    List file    =  C:\work\ATmega128_Debug\List\avr_spi.lst                 #
#    Object file  =  C:\work\ATmega128_Debug\Obj\avr_spi.r90                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_spi.cpp
      1          #include "avr_spi.h"

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 ISpi::ISpi()
   \                     ??ISpi:
   \   00000000   9508               RET
      2          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x2d
   \   <__C13> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   <__C14> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f
   \   <__C15> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   <__C23> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1
      3          #include <assert.h>
      4          
      5          #define PORT_SS_NUM 4
      6          #define PORT_MOSI_NUM 5
      7          #define PORT_MISO_NUM 6
      8          #define PORT_SCK_NUM  7
      9          #define SPI_DDR       DDRB 
     10          
     11          // bit number of SPI control register
     12          #define SPI_SPE       6
     13          #define SPI_MSTR      4
     14          #define SPI_SPR0      0
     15          #define SPI_SPI2X     0
     16          #define SPI_SPIF      7
     17          

   \                                 In  segment CODE, align 2, keep-with-next
     18          AvrSpi::AvrSpi(void)
   \                     ??AvrSpi:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     19          {
   \   00000006   018D               MOVW    R17:R16, R27:R26
   \   00000008   ........           CALL    ??ISpi
   \   0000000C   ....               LDI     R16, LOW(??__vtbl)
   \   0000000E   ....               LDI     R17, (??__vtbl) >> 8
   \   00000010   930D               ST      X+, R16
   \   00000012   931C               ST      X, R17
   \   00000014   9711               SBIW    R27:R26, 1
     20            Init();
   \   00000016   018D               MOVW    R17:R16, R27:R26
   \   00000018   ....               RCALL   ??Init
     21          }
   \   0000001A   018D               MOVW    R17:R16, R27:R26
   \   0000001C   91A9               LD      R26, Y+
   \   0000001E   91B9               LD      R27, Y+
   \   00000020   9508               RET
     22          

   \                                 In  segment CODE, align 2, keep-with-next
     23          void AvrSpi::AvrSpi::Init(void)
   \                     ??Init:
     24          {
     25          
     26            SPI_DDR |= (1 << PORT_MOSI_NUM) | (1 << PORT_SCK_NUM) | ( 1 << PORT_SS_NUM);
   \   00000000   B327               IN      R18, 0x17
   \   00000002   6B20               ORI     R18, 0xB0
   \   00000004   BB27               OUT     0x17, R18
     27          
     28            SPCR = (1 << SPI_SPE) | (1 << SPI_MSTR) | (1 << SPI_SPR0) ;//|  (1<<2);
   \   00000006   E521               LDI     R18, 81
   \   00000008   B92D               OUT     0x0D, R18
     29            SPSR |= 1 << SPI_SPI2X;
   \   0000000A   9A70               SBI     0x0E, 0x00
     30          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_SPCR
   \   0000000E                      REQUIRE _A_SPSR
   \   0000000E                      REQUIRE _A_DDRB
     31          
     32            

   \                                 In  segment CODE, align 2, keep-with-next
     33          unsigned char AvrSpi::WriteByte(unsigned char _byte)
   \                     ??WriteByte:
     34          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
     35            assert( (1 << PORT_MOSI_NUM ) & SPI_DDR);
   \   00000008   99BD               SBIC    0x17, 0x05
   \   0000000A   C00A               RJMP    ??WriteByte_1
   \   0000000C   E243               LDI     R20, 35
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000012   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000014   ....               LDI     R16, LOW(`?<Constant "(1 << PORT_MOSI_NUM )...">`)
   \   00000016   ....               LDI     R17, (`?<Constant "(1 << PORT_MOSI_NUM )...">`) >> 8
   \   00000018   ........           CALL    __taabi_assert
   \   0000001C   ........           CALL    __iar_EmptyStepPoint
     36            assert( (1 << PORT_SCK_NUM ) & SPI_DDR);
   \                     ??WriteByte_1:
   \   00000020   99BF               SBIC    0x17, 0x07
   \   00000022   C00A               RJMP    ??WriteByte_2
   \   00000024   E244               LDI     R20, 36
   \   00000026   E050               LDI     R21, 0
   \   00000028   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   0000002A   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   0000002C   ....               LDI     R16, LOW(`?<Constant "(1 << PORT_SCK_NUM ) ...">`)
   \   0000002E   ....               LDI     R17, (`?<Constant "(1 << PORT_SCK_NUM ) ...">`) >> 8
   \   00000030   ........           CALL    __taabi_assert
   \   00000034   ........           CALL    __iar_EmptyStepPoint
     37            
     38            assert( (1 << SPI_SPE ) & SPCR);
   \                     ??WriteByte_2:
   \   00000038   996E               SBIC    0x0D, 0x06
   \   0000003A   C00A               RJMP    ??WriteByte_3
   \   0000003C   E246               LDI     R20, 38
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000042   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000044   ....               LDI     R16, LOW(`?<Constant "(1 << SPI_SPE ) & SPCR">`)
   \   00000046   ....               LDI     R17, (`?<Constant "(1 << SPI_SPE ) & SPCR">`) >> 8
   \   00000048   ........           CALL    __taabi_assert
   \   0000004C   ........           CALL    __iar_EmptyStepPoint
     39            assert( (1 << SPI_MSTR ) & SPCR);
   \                     ??WriteByte_3:
   \   00000050   996C               SBIC    0x0D, 0x04
   \   00000052   C00A               RJMP    ??WriteByte_4
   \   00000054   E247               LDI     R20, 39
   \   00000056   E050               LDI     R21, 0
   \   00000058   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   0000005A   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   0000005C   ....               LDI     R16, LOW(`?<Constant "(1 << SPI_MSTR ) & SPCR">`)
   \   0000005E   ....               LDI     R17, (`?<Constant "(1 << SPI_MSTR ) & SPCR">`) >> 8
   \   00000060   ........           CALL    __taabi_assert
   \   00000064   ........           CALL    __iar_EmptyStepPoint
     40            assert( (1 << SPI_SPR0 ) & SPCR);
   \                     ??WriteByte_4:
   \   00000068   9968               SBIC    0x0D, 0x00
   \   0000006A   C00A               RJMP    ??WriteByte_5
   \   0000006C   E248               LDI     R20, 40
   \   0000006E   E050               LDI     R21, 0
   \   00000070   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000072   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000074   ....               LDI     R16, LOW(`?<Constant "(1 << SPI_SPR0 ) & SPCR">`)
   \   00000076   ....               LDI     R17, (`?<Constant "(1 << SPI_SPR0 ) & SPCR">`) >> 8
   \   00000078   ........           CALL    __taabi_assert
   \   0000007C   ........           CALL    __iar_EmptyStepPoint
     41            
     42            SPDR = _byte;
   \                     ??WriteByte_5:
   \   00000080   B98F               OUT     0x0F, R24
     43           while(!(SPSR & (1<<SPI_SPIF)));
   \                     ??WriteByte_6:
   \   00000082   9B77               SBIS    0x0E, 0x07
   \   00000084   CFFE               RJMP    ??WriteByte_6
     44            
     45            return SPDR;
   \   00000086   B10F               IN      R16, 0x0F
   \   00000088   E0E4               LDI     R30, 4
   \   0000008A   ........           JMP     ?EPILOGUE_B4_L09
   \   0000008E                      REQUIRE _A_SPCR
   \   0000008E                      REQUIRE _A_SPSR
   \   0000008E                      REQUIRE _A_SPDR
   \   0000008E                      REQUIRE _A_DDRB
     46          }
     47            

   \                                 In  segment CODE, align 2, keep-with-next
     48          unsigned char AvrSpi::ReadByte(unsigned char _byte)
   \                     ??ReadByte:
     49          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
     50            
     51            assert( (1 << PORT_MOSI_NUM ) & SPI_DDR);
   \   00000008   99BD               SBIC    0x17, 0x05
   \   0000000A   C00A               RJMP    ??ReadByte_1
   \   0000000C   E343               LDI     R20, 51
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000012   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000014   ....               LDI     R16, LOW(`?<Constant "(1 << PORT_MOSI_NUM )...">`)
   \   00000016   ....               LDI     R17, (`?<Constant "(1 << PORT_MOSI_NUM )...">`) >> 8
   \   00000018   ........           CALL    __taabi_assert
   \   0000001C   ........           CALL    __iar_EmptyStepPoint
     52            assert( (1 << PORT_SCK_NUM ) & SPI_DDR);
   \                     ??ReadByte_1:
   \   00000020   99BF               SBIC    0x17, 0x07
   \   00000022   C00A               RJMP    ??ReadByte_2
   \   00000024   E344               LDI     R20, 52
   \   00000026   E050               LDI     R21, 0
   \   00000028   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   0000002A   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   0000002C   ....               LDI     R16, LOW(`?<Constant "(1 << PORT_SCK_NUM ) ...">`)
   \   0000002E   ....               LDI     R17, (`?<Constant "(1 << PORT_SCK_NUM ) ...">`) >> 8
   \   00000030   ........           CALL    __taabi_assert
   \   00000034   ........           CALL    __iar_EmptyStepPoint
     53            
     54            assert( (1 << SPI_SPE ) & SPCR);
   \                     ??ReadByte_2:
   \   00000038   996E               SBIC    0x0D, 0x06
   \   0000003A   C00A               RJMP    ??ReadByte_3
   \   0000003C   E346               LDI     R20, 54
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000042   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000044   ....               LDI     R16, LOW(`?<Constant "(1 << SPI_SPE ) & SPCR">`)
   \   00000046   ....               LDI     R17, (`?<Constant "(1 << SPI_SPE ) & SPCR">`) >> 8
   \   00000048   ........           CALL    __taabi_assert
   \   0000004C   ........           CALL    __iar_EmptyStepPoint
     55            assert( (1 << SPI_MSTR ) & SPCR);
   \                     ??ReadByte_3:
   \   00000050   996C               SBIC    0x0D, 0x04
   \   00000052   C00A               RJMP    ??ReadByte_4
   \   00000054   E347               LDI     R20, 55
   \   00000056   E050               LDI     R21, 0
   \   00000058   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   0000005A   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   0000005C   ....               LDI     R16, LOW(`?<Constant "(1 << SPI_MSTR ) & SPCR">`)
   \   0000005E   ....               LDI     R17, (`?<Constant "(1 << SPI_MSTR ) & SPCR">`) >> 8
   \   00000060   ........           CALL    __taabi_assert
   \   00000064   ........           CALL    __iar_EmptyStepPoint
     56            assert( (1 << SPI_SPR0 ) & SPCR);
   \                     ??ReadByte_4:
   \   00000068   9968               SBIC    0x0D, 0x00
   \   0000006A   C00A               RJMP    ??ReadByte_5
   \   0000006C   E348               LDI     R20, 56
   \   0000006E   E050               LDI     R21, 0
   \   00000070   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000072   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000074   ....               LDI     R16, LOW(`?<Constant "(1 << SPI_SPR0 ) & SPCR">`)
   \   00000076   ....               LDI     R17, (`?<Constant "(1 << SPI_SPR0 ) & SPCR">`) >> 8
   \   00000078   ........           CALL    __taabi_assert
   \   0000007C   ........           CALL    __iar_EmptyStepPoint
     57            SPDR = _byte;
   \                     ??ReadByte_5:
   \   00000080   B98F               OUT     0x0F, R24
     58            while (!(SPSR & (1<<SPI_SPIF) ));
   \                     ??ReadByte_6:
   \   00000082   9B77               SBIS    0x0E, 0x07
   \   00000084   CFFE               RJMP    ??ReadByte_6
     59            
     60            return SPDR;  
   \   00000086   B10F               IN      R16, 0x0F
   \   00000088   E0E4               LDI     R30, 4
   \   0000008A   ........           JMP     ?EPILOGUE_B4_L09
   \   0000008E                      REQUIRE _A_SPCR
   \   0000008E                      REQUIRE _A_SPSR
   \   0000008E                      REQUIRE _A_SPDR
   \   0000008E                      REQUIRE _A_DDRB
     61            
     62          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "(1 << PORT_MOSI_N`:
   \   00000000   31283C20203C       DC8 "(1 << PORT_MOSI_NUM ) & SPI_DDR"
   \              4F5054524D5F
   \              534F5F49554E
   \              204D20292026
   \              50535F494444
   \              0052        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "C:\\\\work\\\\TIEL_Fr`:
   \   00000000   3A43775C726F       DC8 "C:\\work\\TIEL_FrameWork\\CPU\\AVR_Driver\\avr_spi.cpp"
   \              5C6B49544C45
   \              465F6172656D
   \              6F576B72435C
   \              5550415C5256
   \              445F69726576
   \              5C7276615F72
   \              70732E697063
   \              0070        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "(1 << PORT_SCK_NU`:
   \   00000000   31283C20203C       DC8 "(1 << PORT_SCK_NUM ) & SPI_DDR"
   \              4F505452535F
   \              4B434E5F4D55
   \              292026205320
   \              4950445F5244
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "(1 << SPI_SPE ) &`:
   \   00000000   31283C20203C       DC8 "(1 << SPI_SPE ) & SPCR"
   \              50535F495053
   \              204520292026
   \              5053524300  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "(1 << SPI_MSTR ) `:
   \   00000000   31283C20203C       DC8 "(1 << SPI_MSTR ) & SPCR"
   \              50535F49534D
   \              525429202620
   \              532043500052

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "(1 << SPI_SPR0 ) `:
   \   00000000   31283C20203C       DC8 "(1 << SPI_SPR0 ) & SPCR"
   \              50535F495053
   \              305229202620
   \              532043500052

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "(1 << PORT_MOSI_NUM )...">`:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for <Constant "(1 << PORT_MOSI_N`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`:
   \   00000000                      DS8 50
   \   00000032                      REQUIRE `?<Initializer for <Constant "C:\\\\work\\\\TIEL_Fr`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "(1 << PORT_SCK_NUM ) ...">`:
   \   00000000                      DS8 31
   \   0000001F                      REQUIRE `?<Initializer for <Constant "(1 << PORT_SCK_NU`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "(1 << SPI_SPE ) & SPCR">`:
   \   00000000                      DS8 23
   \   00000017                      REQUIRE `?<Initializer for <Constant "(1 << SPI_SPE ) &`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "(1 << SPI_MSTR ) & SPCR">`:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for <Constant "(1 << SPI_MSTR ) `

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "(1 << SPI_SPR0 ) & SPCR">`:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for <Constant "(1 << SPI_SPR0 ) `

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 AvrSpi *AvrSpi::new AvrSpi()
   \                     `??new AvrSpi`:
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F019               BREQ    `??new AvrSpi_1`
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   ....               RCALL   ??AvrSpi
   \   00000012   9508               RET
   \                     `??new AvrSpi_1`:
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9508               RET

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     AvrSpi::AvrSpi()                   2      2
       -> ISpi::ISpi()                  2      2
       -> AvrSpi::Init()                2      2
     AvrSpi::Init()                     0      2
     AvrSpi::ReadByte(unsigned char)
                                        4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
     AvrSpi::WriteByte(unsigned char)
                                        4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
       -> __taabi_assert                4      2
       -> __iar_EmptyStepPoint          4      2
     AvrSpi::new AvrSpi()               0      2
       -> operator new(unsigned int)
                                        0      2
       -> AvrSpi::AvrSpi()              0      2
     ISpi::ISpi()                       0      2


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     ISpi::ISpi()                                      2
     _A_SPCR                                           1
     _A_SPSR                                           1
     _A_SPDR                                           1
     _A_DDRB                                           1
     AvrSpi::AvrSpi()                                 34
     AvrSpi::Init()                                   14
     AvrSpi::WriteByte(unsigned char)
                                                     142
     AvrSpi::ReadByte(unsigned char)
                                                     142
     ?<Initializer for <Constant "(1 << PORT_MOSI_N   32
     ?<Initializer for <Constant "C:\\work\\TIEL_Fr   50
     ?<Initializer for <Constant "(1 << PORT_SCK_NU   31
     ?<Initializer for <Constant "(1 << SPI_SPE ) &   23
     ?<Initializer for <Constant "(1 << SPI_MSTR )    24
     ?<Initializer for <Constant "(1 << SPI_SPR0 )    24
     ?<Constant "(1 << PORT_MOSI_NUM )...">           32
     ?<Constant "C:\\work\\TIEL_FrameWor...">         50
     ?<Constant "(1 << PORT_SCK_NUM ) ...">           31
     ?<Constant "(1 << SPI_SPE ) & SPCR">             23
     ?<Constant "(1 << SPI_MSTR ) & SPCR">            24
     ?<Constant "(1 << SPI_SPR0 ) & SPCR">            24
     AvrSpi::new AvrSpi()                             26
      Others                                          13

 
   4 bytes in segment ABSOLUTE
 360 bytes in segment CODE
   7 bytes in segment INITTAB
   6 bytes in segment NEAR_F
 184 bytes in segment NEAR_I
 184 bytes in segment NEAR_ID
 
 542 bytes of CODE memory (+ 15 bytes shared)
 184 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
