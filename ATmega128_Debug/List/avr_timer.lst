###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    20/Dec/2013  10:32:43 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_timer.cpp      #
#    Command line =  C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_timer.cpp      #
#                    --cpu=m128 -ms -o C:\work\ATmega128_Debug\Obj\ -D        #
#                    xNDEBUG -D xWATCHDOG_ENABLE -lC                          #
#                    C:\work\ATmega128_Debug\List\ -y                         #
#                    --initializers_in_flash -z2 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --cross_call_passes=2 --debug                  #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    C:\work\ -I C:\work/TIEL_FrameWork/Basic_Component\ -I   #
#                    C:\work/TIEL_FrameWork/BSP/MC_E02SMB_v1_3\ -I            #
#                    C:\work/TIEL_FrameWork/Common\ -I                        #
#                    C:\work/TIEL_FrameWork/Configuration\ -I                 #
#                    C:\work/TIEL_FrameWork/CPU/AVR_Driver\ -I                #
#                    C:\work/TIEL_FrameWork/Driver_Interface\ -I              #
#                    C:\work/TIEL_FrameWork/Drivers\ -I                       #
#                    C:\work/TIEL_FrameWork/Service\ -I                       #
#                    C:\work/TIEL_FrameWork/System\ -I                        #
#                    C:\work/TIEL_FrameWork/Test\ -I                          #
#                    C:\work/TIEL_FrameWork/Utils\ -I C:\work/BUILD_COUNT\    #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.4\avr\INC\DLIB\" --eeprom_size 4096 --eec++  #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"          #
#    List file    =  C:\work\ATmega128_Debug\List\avr_timer.lst               #
#    Object file  =  C:\work\ATmega128_Debug\Obj\avr_timer.r90                #
#                                                                             #
#                                                                             #
###############################################################################

C:\work\TIEL_FrameWork\CPU\AVR_Driver\avr_timer.cpp
      1          
      2          #include "avr_timer.h"

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 ITimer::ITimer()
   \                     ??ITimer:
   \   00000000   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 ITimer::~ITimer()
   \                     `?~ITimer`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2F08               MOV     R16, R24
   \   00000008   2B09               OR      R16, R25
   \   0000000A   F031               BREQ    `?~ITimer_1`
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   FF00               SBRS    R16, 0
   \   00000010   C003               RJMP    `?~ITimer_1`
   \   00000012   018C               MOVW    R17:R16, R25:R24
   \   00000014   ........           CALL    `??operator delete`
   \                     `?~ITimer_1`:
   \   00000018   9189               LD      R24, Y+
   \   0000001A   9199               LD      R25, Y+
   \   0000001C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 Avr_timer0::~Avr_timer0()
   \                     `?~Avr_timer0`:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   2B09               OR      R16, R25
   \   0000000C   F059               BREQ    `?~Avr_timer0_1`
   \   0000000E   E020               LDI     R18, 0
   \   00000010   E030               LDI     R19, 0
   \   00000012   018C               MOVW    R17:R16, R25:R24
   \   00000014   ........           CALL    `?~ITimer`
   \   00000018   2F0A               MOV     R16, R26
   \   0000001A   FF00               SBRS    R16, 0
   \   0000001C   C003               RJMP    `?~Avr_timer0_1`
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   ........           CALL    `??operator delete`
   \                     `?~Avr_timer0_1`:
   \   00000024   E0E4               LDI     R30, 4
   \   00000026   ........           JMP     ?EPILOGUE_B4_L09
      3          #include "avr_common.h"
      4          
      5          #include <ioavr.h> 

   \                                 In  segment ABSOLUTE, at 0x43
   \   <__C34> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44
   \   <__C35> volatile __io _A_TCNT2
   \                     _A_TCNT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x45
   \   <__C36> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x57
   \   <__C50> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1
      6          #include <inavr.h>
      7          
      8          
      9          
     10          //static Avr_timer0 * timer0 = 0;
     11          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     12          volatile unsigned char timeout;
   \                     timeout:
   \   00000000                      DS8 1
     13          
     14          #if defined(__ATmega164P__) | defined(__ATmega164PA__)|defined(__ATmega324P__)
     15          #pragma vector = TIMER0_OVF_vect // for atmega164
     16          __interrupt void timer0_ovf(void)
     17          {
     18           //8ms @ 8Mhz
     19            
     20            timeout = 1;
     21          
     22          }
     23          #endif
     24          
     25          
     26          #if defined(__ATmega128__)
     27          
     28          #if AVR_TIMER == TIMER_0
     29          #pragma vector = TIMER0_COMP_vect
     30          #elif AVR_TIMER == TIMER_2
     31          #pragma vector = TIMER2_COMP_vect
     32          #endif

   \                                 In  segment CODE, align 2, keep-with-next
     33          __interrupt void timer_cmp(void)
   \                     ??timer_cmp:
     34          {
   \   00000000   932A               ST      -Y, R18
   \   00000002   931A               ST      -Y, R17
   \   00000004   930A               ST      -Y, R16
   \   00000006   B71F               IN      R17, 0x3F
   \   00000008   B72B               IN      R18, 0x3B
     35           //10ms @ 16Mhz
     36            
     37            timeout = 1;
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   9300....           STS     timeout, R16
     38           
     39          
     40          }
   \   00000010   BF2B               OUT     0x3B, R18
   \   00000012   BF1F               OUT     0x3F, R17
   \   00000014   9109               LD      R16, Y+
   \   00000016   9119               LD      R17, Y+
   \   00000018   9129               LD      R18, Y+
   \   0000001A   9518               RETI
     41          
     42          #endif
     43          
     44          

   \                                 In  segment CODE, align 2, keep-with-next
     45          Avr_timer0::Avr_timer0(void)
   \                     ??Avr_timer0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     46          {
   \   00000006   018D               MOVW    R17:R16, R27:R26
   \   00000008   ........           CALL    ??ITimer
   \   0000000C   ....               LDI     R16, LOW(??__vtbl)
   \   0000000E   ....               LDI     R17, (??__vtbl) >> 8
   \   00000010   930D               ST      X+, R16
   \   00000012   931C               ST      X, R17
   \   00000014   9711               SBIW    R27:R26, 1
     47            timeout=0;
   \   00000016   E000               LDI     R16, 0
   \   00000018   9300....           STS     timeout, R16
     48            Init();
   \   0000001C   018D               MOVW    R17:R16, R27:R26
   \   0000001E   ....               RCALL   ??Init
     49           
     50          }
   \   00000020   018D               MOVW    R17:R16, R27:R26
   \   00000022   91A9               LD      R26, Y+
   \   00000024   91B9               LD      R27, Y+
   \   00000026   9508               RET
     51          
     52          
     53          #define TICKS_PER_SEC 100 //10ms
     54          //#define TICKS_PER_SEC 1000 //1ms
     55          

   \                                 In  segment CODE, align 2, keep-with-next
     56          void Avr_timer0::Init(void)
   \                     ??Init:
     57          {
     58          #if defined(__ATmega164P__) | defined(__ATmega164PA__)|defined(__ATmega324P__)
     59              TIMSK0 |= (1 << TOIE0);  //8ms @ 8Mhz
     60              TCCR0B |= (1 << CS02); //8ms @ 8Mhz
     61          #endif 
     62              
     63          #if defined(__ATmega128__)
     64          #if AVR_TIMER == TIMER_0    
     65                 TCCR0 =  ( 1 << WGM01) | ( 1 << CS02) | ( 1 << CS01) | (1 << CS00); //1024
     66                 OCR0 = (F_CPU/TICKS_PER_SEC/1024) - 1;   
     67                 TCNT0 = 0x00;   
     68                 TIMSK |= ( 1 << OCIE0); 
     69          #elif AVR_TIMER == TIMER_2
     70                 TCCR2 =  ( 1 << WGM21) | ( 1 << CS22) | (1 << CS20); //1024
   \   00000000   E02D               LDI     R18, 13
   \   00000002   BD25               OUT     0x25, R18
     71                 OCR2 = (F_CPU/TICKS_PER_SEC/1024) - 1;   
   \   00000004   E92B               LDI     R18, 155
   \   00000006   BD23               OUT     0x23, R18
     72                 TCNT2 = 0x00;   
   \   00000008   E020               LDI     R18, 0
   \   0000000A   BD24               OUT     0x24, R18
     73                 TIMSK |= ( 1 << OCIE2); 
   \   0000000C   B727               IN      R18, 0x37
   \   0000000E   6820               ORI     R18, 0x80
   \   00000010   BF27               OUT     0x37, R18
     74          #endif       
     75          #endif
     76          
     77             __enable_interrupt();
   \   00000012   9478               SEI
     78          
     79          #if defined(__ATmega164P__) | defined(__ATmega164PA__)| defined(__ATmega324P__)
     80              
     81          #endif
     82             
     83          #if defined(__ATmega128__)
     84              
     85          #endif    
     86              // set prescaler to 256 and start the timer
     87              
     88            
     89          }
   \   00000014   9508               RET
   \   00000016                      REQUIRE _A_TCNT2
   \   00000016                      REQUIRE _A_TCCR2
   \   00000016                      REQUIRE _A_OCR2
   \   00000016                      REQUIRE _A_TIMSK
     90            

   \                                 In  segment CODE, align 2, keep-with-next
     91          unsigned short Avr_timer0::GetTimeOutMS(void)
   \                     ??GetTimeOutMS:
     92          {
   \   00000000   0198               MOVW    R19:R18, R17:R16
     93          #if defined(__ATmega164P__) | defined(__ATmega164PA__)| defined(__ATmega324P__)  
     94            return 8; //8ms
     95          #endif
     96            
     97          #if defined(__ATmega128__)
     98            return 10; //10ms    
   \   00000002   E00A               LDI     R16, 10
   \   00000004   E010               LDI     R17, 0
   \   00000006   9508               RET
     99          #endif   
    100            
    101          }
    102          
    103          
    104          

   \                                 In  segment CODE, align 2, keep-with-next
    105          char Avr_timer0::isTimeOut(void)
   \                     ??isTimeOut:
    106          {
   \   00000000   0198               MOVW    R19:R18, R17:R16
    107            
    108            if(timeout)
   \   00000002   9100....           LDS     R16, timeout
   \   00000006   2300               TST     R16
   \   00000008   F029               BREQ    ??isTimeOut_1
    109            {
    110              timeout = 0;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     timeout, R16
    111              return 1;
   \   00000010   E001               LDI     R16, 1
   \   00000012   9508               RET
    112            }
    113            
    114            return 0;
   \                     ??isTimeOut_1:
   \   00000014   E000               LDI     R16, 0
   \   00000016   9508               RET
    115          }

   \                                 In  segment INTVEC, offset 0x24, root
   \                     `??timer_cmp??INTVEC 36`:
   \   00000024   ........           JMP     ??timer_cmp

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 Avr_timer0 *Avr_timer0::new Avr_timer0()
   \                     `??new Avr_timer0`:
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F019               BREQ    `??new Avr_timer0_1`
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   ....               RCALL   ??Avr_timer0
   \   00000012   9508               RET
   \                     `??new Avr_timer0_1`:
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9508               RET

   Maximum stack usage in bytes:

     Function                      CSTACK RSTACK
     --------                      ------ ------
     Avr_timer0::Avr_timer0()          2      2
       -> ITimer::ITimer()             2      2
       -> Avr_timer0::Init()           2      2
     Avr_timer0::GetTimeOutMS()        0      2
     Avr_timer0::Init()                0      2
     Avr_timer0::isTimeOut()           0      2
     Avr_timer0::new Avr_timer0()      0      2
       -> operator new(size_t)         0      2
       -> Avr_timer0::Avr_timer0()     0      2
     Avr_timer0::~Avr_timer0()         4      2
       -> ITimer::~ITimer()            4      2
       -> operator delete(void *)      4      2
     ITimer::ITimer()                  0      2
     ITimer::~ITimer()                 2      2
       -> operator delete(void *)      2      2
     timer_cmp()                       3      2


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     ITimer::ITimer()                2
     ITimer::~ITimer()              30
     Avr_timer0::~Avr_timer0()      42
     _A_OCR2                         1
     _A_TCNT2                        1
     _A_TCCR2                        1
     _A_TIMSK                        1
     timeout                         1
     timer_cmp()                    28
     Avr_timer0::Avr_timer0()       40
     Avr_timer0::Init()             22
     Avr_timer0::GetTimeOutMS()      8
     Avr_timer0::isTimeOut()        24
     ??timer_cmp??INTVEC 36          4
     Avr_timer0::new Avr_timer0()   26
      Others                        15

 
   4 bytes in segment ABSOLUTE
 222 bytes in segment CODE
   7 bytes in segment INITTAB
   4 bytes in segment INTVEC
   8 bytes in segment NEAR_F
   1 byte  in segment NEAR_Z
 
 148 bytes of CODE memory (+ 93 bytes shared)
   1 byte  of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
