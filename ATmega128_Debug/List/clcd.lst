###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    20/Dec/2013  10:32:44 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  C:\work\TIEL_FrameWork\Drivers\clcd.cpp                  #
#    Command line =  C:\work\TIEL_FrameWork\Drivers\clcd.cpp --cpu=m128 -ms   #
#                    -o C:\work\ATmega128_Debug\Obj\ -D xNDEBUG -D            #
#                    xWATCHDOG_ENABLE -lC C:\work\ATmega128_Debug\List\ -y    #
#                    --initializers_in_flash -z2 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --cross_call_passes=2 --debug                  #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    C:\work\ -I C:\work/TIEL_FrameWork/Basic_Component\ -I   #
#                    C:\work/TIEL_FrameWork/BSP/MC_E02SMB_v1_3\ -I            #
#                    C:\work/TIEL_FrameWork/Common\ -I                        #
#                    C:\work/TIEL_FrameWork/Configuration\ -I                 #
#                    C:\work/TIEL_FrameWork/CPU/AVR_Driver\ -I                #
#                    C:\work/TIEL_FrameWork/Driver_Interface\ -I              #
#                    C:\work/TIEL_FrameWork/Drivers\ -I                       #
#                    C:\work/TIEL_FrameWork/Service\ -I                       #
#                    C:\work/TIEL_FrameWork/System\ -I                        #
#                    C:\work/TIEL_FrameWork/Test\ -I                          #
#                    C:\work/TIEL_FrameWork/Utils\ -I C:\work/BUILD_COUNT\    #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.4\avr\INC\DLIB\" --eeprom_size 4096 --eec++  #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"          #
#    List file    =  C:\work\ATmega128_Debug\List\clcd.lst                    #
#    Object file  =  C:\work\ATmega128_Debug\Obj\clcd.r90                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\work\TIEL_FrameWork\Drivers\clcd.cpp
      1          //////////////////////////////////////////////////////////////////////////////////////////
      2           
      3          // Project description
      4           
      5          // Author: Yoo Joo-Hyoung (potato97@naver.com)
      6           
      7          // Site: ccrs.hanyang.ac.kr
      8           
      9          // Copyright (C) 2013-2013 TIEF(TIEF is Embedded S/W Framework) Project.
     10           
     11          //
     12           
     13          //////////////////////////////////////////////////////////////////////////////////////////
     14          //
     15          //    License type: GNU General Public License (GPL)
     16          //      
     17          //    This program is free software: you can redistribute it and/or modify
     18          //    it under the terms of the GNU General Public License as published by
     19          //    the Free Software Foundation, either version 3 of the License, or
     20          //    (at your option) any later version.
     21          
     22          //    This program is distributed in the hope that it will be useful,
     23          //    but WITHOUT ANY WARRANTY; without even the implied warranty of
     24          //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     25          //    GNU General Public License for more details.
     26          
     27          //    You should have received a copy of the GNU General Public License
     28          //    along with this program.  If not, see <http://www.gnu.org/licenses/>.
     29          //
     30          //////////////////////////////////////////////////////////////////////////////////////////
     31          
     32          
     33          #include "clcd.h"

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void Clcd::Init()
   \                     ??Init:
   \   00000000   9508               RET
     34          #include <assert.h>
     35          

   \                                 In  segment CODE, align 2, keep-with-next
     36          Clcd::Clcd(void)
   \                     ??Clcd:
     37          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     38            Init();
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   ........           CALL    ??Init
     39          }
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   9189               LD      R24, Y+
   \   00000010   9199               LD      R25, Y+
   \   00000012   9508               RET
     40            

   \                                 In  segment CODE, align 2, keep-with-next
     41          unsigned char Clcd::Write(unsigned char _line,  char  *_string)
   \                     ??Write:
     42          {
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2E42               MOV     R4, R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
     43                
     44              SetInstruction(_line); //LCD 위치 지정
   \   0000000A   01FC               MOVW    R31:R30, R25:R24
   \   0000000C   8140               LD      R20, Z
   \   0000000E   8151               LDD     R21, Z+1
   \   00000010   5F4A               SUBI    R20, 250
   \   00000012   4F5F               SBCI    R21, 255
   \   00000014   2D24               MOV     R18, R4
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   01FA               MOVW    R31:R30, R21:R20
   \   0000001A   9145               LPM     R20, Z+
   \   0000001C   9154               LPM     R21, Z
   \   0000001E   9731               SBIW    R31:R30, 1
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   9509               ICALL
     45              assert( 0 != _string);
   \   00000024   2F0A               MOV     R16, R26
   \   00000026   2B0B               OR      R16, R27
   \   00000028   F451               BRNE    ??Write_2
   \   0000002A   E24D               LDI     R20, 45
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000030   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000032   ....               LDI     R16, LOW(`?<Constant "0 != _string">`)
   \   00000034   ....               LDI     R17, (`?<Constant "0 != _string">`) >> 8
   \   00000036   ........           CALL    __taabi_assert
   \   0000003A   ........           CALL    __iar_EmptyStepPoint
     46          
     47              while(*_string != '\0')
   \                     ??Write_2:
   \   0000003E   910C               LD      R16, X
   \   00000040   2300               TST     R16
   \   00000042   F079               BREQ    ??Write_3
     48              {
     49                  SetData(*_string);
   \   00000044   01FC               MOVW    R31:R30, R25:R24
   \   00000046   8140               LD      R20, Z
   \   00000048   8151               LDD     R21, Z+1
   \   0000004A   5F4C               SUBI    R20, 252
   \   0000004C   4F5F               SBCI    R21, 255
   \   0000004E   912C               LD      R18, X
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   01FA               MOVW    R31:R30, R21:R20
   \   00000054   9145               LPM     R20, Z+
   \   00000056   9154               LPM     R21, Z
   \   00000058   9731               SBIW    R31:R30, 1
   \   0000005A   01FA               MOVW    R31:R30, R21:R20
   \   0000005C   9509               ICALL
     50                  _string++;
   \   0000005E   9611               ADIW    R27:R26, 1
   \   00000060   CFEE               RJMP    ??Write_2
     51              }
     52              
     53              return 1;
   \                     ??Write_3:
   \   00000062   E001               LDI     R16, 1
   \   00000064   E0E5               LDI     R30, 5
   \   00000066   ........           JMP     ?EPILOGUE_B5_L09
     54            
     55          }

   \                                 In  segment CODE, align 2, keep-with-next
     56          unsigned char Clcd::Write(unsigned char _line, CONST  char  _string[])
   \                     ??Write_1:
     57          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F92               MOV     R25, R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
     58                unsigned char i =0;
   \   0000000A   E080               LDI     R24, 0
     59              SetInstruction(_line); //LCD 위치 지정
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8140               LD      R20, Z
   \   00000010   8151               LDD     R21, Z+1
   \   00000012   5F4A               SUBI    R20, 250
   \   00000014   4F5F               SBCI    R21, 255
   \   00000016   2F29               MOV     R18, R25
   \   00000018   018D               MOVW    R17:R16, R27:R26
   \   0000001A   01FA               MOVW    R31:R30, R21:R20
   \   0000001C   9145               LPM     R20, Z+
   \   0000001E   9154               LPM     R21, Z
   \   00000020   9731               SBIW    R31:R30, 1
   \   00000022   01FA               MOVW    R31:R30, R21:R20
   \   00000024   9509               ICALL
     60              assert( 0 != _string);
   \   00000026   2D04               MOV     R16, R4
   \   00000028   2905               OR      R16, R5
   \   0000002A   F451               BRNE    ??Write_4
   \   0000002C   E34C               LDI     R20, 60
   \   0000002E   E050               LDI     R21, 0
   \   00000030   ....               LDI     R18, LOW(`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`)
   \   00000032   ....               LDI     R19, (`?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`) >> 8
   \   00000034   ....               LDI     R16, LOW(`?<Constant "0 != _string">`)
   \   00000036   ....               LDI     R17, (`?<Constant "0 != _string">`) >> 8
   \   00000038   ........           CALL    __taabi_assert
   \   0000003C   ........           CALL    __iar_EmptyStepPoint
     61          
     62              while(_string[i] != '\0')
   \                     ??Write_4:
   \   00000040   2F08               MOV     R16, R24
   \   00000042   E010               LDI     R17, 0
   \   00000044   01F2               MOVW    R31:R30, R5:R4
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   9104               LPM     R16, Z
   \   0000004C   2300               TST     R16
   \   0000004E   F0A1               BREQ    ??Write_5
     63              {
     64                  SetData(_string[i]);
   \   00000050   914D               LD      R20, X+
   \   00000052   915C               LD      R21, X
   \   00000054   9711               SBIW    R27:R26, 1
   \   00000056   5F4C               SUBI    R20, 252
   \   00000058   4F5F               SBCI    R21, 255
   \   0000005A   2F08               MOV     R16, R24
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   01F2               MOVW    R31:R30, R5:R4
   \   00000060   0FE0               ADD     R30, R16
   \   00000062   1FF1               ADC     R31, R17
   \   00000064   9124               LPM     R18, Z
   \   00000066   018D               MOVW    R17:R16, R27:R26
   \   00000068   01FA               MOVW    R31:R30, R21:R20
   \   0000006A   9145               LPM     R20, Z+
   \   0000006C   9154               LPM     R21, Z
   \   0000006E   9731               SBIW    R31:R30, 1
   \   00000070   01FA               MOVW    R31:R30, R21:R20
   \   00000072   9509               ICALL
     65                  i++;
   \   00000074   9583               INC     R24
   \   00000076   CFE4               RJMP    ??Write_4
     66              }
     67              
     68              return 1;
   \                     ??Write_5:
   \   00000078   E001               LDI     R16, 1
   \   0000007A   E0E6               LDI     R30, 6
   \   0000007C   ........           JMP     ?EPILOGUE_B6_L09
     69            
     70          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0 != _string">>`:
   \   00000000   20303D215F20       DC8 "0 != _string"
   \              74736972676E
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "C:\\\\work\\\\TIEL_Fr`:
   \   00000000   3A43775C726F       DC8 "C:\\work\\TIEL_FrameWork\\Drivers\\clcd.cpp"
   \              5C6B49544C45
   \              465F6172656D
   \              6F576B72445C
   \              697265767372
   \              635C636C2E64
   \              70630070    

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "0 != _string">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "0 != _string">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "C:\\\\work\\\\TIEL_FrameWor...">`:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for <Constant "C:\\\\work\\\\TIEL_Fr`

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 Clcd *Clcd::new Clcd()
   \                     `??new Clcd`:
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F019               BREQ    `??new Clcd_1`
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   ....               RCALL   ??Clcd
   \   00000012   9508               RET
   \                     `??new Clcd_1`:
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9508               RET

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     Clcd::Clcd()                       2      2
       -> Clcd::Init()                  2      2
     Clcd::Init()                       0      2
     Clcd::Write(unsigned char, char *)
                                        5      2
       ->   Indirect call               5      2
       -> __taabi_assert                5      2
       -> __iar_EmptyStepPoint          5      2
       ->   Indirect call               5      2
     Clcd::Write(unsigned char, char __flash *)
                                        6      2
       ->   Indirect call               6      2
       -> __taabi_assert                6      2
       -> __iar_EmptyStepPoint          6      2
       ->   Indirect call               6      2
     Clcd::new Clcd()                   0      2
       -> operator new(unsigned int)
                                        0      2
       -> Clcd::Clcd()                  0      2


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     Clcd::Init()                                      2
     Clcd::Clcd()                                     20
     Clcd::Write(unsigned char, char *)
                                                     106
     Clcd::Write(unsigned char, char __flash *)
                                                     128
     ?<Initializer for <Constant "0 != _string">>     13
     ?<Initializer for <Constant "C:\\work\\TIEL_Fr   40
     ?<Constant "0 != _string">                       13
     ?<Constant "C:\\work\\TIEL_FrameWor...">         40
     Clcd::new Clcd()                                 26
      Others                                           7

 
 282 bytes in segment CODE
   7 bytes in segment INITTAB
  53 bytes in segment NEAR_I
  53 bytes in segment NEAR_ID
 
 333 bytes of CODE memory (+ 9 bytes shared)
  53 bytes of DATA memory

Errors: none
Warnings: none
