###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    02/Dec/2013  00:33:01 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\Work\IAR\TIEF_Framework\APP\Term_Project\CalClkFuncGe #
#                    n.cpp                                                    #
#    Command line =  D:\Work\IAR\TIEF_Framework\APP\Term_Project\CalClkFuncGe #
#                    n.cpp --cpu=m128 -ms -o D:\Work\IAR\TIEF_Framework\ATmeg #
#                    a128_Release\Obj\ -D NDEBUG -D xWATCHDOG_ENABLE -lC      #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ -y    #
#                    --initializers_in_flash -z9 --cross_call_passes=2        #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    D:\Work\IAR\TIEF_Framework\ -I                           #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Basic_Componen #
#                    t\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/BSP/MC_E #
#                    02SMB_v1_3\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork #
#                    /Common\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Co #
#                    nfiguration\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWor #
#                    k/CPU/AVR_Driver\ -I D:\Work\IAR\TIEF_Framework/TIEL_Fra #
#                    meWork/Driver_Interface\ -I                              #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Drivers\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Service\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/System\ -I     #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Test\ -I       #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Utils\ -I      #
#                    D:\Work\IAR\TIEF_Framework/BUILD_COUNT\ -I "C:\Program   #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\INC\" -I "C:\Program Files (x86)\IAR           #
#                    Systems\Embedded Workbench 5.4_0\avr\INC\DLIB\"          #
#                    --eeprom_size 4096 --eec++ --dlib_config "C:\Program     #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"                  #
#    List file    =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\CalClk #
#                    FuncGen.lst                                              #
#    Object file  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\CalClkF #
#                    uncGen.r90                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\IAR\TIEF_Framework\APP\Term_Project\CalClkFuncGen.cpp
      1          #include "CalClkFuncGen.h"
      2          #include <cstdio>
      3          #include <cstring>
      4          #include <cassert>
      5          
      6          

   \                                 In  segment CODE, align 2, keep-with-next
      7          CalClkFuncGen::CalClkFuncGen() //클래스 내부의 변수 초기화. 이 시점에서는 하드웨어를 사용할 수 없다
   \                     ??CalClkFuncGen:
      8          {
   \   00000000   ....               LDI     R18, LOW(??__vtbl)
   \   00000002   ....               LDI     R19, (??__vtbl) >> 8
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8F24               STD     Z+28, R18
   \   00000008   8F35               STD     Z+29, R19
      9            hour = 0;
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   8F20               STD     Z+24, R18
     10            min = 0;
   \   0000000E   8F21               STD     Z+25, R18
     11            sec = 0;
   \   00000010   8F22               STD     Z+26, R18
     12            
     13            serial_cnt = 0;
   \   00000012   8B27               STD     Z+23, R18
     14            
     15            mystate1 = RESET;
   \   00000014   8F23               STD     Z+27, R18
     16          }
   \   00000016   9508               RET
     17          

   \                                 In  segment CODE, align 2, keep-with-next
     18          CalClkFuncGen::~CalClkFuncGen()
   \                     `?~CalClkFuncGen`:
     19          {
   \   00000000   2F40               MOV     R20, R16
   \   00000002   2B41               OR      R20, R17
   \   00000004   F021               BREQ    `?~CalClkFuncGen_1`
   \   00000006   FF20               SBRS    R18, 0
   \   00000008   C002               RJMP    `?~CalClkFuncGen_1`
     20            
     21          }
   \   0000000A   ........           CALL    `??operator delete`
   \                     `?~CalClkFuncGen_1`:
   \   0000000E   9508               RET
     22          

   \                                 In  segment CODE, align 2, keep-with-next
     23          void CalClkFuncGen::Init(void)//이 함수의 호출 직후 부터 하드웨어 사용가능
   \                     ??Init:
     24          {
   \   00000000   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_0:
   \   00000002   01D8               MOVW    R27:R26, R17:R16
     25            mystate1 = USER_STATE1;
   \   00000004   E001               LDI     R16, 1
   \   00000006   2FEA               MOV     R30, R26
   \   00000008   2FF1               MOV     R31, R17
   \   0000000A   8F03               STD     Z+27, R16
     26            
     27            serial->Write("##Watch mode##\n");
   \   0000000C   8104               LDD     R16, Z+4
   \   0000000E   8115               LDD     R17, Z+5
   \   00000010   ....               LDI     R18, LOW(`?<Constant "##Watch mode##\\n">`)
   \   00000012   ....               LDI     R19, (`?<Constant "##Watch mode##\\n">`) >> 8
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   8140               LD      R20, Z
   \   00000018   81F1               LDD     R31, Z+1
   \   0000001A   2FE4               MOV     R30, R20
   \   0000001C   ....               RCALL   ?Subroutine3
     28            serial->Write("1. 현재 시간을 입력하세요\n");
   \                     ??CrossCallReturnLabel_6:
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   81A4               LDD     R26, Z+4
   \   00000022   81B5               LDD     R27, Z+5
   \   00000024   ....               LDI     R18, LOW((`?<Constant "##Watch mode##\\n">` + 16))
   \   00000026   ....               LDI     R19, HIGH((`?<Constant "##Watch mode##\\n">` + 16))
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   ....               RJMP    ??Subroutine5_0
     29          
     30          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FC               LD      R31, X
   \   00000004   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   00000006                      REQUIRE ?Subroutine4
   \   00000006                      ;               // Fall through to label ?Subroutine4

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   91A9               LD      R26, Y+
   \   00000002   91B9               LD      R27, Y+
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9632               ADIW    R31:R30, 2
   \   00000002   9145               LPM     R20, Z+
   \   00000004   91F4               LPM     R31, Z
   \   00000006   2FE4               MOV     R30, R20
   \   00000008   9409               IJMP
     31          

   \                                 In  segment CODE, align 2, keep-with-next
     32          void CalClkFuncGen::SetIStringOut(IStringOut * _lcd_line1, IStringOut * _lcd_line2, IStringOut * _serial)
   \                     ??SetIStringOut:
     33          {
     34            assert( 0 != _lcd_line1);
     35            assert( 0 != _lcd_line2);
     36            assert( 0 != _serial);
     37            
     38            lcd_line1 = _lcd_line1;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8320               ST      Z, R18
   \   00000004   8331               STD     Z+1, R19
     39            lcd_line2 = _lcd_line2;
   \   00000006   8342               STD     Z+2, R20
   \   00000008   8353               STD     Z+3, R21
     40            serial = _serial;
   \   0000000A   8364               STD     Z+4, R22
   \   0000000C   8375               STD     Z+5, R23
     41            
     42          }
   \   0000000E   9508               RET
     43          

   \                                 In  segment CODE, align 2, keep-with-next
     44          void CalClkFuncGen::SetPwm( IPwmOut * _pwm)
   \                     ??SetPwm:
     45          {
     46            assert( 0 != _pwm);
     47            
     48            pwm = _pwm;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8326               STD     Z+6, R18
   \   00000004   8337               STD     Z+7, R19
     49          }
   \   00000006   9508               RET
     50          
     51          //==============================================================================

   \                                 In  segment CODE, align 2, keep-with-next
     52          void CalClkFuncGen::Switch(void)// 스위치가 눌리때 마다 호출됨
   \                     ??Switch:
     53          {
   \   00000000   ....               RCALL   ?Subroutine2
     54            serial->Write("Switch\n");
   \                     ??CrossCallReturnLabel_1:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8104               LDD     R16, Z+4
   \   00000006   8115               LDD     R17, Z+5
   \   00000008   ....               LDI     R18, LOW(`?<Constant "Switch\\n">`)
   \   0000000A   ....               LDI     R19, (`?<Constant "Switch\\n">`) >> 8
   \   0000000C   ....               RJMP    ?Subroutine0
     55          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   01D8               MOVW    R27:R26, R17:R16
   \   00000002                      REQUIRE ?Subroutine4
   \   00000002                      REQUIRE ??Subroutine5_0
   \   00000002                      ;               // Fall through to label ??Subroutine5_0
     56          

   \                                 In  segment CODE, align 2, keep-with-next
     57          void CalClkFuncGen::InputCh(char _ch) // 시리얼로부터 입력이 들어 오면 실행됨
   \                     ??InputCh:
     58          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     59              if('\n' == _ch  || '\r' == _ch  || STRING_SIZE - 1 <= serial_cnt){
   \   00000006   302A               CPI     R18, 10
   \   00000008   F031               BREQ    ??InputCh_1
   \   0000000A   302D               CPI     R18, 13
   \   0000000C   F021               BREQ    ??InputCh_1
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   8907               LDD     R16, Z+23
   \   00000012   300E               CPI     R16, 14
   \   00000014   F098               BRCS    ??InputCh_2
     60                serialbuff[serial_cnt] = 0;
   \                     ??InputCh_1:
   \   00000016   E000               LDI     R16, 0
   \   00000018   2FE8               MOV     R30, R24
   \   0000001A   2FF1               MOV     R31, R17
   \   0000001C   8927               LDD     R18, Z+23
   \   0000001E   0FE2               ADD     R30, R18
   \   00000020   1FF0               ADC     R31, R16
   \   00000022   8700               STD     Z+8, R16
     61                serial_cnt = 0;
   \   00000024   2FE8               MOV     R30, R24
   \   00000026   2FF1               MOV     R31, R17
   \   00000028   8B07               STD     Z+23, R16
     62                
     63                lcd_line2->Write("        ");
   \   0000002A   ....               LDI     R18, LOW(`?<Constant "        ">`)
   \   0000002C   ....               LDI     R19, (`?<Constant "        ">`) >> 8
   \   0000002E   ....               RCALL   ?Subroutine1
     64                lcd_line2->Write(serialbuff);   
   \                     ??CrossCallReturnLabel_4:
   \   00000030   019C               MOVW    R19:R18, R25:R24
   \   00000032   5F28               SUBI    R18, 248
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   01FC               MOVW    R31:R30, R25:R24
   \   00000038   ....               RCALL   ?Subroutine1
     65            
     66                return;
   \                     ??CrossCallReturnLabel_5:
   \   0000003A   C008               RJMP    ??InputCh_3
     67              }
     68              
     69              serialbuff[serial_cnt] = _ch;    
   \                     ??InputCh_2:
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   0FE0               ADD     R30, R16
   \   00000040   1FF1               ADC     R31, R17
   \   00000042   8720               STD     Z+8, R18
     70              serial_cnt++;  
   \   00000044   01FC               MOVW    R31:R30, R25:R24
   \   00000046   8907               LDD     R16, Z+23
   \   00000048   9503               INC     R16
   \   0000004A   8B07               STD     Z+23, R16
     71          }
   \                     ??InputCh_3:
   \   0000004C   E0E4               LDI     R30, 4
   \   0000004E   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   91ED               LD      R30, X+
   \   00000008   91FC               LD      R31, X
   \   0000000A                      REQUIRE ?Subroutine3
   \   0000000A                      ;               // Fall through to label ?Subroutine3
     72          

   \                                 In  segment CODE, align 2, keep-with-next
     73          void CalClkFuncGen::InputAdc(unsigned short _v) //ADC 값이 주기적으로 들어옴
   \                     ??InputAdc:
     74          {
   \   00000000   ....               RCALL   ?Subroutine2
     75            pwm->SetDuty(_v);
   \                     ??CrossCallReturnLabel_2:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8106               LDD     R16, Z+6
   \   00000006   8117               LDD     R17, Z+7
   \   00000008   ....               RJMP    ?Subroutine0
     76          }
     77          

   \                                 In  segment CODE, align 2, keep-with-next
     78          void CalClkFuncGen::tm1s(void)// 1초 마다 실행됨
   \                     ??tm1s:
     79          {
   \   00000000   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   00000002   972F               SBIW    R29:R28, 15
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     80            char tmp[15];
     81            sec++;
   \   00000006   965A               ADIW    R27:R26, 26
   \   00000008   910C               LD      R16, X
   \   0000000A   9503               INC     R16
   \   0000000C   930C               ST      X, R16
     82            
     83            sprintf(tmp,"%02d:%02d:%02d",hour,min,sec);
   \   0000000E   E010               LDI     R17, 0
   \   00000010   931A               ST      -Y, R17
   \   00000012   930A               ST      -Y, R16
   \   00000014   910E               LD      R16, -X
   \   00000016   931A               ST      -Y, R17
   \   00000018   930A               ST      -Y, R16
   \   0000001A   910E               LD      R16, -X
   \   0000001C   9758               SBIW    R27:R26, 24
   \   0000001E   931A               ST      -Y, R17
   \   00000020   930A               ST      -Y, R16
   \   00000022   ....               LDI     R18, LOW(`?<Constant "%02d:%02d:%02d">`)
   \   00000024   ....               LDI     R19, (`?<Constant "%02d:%02d:%02d">`) >> 8
   \   00000026   018E               MOVW    R17:R16, R29:R28
   \   00000028   5F0A               SUBI    R16, 250
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   ........           CALL    sprintf
   \   00000030   9626               ADIW    R29:R28, 6
     84            
     85            lcd_line1->Write(tmp);
   \   00000032   019E               MOVW    R19:R18, R29:R28
   \   00000034   910D               LD      R16, X+
   \   00000036   911C               LD      R17, X
   \   00000038   9711               SBIW    R27:R26, 1
   \   0000003A   91ED               LD      R30, X+
   \   0000003C   91FC               LD      R31, X
   \   0000003E   8140               LD      R20, Z
   \   00000040   81F1               LDD     R31, Z+1
   \   00000042   2FE4               MOV     R30, R20
   \   00000044   ....               RCALL   ?Subroutine3
     86          }
   \                     ??CrossCallReturnLabel_7:
   \   00000046   962F               ADIW    R29:R28, 15
   \   00000048   ....               RJMP    ?Subroutine4
     87          

   \                                 In  segment CODE, align 2, keep-with-next
     88          void CalClkFuncGen::tm500ms(void) //0.5초마다 실행됨
   \                     ??tm500ms:
     89          {
     90            
     91          }
   \   00000000   9508               RET

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "##Watch mode##\\n"`:
   \   00000000   232361576374       DC8 "##Watch mode##\012"
   \              20686F6D6564
   \              2323000A    
   \                     `?<Initializer for <Constant "1. \\307\\366\\300\\3`:
   \   00000010   2E31C720C0F6       DC8 "1. \307\366\300\347 \275\303\260\243\300\273 \300\324\267\302\307\317\274\274\277\344\012"
   \              20E7C3BDA3B0
   \              BBC0C020B7D4
   \              C7C2BCCFBFBC
   \              0AE400      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Switch\\n">>`:
   \   00000000   775374696863       DC8 "Switch\012"
   \              000A        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "        ">>`:
   \   00000000   202020202020       DC8 "        "
   \              202000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%02d:%02d:%02d">>`:
   \   00000000   30256432253A       DC8 "%02d:%02d:%02d"
   \              32303A643025
   \              643200      

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "##Watch mode##\\n">`:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for <Constant "##Watch mode##\\n"`
   \   00000010                      DS8 27
   \   0000002B                      REQUIRE `?<Initializer for <Constant "1. \\307\\366\\300\\3`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "Switch\\n">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "Switch\\n">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "        ">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "        ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "%02d:%02d:%02d">`:
   \   00000000                      DS8 15
   \   0000000F                      REQUIRE `?<Initializer for <Constant "%02d:%02d:%02d">>`

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 CalClkFuncGen *CalClkFuncGen::new CalClkFuncGen()
   \                     `??new CalClkFuncGen`:
   \   00000000   E10E               LDI     R16, 30
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   2B21               OR      R18, R17
   \   0000000C   F009               BREQ    `??new CalClkFuncGen_1`
   \   0000000E   ....               RJMP    ??CalClkFuncGen
   \                     `??new CalClkFuncGen_1`:
   \   00000010   E000               LDI     R16, 0
   \   00000012   E010               LDI     R17, 0
   \   00000014   9508               RET
     92            

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     CalClkFuncGen::CalClkFuncGen()     0      2
     CalClkFuncGen::Init()              2      2
       ->   Indirect call               2      2
       ->   Indirect call               2      2
     CalClkFuncGen::InputAdc(unsigned short)
                                        2      2
       ->   Indirect call               2      2
     CalClkFuncGen::InputCh(char)       4      2
       ->   Indirect call               4      2
       ->   Indirect call               4      2
     CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
                                        0      2
     CalClkFuncGen::SetPwm(IPwmOut *)
                                        0      2
     CalClkFuncGen::Switch()            2      2
       ->   Indirect call               2      2
     CalClkFuncGen::new CalClkFuncGen()
                                        0      2
       -> operator new(unsigned int)
                                        0      2
       -> CalClkFuncGen::CalClkFuncGen()
                                        0      2
     CalClkFuncGen::tm1s()             23      2
       -> sprintf                      23      2
       ->   Indirect call              17      2
     CalClkFuncGen::tm500ms()           0      2
     CalClkFuncGen::~CalClkFuncGen()
                                        0      2
       -> operator delete(void *)       0      2


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     CalClkFuncGen::CalClkFuncGen()                   24
     CalClkFuncGen::~CalClkFuncGen()
                                                      16
     CalClkFuncGen::Init()                            44
     ?Subroutine2                                      6
     ??Subroutine5_0                                   6
     ?Subroutine4                                      6
     ?Subroutine3                                     10
     CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
                                                      16
     CalClkFuncGen::SetPwm(IPwmOut *)
                                                       8
     CalClkFuncGen::Switch()                          14
     ?Subroutine0                                      2
     CalClkFuncGen::InputCh(char)                     82
     ?Subroutine1                                     10
     CalClkFuncGen::InputAdc(unsigned short)
                                                      10
     CalClkFuncGen::tm1s()                            74
     CalClkFuncGen::tm500ms()                          2
     ?<Initializer for <Constant "##Watch mode##\n"   43
     ?<Initializer for <Constant "Switch\n">>          8
     ?<Initializer for <Constant "        ">>          9
     ?<Initializer for <Constant "%02d:%02d:%02d">>   15
     ?<Constant "##Watch mode##\n">                   43
     ?<Constant "Switch\n">                            8
     ?<Constant "        ">                            9
     ?<Constant "%02d:%02d:%02d">                     15
     CalClkFuncGen::new CalClkFuncGen()
                                                      22
      Others                                           9

 
 352 bytes in segment CODE
   7 bytes in segment INITTAB
   2 bytes in segment NEAR_F
  75 bytes in segment NEAR_I
  75 bytes in segment NEAR_ID
 
 427 bytes of CODE memory (+ 9 bytes shared)
  75 bytes of DATA memory

Errors: none
Warnings: none
