################################################################################
#                                                                              #
#      IAR Universal Linker V4.61L/W32                                         #
#                                                                              #
#           Link time     =  02/Dec/2013  00:33:08                             #
#           Target CPU    =  A90                                               #
#           List file     =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List #
#                            \TIEF.map                                         #
#           Output file 1 =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Exe\ #
#                            TIEF.d90                                          #
#                            Format: debug                                     #
#                            UBROF version 10.0.2                              #
#                            Using library modules for C-SPY (-r)              #
#           Command line  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            ANSI200.r90                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            BCComponentManager.r90                            #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            CalClkFuncGen.r90                                 #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            DriverFactory.r90                                 #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            MC_E02SMB_v1_3DriverFactory.r90                   #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            Power_Manager.r90                                 #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            StdConsole.r90                                    #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            System_Info.r90                                   #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            System_Manager.r90                                #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            System_main.r90                                   #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            Term_Project_s.r90                                #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            TimerManager.r90                                  #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            adc.r90                                           #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_WatchDog.r90                                  #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_adc.r90                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_common.r90                                    #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_nv_ram.r90                                    #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_pwm.r90                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_sleep.r90                                     #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_spi.r90                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_timer.r90                                     #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            avr_uart.r90                                      #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            clcd.r90                                          #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            clcd_adaptor.r90                                  #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            dac7512.r90                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            dio.r90                                           #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            dio_adaptor.r90                                   #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            led.r90                                           #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            mcp3204.r90                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            pwm.r90                                           #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            ringbuffer.r90                                    #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            serialIO.r90                                      #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            split2.r90                                        #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            terminal_service.r90                              #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            type.r90                                          #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ #
#                            xmodem.r90                                        #
#                            -o                                                #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\Exe\ #
#                            TIEF.d90                                          #
#                            -B -z -G -l                                       #
#                            D:\Work\IAR\TIEF_Framework\ATmega128_Release\List #
#                            \TIEF.map                                         #
#                            -xmsnio                                           #
#                            "-IC:\Program Files (x86)\IAR Systems\Embedded Wo #
#                            rkbench 5.4_0\avr\LIB\"                           #
#                            -f                                                #
#                            "C:\Program Files (x86)\IAR Systems\Embedded Work #
#                            bench 5.4_0\avr\src\template\cfgm128.xcl"         #
#                            (-D_..X_INTVEC_SIZE=8C -D_..X_FLASH_NEND=FFFF     #
#                            -D_..X_FLASH_END=1FFFF -D_..X_SRAM_BASE=100       #
#                            -D_..X_SRAM_TBASE=0 -D_..X_SRAM_TSIZE=0           #
#                            -D_..X_SRAM_END=10FF -D_..X_EEPROM_END=FFF        #
#                            -D_..X_EEPROM_START=0) -D_..X_HEAP_SIZE=0         #
#                            -D_..X_TINY_HEAP_SIZE=0                           #
#                            -D_..X_NEAR_HEAP_SIZE=260                         #
#                            -D_..X_FAR_HEAP_SIZE=0 -D_..X_HUGE_HEAP_SIZE=0    #
#                            -D_..X_CSTACK_SIZE=2C0 -D_..X_RSTACK_SIZE=40 -f   #
#                            "C:\Program Files (x86)\IAR Systems\Embedded Work #
#                            bench 5.4_0\avr\src\template\cfg3soim.xcl"        #
#                            (-ca90 -w29                                       #
#                            -Z(CODE)INTVEC=0-(_..X_INTVEC_SIZE-1)             #
#                            -Z(CODE)TINY_F=_..X_FLASH_BASE-FF                 #
#                            -Z(CODE)NEAR_F=_..X_FLASH_BASE-_..X_FLASH_NEND    #
#                            -Z(CODE)SWITCH=_..X_FLASH_BASE-_..X_FLASH_NEND    #
#                            -Z(CODE)DIFUNCT=_..X_FLASH_BASE-_..X_FLASH_NEND   #
#                            -Z(CODE)CODE=_..X_FLASH_BASE-_..X_FLASH_END       #
#                            -Z(CODE)FAR_F=[_..X_FLASH_BASE-_..X_FLASH_END]/10 #
#                            000                                               #
#                            -Z(CODE)INITTAB=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)HUGE_F=_..X_FLASH_BASE-_..X_FLASH_END     #
#                            -Z(CODE)TINY_ID=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)NEAR_ID=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)CHECKSUM#_..X_FLASH_END                   #
#                            -Z(DATA)TINY_I,TINY_Z,TINY_N=_..X_SRAM_TBASE:+_.. #
#                            X_SRAM_TSIZE                                      #
#                            -Z(DATA)CSTACK+_..X_CSTACK_SIZE=_..X_CSTACK_BASE- #
#                            _..X_CSTACK_END                                   #
#                            -Z(DATA)HEAP+_..X_HEAP_SIZE=_..X_SRAM_BASE-_..X_S #
#                            RAM_END                                           #
#                            -Z(DATA)IOSTREAM_N#_..X_SRAM_BASE-_..X_SRAM_END   #
#                            -Z(DATA)NEAR_HEAP+_..X_NEAR_HEAP_SIZE=_..X_SRAM_B #
#                            ASE-_..X_SRAM_END                                 #
#                            -Z(DATA)RSTACK+_..X_RSTACK_SIZE=_..X_RSTACK_BASE- #
#                            _..X_RSTACK_END                                   #
#                            -Z(DATA)NEAR_I,NEAR_Z,NEAR_N=_..X_SRAM_BASE-_..X_ #
#                            SRAM_END                                          #
#                            -Z(XDATA)EEPROM_I,EEPROM_N=_..X_EEPROM_START-_..X #
#                            _EEPROM_END)                                      #
#                            -D_..X_FLASH_BASE=_..X_INTVEC_SIZE -H1895         #
#                            -h(CODE)0-(_..X_INTVEC_SIZE-1)                    #
#                            -D_..X_EXT_SRAM_BASE=_..X_SRAM_END                #
#                            -D_..X_EXT_SRAM_SIZE=0                            #
#                            -D_..X_EXT_ROM_BASE=_..X_SRAM_END                 #
#                            -D_..X_EXT_ROM_SIZE=0                             #
#                            -D_..X_EXT_NV_BASE=_..X_SRAM_END                  #
#                            -D_..X_EXT_NV_SIZE=0                              #
#                            -D_..X_CSTACK_BASE=_..X_SRAM_BASE                 #
#                            -D_..X_CSTACK_END=_..X_SRAM_END                   #
#                            -D_..X_RSTACK_BASE=_..X_SRAM_BASE                 #
#                            -D_..X_RSTACK_END=_..X_SRAM_END -r -s             #
#                            __program_start                                   #
#                            "C:\Program Files (x86)\IAR Systems\Embedded Work #
#                            bench 5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.r90"   #
#                            -e_PrintfLarge=_Printf -e_ScanfSmall=_Scanf       #
#                                                                              #
#                           Copyright (C) 1987-2009 IAR Systems AB.            #
################################################################################





                ****************************************
                *                                      *
                *           CROSS REFERENCE            *
                *                                      *
                ****************************************

       Program entry at : CODE      00000000  Relocatable, from module : ?RESET




                ****************************************
                *                                      *
                *            RUNTIME MODEL             *
                *                                      *
                ****************************************

  R10                        = REG
  R11                        = REG
  R12                        = REG
  R13                        = REG
  R14                        = REG
  R15                        = REG
  R4                         = REG
  R5                         = REG
  R6                         = REG
  R7                         = REG
  R8                         = REG
  R9                         = REG
  __64bit_doubles            = disabled
  __cpu                      = 3
  __cpu_name                 = ATmega128
  __dlib_file_descriptor     = 0
  __dlib_full_locale_support = 0
  __enhanced_core            = enabled
  __has_elpm                 = true
  __memory_model             = 2
  __no_rampd                 = enabled
  __rt_version               = 3
  __tiny_avr                 = false



                ****************************************
                *                                      *
                *              MODULE MAP              *
                *                                      *
                ****************************************


  DEFINED ABSOLUTE ENTRIES
  PROGRAM MODULE, NAME : ?ABS_ENTRY_MOD

Absolute parts
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _..X_RSTACK_END         000010FF 
           _..X_RSTACK_BASE        00000100 
           _..X_CSTACK_END         000010FF 
           _..X_CSTACK_BASE        00000100 
           _..X_EXT_NV_SIZE        00000000 
           _..X_EXT_NV_BASE        000010FF 
           _..X_EXT_ROM_SIZE       00000000 
           _..X_EXT_ROM_BASE       000010FF 
           _..X_EXT_SRAM_SIZE      00000000 
           _..X_EXT_SRAM_BASE      000010FF 
           _..X_FLASH_BASE         0000008C 
           _..X_RSTACK_SIZE        00000040 
           _..X_CSTACK_SIZE        000002C0 
           _..X_HUGE_HEAP_SIZE     00000000 
           _..X_FAR_HEAP_SIZE      00000000 
           _..X_NEAR_HEAP_SIZE     00000260 
           _..X_TINY_HEAP_SIZE     00000000 
           _..X_HEAP_SIZE          00000000 
           _..X_EEPROM_START       00000000 
           _..X_EEPROM_END         00000FFF 
           _..X_SRAM_END           000010FF 
           _..X_SRAM_TSIZE         00000000 
           _..X_SRAM_TBASE         00000000 
           _..X_SRAM_BASE          00000100 
           _..X_FLASH_END          0001FFFF 
           _..X_FLASH_NEND         0000FFFF 
           _..X_INTVEC_SIZE        0000008C 
    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ANSI200.r90
  PROGRAM MODULE, NAME : ANSI200

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 0000001C, align: 0
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 0000001C 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000001D, align: 0
  Segment part 2. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 0000001D 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000001E, align: 0
  Segment part 3. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                0000001E 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000001F, align: 0
  Segment part 4. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                0000001F 
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\BCComponentManager.r90
  PROGRAM MODULE, NAME : BCComponentManager

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 0000076A - 0000076B (0x2 bytes), align: 0
  Segment part 10.            Intra module refs:   BCComponentManager::BCComponentManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::Instantce
                                   0000076A 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000660 - 00000665 (0x6 bytes), align: 0
  Segment part 13.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000666 - 0000067D (0x18 bytes), align: 0
  Segment part 17.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000067E - 00000683 (0x6 bytes), align: 0
  Segment part 24.            Intra module refs:   BCComponentManager::CreateAdc()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002B0 - 000002B1 (0x2 bytes), align: 1
  Segment part 31.            Intra module refs:   Segment part 18
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 1>             000002B0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002B2 - 000002B3 (0x2 bytes), align: 1
  Segment part 32.            Intra module refs:   Segment part 18
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 2>             000002B2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002B4 - 000002B5 (0x2 bytes), align: 1
  Segment part 33.            Intra module refs:   Segment part 18
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 3>             000002B4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002B6 - 000002BD (0x8 bytes), align: 1
  Segment part 34.            Intra module refs:   Segment part 25
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 4>             000002B6 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000684 - 00000689 (0x6 bytes), align: 0
  Segment part 27.            Intra module refs:   BCComponentManager::CreatePwm()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002BE - 000002C5 (0x8 bytes), align: 1
  Segment part 35.            Intra module refs:   Segment part 28
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 5>             000002BE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::new BCComponentManager()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002C6 - 000002CB (0x6 bytes), align: 1
  Segment part 37.            Intra module refs:   BCComponentManager::CreateSerialIO(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002CC - 000002E1 (0x16 bytes), align: 1
  Segment part 38.            Intra module refs:   Segment part 30
           LOCAL                   ADDRESS         
           =====                   =======         
           __sti__routine()        000002CC 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002E2 - 000002E3 (0x2 bytes), align: 1
  Segment part 39.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002E4 - 000002E5 (0x2 bytes), align: 1
  Segment part 40.            Intra module refs:   Segment part 14
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             000002E4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002E6 - 000002F7 (0x12 bytes), align: 1
  Segment part 41.            Intra module refs:   Segment part 39
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::BCComponentManager()
                                   000002E6 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000002F8 - 000003F3 (0xfc bytes), align: 1
  Segment part 42.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::Init()
                                   000002F8        main (System_main)
               calls direct and indirect
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000003F4 - 000003FF (0xc bytes), align: 1
  Segment part 43.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000400 - 00000413 (0x14 bytes), align: 1
  Segment part 44.            Intra module refs:   BCComponentManager::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000414 - 0000041B (0x8 bytes), align: 1
  Segment part 45.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateTimer()
                                   00000414        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000041C - 00000433 (0x18 bytes), align: 1
  Segment part 46.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateLed(enum LED)
                                   0000041C        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000434 - 00000441 (0xe bytes), align: 1
  Segment part 47.            Intra module refs:   BCComponentMod::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateSerialIO(unsigned char)
                                   00000434        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000442 - 00000455 (0x14 bytes), align: 1
  Segment part 48.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateDIn()
                                   00000442        Term_Project_s::Init() (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000456 - 0000045B (0x6 bytes), align: 1
  Segment part 49.            Intra module refs:   BCComponentManager::CreateDIn()
                                                   BCComponentManager::CreatePwm()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000045C - 0000045D (0x2 bytes), align: 1
  Segment part 50.            Intra module refs:   BCComponentManager::CreateDIn()
                                                   BCComponentManager::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000045E - 00000465 (0x8 bytes), align: 1
  Segment part 51.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 50
                                                   Segment part 55
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000466 - 000004A1 (0x3c bytes), align: 1
  Segment part 52.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreateAdc()
                                   00000466        Term_Project_s::Init() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004A2 - 000004AB (0xa bytes), align: 1
  Segment part 53.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   BCComponentManager::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004AC - 000004AF (0x4 bytes), align: 1
  Segment part 54.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   BCComponentManager::CreatePwm()
                                                   BCComponentManager::Init()
                                                   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004B0 - 000004B5 (0x6 bytes), align: 1
  Segment part 55.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   BCComponentManager::CreatePwm()
                                                   BCComponentManager::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004B6 - 000004B9 (0x4 bytes), align: 1
  Segment part 56.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   BCComponentManager::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004BA - 000004C9 (0x10 bytes), align: 1
  Segment part 57.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 56
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004CA - 00000503 (0x3a bytes), align: 1
  Segment part 58.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::CreatePwm()
                                   000004CA        Term_Project_s::Init() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000076C - 000007B2 (0x47 bytes), align: 0
  Segment part 12.            Intra module refs:   BCComponentManager::CreateAdc()
                                                   BCComponentManager::CreateDIn()
                                                   BCComponentManager::CreatePwm()
                                                   BCComponentManager::Init()
                                                   BCComponentMod::Init()
                                                   GetBCComponentManager()
                                                   Segment part 14
                                                   Segment part 18
                                                   Segment part 25
                                                   Segment part 28
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentManager::Driver
                                   0000076C 
           bcmod                   0000076E 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007B3 - 000007B4 (0x2 bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 14
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007B5 - 000007B6 (0x2 bytes), align: 0
  Segment part 19.            Intra module refs:   Segment part 18
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007B7 - 000007D9 (0x23 bytes), align: 0
  Segment part 20.            Intra module refs:   BCComponentManager::Init()
                                                   Segment part 18
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007DA - 000007DB (0x2 bytes), align: 0
  Segment part 21.            Intra module refs:   Segment part 18
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007DC - 000007DD (0x2 bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 18
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007DE - 000007DF (0x2 bytes), align: 0
  Segment part 23.            Intra module refs:   Segment part 18
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007E0 - 000007E1 (0x2 bytes), align: 0
  Segment part 26.            Intra module refs:   Segment part 25
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007E2 - 000007E3 (0x2 bytes), align: 0
  Segment part 29.            Intra module refs:   Segment part 28
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000504 - 00000509 (0x6 bytes), align: 1
  Segment part 59.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           GetBCComponentManager()
                                   00000504        Segment part 54 (Term_Project_s)
                                                   main (System_main)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000050A - 00000519 (0x10 bytes), align: 1
  Segment part 60.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInTimerAdaptor::~DInTimerAdaptor()
                                   0000050A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000051A - 00000557 (0x3e bytes), align: 1
  Segment part 61.            Intra module refs:   BCComponentManager::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
                                   0000051A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000558 - 00000561 (0xa bytes), align: 1
  Segment part 62.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DInTimerAdaptor::TimeOutEvent()
                                   00000558 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000562 - 00000571 (0x10 bytes), align: 1
  Segment part 63.            Intra module refs:   Segment part 8
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerWithLedAdapter::~TimerWithLedAdapter()
                                   00000562 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000572 - 00000593 (0x22 bytes), align: 1
  Segment part 64.            Intra module refs:   BCComponentManager::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerWithLedAdapter::TimerWithLedAdapter(Led *)
                                   00000572 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000594 - 0000059D (0xa bytes), align: 1
  Segment part 65.            Intra module refs:   Segment part 8
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerWithLedAdapter::TimeOutEvent()
                                   00000594 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000059E - 000005AD (0x10 bytes), align: 1
  Segment part 66.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::~BCComponentMod()
                                   0000059E 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000005AE - 000005D7 (0x2a bytes), align: 1
  Segment part 67.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::Init()
                                   000005AE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000005D8 - 00000613 (0x3c bytes), align: 1
  Segment part 68.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           BCComponentMod::Execute()
                                   000005D8 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE 000036BE - 000036C4 (0x7 bytes), align: 0
  Segment part 11.            Intra module refs:   BCComponentManager::Instantce
                                                   DriverFactory::instance (DriverFactory)
                                                   MC_E02SMBDriverFactory::CreateAdc()::avr_adc (MC_E02SMB_v1_3DriverFactory)
                                                   MC_E02SMBDriverFactory::CreateAdc()::static guard for avr_adc (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 12
                                                   Segment part 12 (Term_Project_s)
                                                   Segment part 12 (avr_adc)
                                                   Segment part 13 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 13 (TimerManager)
                                                   Segment part 14 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 15 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 16
                                                   Segment part 16 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 16 (Term_Project_s)
                                                   Segment part 17 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 17 (Term_Project_s)
                                                   Segment part 17 (avr_uart)
                                                   Segment part 18 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 18 (Term_Project_s)
                                                   Segment part 19
                                                   Segment part 19 (Term_Project_s)
                                                   Segment part 20
                                                   Segment part 20 (Term_Project_s)
                                                   Segment part 21
                                                   Segment part 21 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 21 (Term_Project_s)
                                                   Segment part 22
                                                   Segment part 22 (Term_Project_s)
                                                   Segment part 23
                                                   Segment part 23 (Term_Project_s)
                                                   Segment part 24 (Term_Project_s)
                                                   Segment part 25 (Term_Project_s)
                                                   Segment part 26
                                                   Segment part 26 (Term_Project_s)
                                                   Segment part 29
                                                   Segment part 3 (?cppinit)
                                                   Segment part 3 (?xgetmemchunk)
                                                   Segment part 8 (MC_E02SMB_v1_3DriverFactory)
                                                   SystemManager::instance (System_Manager)
                                                   TimerManager::pInstance (TimerManager)
                                                   __iar_New_hand (?new)
                                                   __near_Aldata (?xxmemxmalloc)
                                                   timeout (avr_timer)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   000036BE 
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000036CC - 000036D1 (0x6 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE 000036C5 - 000036CB (0x7 bytes), align: 0
  Segment part 15.            Intra module refs:   Segment part 10 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 10 (TimerManager)
                                                   Segment part 11 (CalClkFuncGen)
                                                   Segment part 13
                                                   Segment part 13 (CalClkFuncGen)
                                                   Segment part 14 (Term_Project_s)
                                                   Segment part 15 (CalClkFuncGen)
                                                   Segment part 17
                                                   Segment part 19 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 24
                                                   Segment part 27
                                                   Segment part 3 (?xprintflarge)
                                                   Segment part 6 (?xprintflarge)
                                                   Segment part 8 (?xprintflarge)
                                                   Segment part 8 (CalClkFuncGen)
                                                   Segment part 9 (Term_Project_s)
                                                   __Constant_0_0 (?xprintflarge)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   000036C5 
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000036D2 - 000036E9 (0x18 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000036EA - 000036EF (0x6 bytes), align: 0
  Segment part 25.            Intra module refs:   Segment part 24
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000036F0 - 000036F5 (0x6 bytes), align: 0
  Segment part 28.            Intra module refs:   Segment part 27
    -------------------------------------------------------------------------
DIFUNCT
  Relative segment, address: CODE 000002AA - 000002AB (0x2 bytes), align: 0
  Segment part 30. ROOT.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000008C - 0000008F (0x4 bytes), align: 0
  Segment part 7.             Intra module refs:   DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000090 - 00000093 (0x4 bytes), align: 0
  Segment part 8.             Intra module refs:   TimerWithLedAdapter::TimerWithLedAdapter(Led *)
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000094 - 00000099 (0x6 bytes), align: 0
  Segment part 9.             Intra module refs:   __sti__routine()

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\CalClkFuncGen.r90
  PROGRAM MODULE, NAME : CalClkFuncGen

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::new CalClkFuncGen()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000614 - 0000062B (0x18 bytes), align: 1
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::CalClkFuncGen()
                                   00000614        __sti__routine() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000062C - 0000063B (0x10 bytes), align: 1
  Segment part 19.            Intra module refs:   CalClkFuncGen::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::~CalClkFuncGen()
                                   0000062C        <Unnamed 1> (Term_Project_s)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000063C - 00000667 (0x2c bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::Init()   0000063C        Term_Project_s::Init() (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000668 - 00000677 (0x10 bytes), align: 1
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
                                   00000668        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000678 - 0000067F (0x8 bytes), align: 1
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::SetPwm(IPwmOut *)
                                   00000678        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000680 - 0000068D (0xe bytes), align: 1
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::Switch()
                                   00000680        mySWEvent::Changed(enum DInEvent::EDGE) (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000068E - 000006DF (0x52 bytes), align: 1
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::InputCh(char)
                                   0000068E        mySerialEvent::Receive(unsigned char) (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006E0 - 000006E9 (0xa bytes), align: 1
  Segment part 25.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::InputAdc(unsigned short)
                                   000006E0        myAdcAdaptor::Converted(unsigned short) (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006EA - 000006EF (0x6 bytes), align: 1
  Segment part 26.            Intra module refs:   CalClkFuncGen::Init()
                                                   CalClkFuncGen::InputAdc(unsigned short)
                                                   CalClkFuncGen::Switch()
                                                   CalClkFuncGen::tm1s()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006F0 - 000006F1 (0x2 bytes), align: 1
  Segment part 27.            Intra module refs:   CalClkFuncGen::InputAdc(unsigned short)
                                                   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006F2 - 000006F7 (0x6 bytes), align: 1
  Segment part 28.            Intra module refs:   CalClkFuncGen::Init()
                                                   Segment part 27
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006F8 - 000006FD (0x6 bytes), align: 1
  Segment part 29.            Intra module refs:   CalClkFuncGen::tm1s()
                                                   Segment part 27
                                                   Segment part 28
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000006FE - 00000747 (0x4a bytes), align: 1
  Segment part 30.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::tm1s()   000006FE        myTimer1s::TimeOutEvent() (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000017 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000748 - 00000751 (0xa bytes), align: 1
  Segment part 31.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000752 - 0000075B (0xa bytes), align: 1
  Segment part 32.            Intra module refs:   CalClkFuncGen::Init()
                                                   CalClkFuncGen::tm1s()
                                                   Segment part 28
                                                   Segment part 31
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000075C - 0000075D (0x2 bytes), align: 1
  Segment part 33.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::tm500ms()
                                   0000075C        myTimer500ms::TimeOutEvent() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000036F6 - 00003720 (0x2b bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003721 - 00003728 (0x8 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003729 - 00003731 (0x9 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003732 - 00003740 (0xf bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000068A - 000006B4 (0x2b bytes), align: 0
  Segment part 8.             Intra module refs:   CalClkFuncGen::Init()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006B5 - 000006BC (0x8 bytes), align: 0
  Segment part 11.            Intra module refs:   CalClkFuncGen::Switch()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006BD - 000006C5 (0x9 bytes), align: 0
  Segment part 13.            Intra module refs:   CalClkFuncGen::InputCh(char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006C6 - 000006D4 (0xf bytes), align: 0
  Segment part 15.            Intra module refs:   CalClkFuncGen::tm1s()
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000009A - 0000009B (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   CalClkFuncGen::CalClkFuncGen()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CalClkFuncGen::__vtbl   0000009A 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\DriverFactory.r90
  PROGRAM MODULE, NAME : DriverFactory

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 000007E4 - 000007E5 (0x2 bytes), align: 0
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::instance
                                   000007E4        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\MC_E02SMB_v1_3DriverFactory.r90
  PROGRAM MODULE, NAME : MC_E02SMB_v1_3DriverFactory

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Relative segment, address: DATA 000006D5 - 000006F8 (0x24 bytes), align: 0
  Segment part 10.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006F9 - 000006FE (0x6 bytes), align: 0
  Segment part 19.            Intra module refs:   MC_E02SMBDriverFactory::CreateAdc()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000075E - 00000765 (0x8 bytes), align: 1
  Segment part 25.            Intra module refs:   Segment part 20
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 6>             0000075E 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000766 - 000007DD (0x78 bytes), align: 1
  Segment part 26.            Intra module refs:   Segment part 24
           LOCAL                   ADDRESS         
           =====                   =======         
           __sti__routine()        00000766 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007DE - 000007E1 (0x4 bytes), align: 1
  Segment part 27.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007E2 - 000007E3 (0x2 bytes), align: 1
  Segment part 28.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             000007E2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007E4 - 000007E5 (0x2 bytes), align: 1
  Segment part 29.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 1>             000007E4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007E6 - 000007ED (0x8 bytes), align: 1
  Segment part 30.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 2>             000007E6 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007EE - 000007EF (0x2 bytes), align: 1
  Segment part 31.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 3>             000007EE 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007F0 - 000007F1 (0x2 bytes), align: 1
  Segment part 32.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 4>             000007F0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007F2 - 000007F3 (0x2 bytes), align: 1
  Segment part 33.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 5>             000007F2 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000007E6 - 0000080A (0x25 bytes), align: 0
  Segment part 8.             Intra module refs:   GetDriverFactory()
                                                   MC_E02SMBDriverFactory::CreateClcd()
                                                   MC_E02SMBDriverFactory::CreateDIn()
                                                   MC_E02SMBDriverFactory::CreateLed(unsigned char)
                                                   MC_E02SMBDriverFactory::CreatePwm()
                                                   MC_E02SMBDriverFactory::CreateTimer()
                                                   MC_E02SMBDriverFactory::CreateUart()
                                                   Segment part 11
                                                   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000080B - 0000080C (0x2 bytes), align: 0
  Segment part 13.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000080D - 0000080E (0x2 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000080F - 00000810 (0x2 bytes), align: 0
  Segment part 15.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000811 - 00000812 (0x2 bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000813 - 00000814 (0x2 bytes), align: 0
  Segment part 17.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000815 - 00000816 (0x2 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000817 - 00000818 (0x2 bytes), align: 0
  Segment part 21.            Intra module refs:   Segment part 20
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000819 - 00000819 (0x1 bytes), align: 0
  Segment part 22.            Intra module refs:   MC_E02SMBDriverFactory::CreateAdc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateAdc()::static guard for avr_adc
                                   00000819 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000081A - 0000081B (0x2 bytes), align: 0
  Segment part 23.            Intra module refs:   MC_E02SMBDriverFactory::CreateAdc()
                                                   Segment part 20
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateAdc()::avr_adc
                                   0000081A 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007F4 - 000007F9 (0x6 bytes), align: 1
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           GetDriverFactory()      000007F4        BCComponentManager::Init() (BCComponentManager)
                                                   Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000007FA - 000007FF (0x6 bytes), align: 1
  Segment part 35.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateSPI()
                                   000007FA 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000800 - 00000805 (0x6 bytes), align: 1
  Segment part 36.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateDOut(char *)
                                   00000800 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000806 - 0000080B (0x6 bytes), align: 1
  Segment part 37.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateDac7512()
                                   00000806 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000080C - 00000811 (0x6 bytes), align: 1
  Segment part 38.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DriverFactory::CreateMcp3204()
                                   0000080C 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000812 - 00000817 (0x6 bytes), align: 1
  Segment part 39.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateTimer()
                                   00000812 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000818 - 0000081D (0x6 bytes), align: 1
  Segment part 40.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateUart()
                                   00000818 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000081E - 0000082D (0x10 bytes), align: 1
  Segment part 41.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateLed(unsigned char)
                                   0000081E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000082E - 00000833 (0x6 bytes), align: 1
  Segment part 42.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateClcd()
                                   0000082E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000834 - 00000839 (0x6 bytes), align: 1
  Segment part 43.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateDIn()
                                   00000834 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000083A - 0000085D (0x24 bytes), align: 1
  Segment part 44.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreateAdc()
                                   0000083A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000085E - 00000863 (0x6 bytes), align: 1
  Segment part 45.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MC_E02SMBDriverFactory::CreatePwm()
                                   0000085E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003741 - 00003764 (0x24 bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 10
    -------------------------------------------------------------------------
INITTAB
  Segment part 12. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003765 - 0000376A (0x6 bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
DIFUNCT
  Relative segment, address: CODE 000002AC - 000002AD (0x2 bytes), align: 0
  Segment part 24. ROOT.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000009C - 000000B1 (0x16 bytes), align: 0
  Segment part 7.             Intra module refs:   __sti__routine()

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\Power_Manager.r90
  PROGRAM MODULE, NAME : Power_Manager

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\StdConsole.r90
  PROGRAM MODULE, NAME : StdConsole

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\System_Info.r90
  PROGRAM MODULE, NAME : System_Info

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\System_Manager.r90
  PROGRAM MODULE, NAME : System_Manager

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 0000081C - 0000081D (0x2 bytes), align: 0
  Segment part 8.             Intra module refs:   SystemManager::Instance()
                                                   SystemManager::SystemManager()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::instance
                                   0000081C 
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::new SystemManager()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000864 - 00000869 (0x6 bytes), align: 1
  Segment part 11.            Intra module refs:   SystemManager::Instance()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000086A - 0000087B (0x12 bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::SystemManager()
                                   0000086A        Term_Project_s::Term_Project_s() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000087C - 0000088B (0x10 bytes), align: 1
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::~SystemManager()
                                   0000087C        Term_Project_s::~Term_Project_s() (Term_Project_s)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000088C - 0000089D (0x12 bytes), align: 1
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Instance()
                                   0000088C        BCComponentManager::Init() (BCComponentManager)
                                                   main (System_main)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000089E - 000008B1 (0x14 bytes), align: 1
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::InitModule()
                                   0000089E        main (System_main)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000008B2 - 000008B7 (0x6 bytes), align: 1
  Segment part 16.            Intra module refs:   SystemManager::InitModule()
                                                   SystemManager::Run(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000008B8 - 000008DB (0x24 bytes), align: 1
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Run(unsigned char)
                                   000008B8        main (System_main)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000008DC - 000008E3 (0x8 bytes), align: 1
  Segment part 18.            Intra module refs:   SystemManager::InitModule()
                                                   SystemManager::Run(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000008E4 - 000008EB (0x8 bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::AddModule(IModule &)
                                   000008E4        BCComponentManager::Init() (BCComponentManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::RunTail()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000008EC - 000008ED (0x2 bytes), align: 1
  Segment part 21.            Intra module refs:   Term_Project_s::__vtbl (Term_Project_s)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Exit()   000008EC 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::__vtbl   

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\System_main.r90
  PROGRAM MODULE, NAME : System_main

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000008EE - 00000923 (0x36 bytes), align: 1
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main                    000008EE        ?cstartup_call_main (?C_STARTUP)
               calls direct and indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000924 - 0000092D (0xa bytes), align: 1
  Segment part 8.             Intra module refs:   main
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000092E - 00000935 (0x8 bytes), align: 1
  Segment part 9.             Intra module refs:   main
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\Term_Project_s.r90
  PROGRAM MODULE, NAME : Term_Project_s

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::new Term_Project_s()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000936 - 000009E5 (0xb0 bytes), align: 1
  Segment part 29.            Intra module refs:   Segment part 27
           LOCAL                   ADDRESS         
           =====                   =======         
           __sti__routine()        00000936 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000006FF - 00000700 (0x2 bytes), align: 0
  Segment part 9.             Intra module refs:   mySerialEvent::Receive(unsigned char)
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000701 - 00000742 (0x42 bytes), align: 0
  Segment part 14.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000081E - 00000889 (0x6c bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 15
                                                   Segment part 55
                                                   Term_Project_s::Init()
                                                   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ccf                     0000086C 
           myApp                   00000858 
           myPwmadp                00000850 
           mySW                    0000083C 
           myadcEvent              0000084C 
           mylcdline1              00000842 
           mylcdline2              00000847 
           myserialEvent           00000836 
           myserialadp             00000854 
           mytimer_1sec            0000081E 
           mytimer_500ms           0000082A 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000088A - 0000088B (0x2 bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000088C - 0000088D (0x2 bytes), align: 0
  Segment part 17.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000088E - 0000088F (0x2 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000890 - 00000891 (0x2 bytes), align: 0
  Segment part 19.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000892 - 00000893 (0x2 bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000894 - 00000895 (0x2 bytes), align: 0
  Segment part 21.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000896 - 00000897 (0x2 bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00000898 - 00000899 (0x2 bytes), align: 0
  Segment part 23.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000089A - 0000089B (0x2 bytes), align: 0
  Segment part 24.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000089C - 0000089D (0x2 bytes), align: 0
  Segment part 25.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 0000089E - 0000089F (0x2 bytes), align: 0
  Segment part 26.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000009E6 - 000009EB (0x6 bytes), align: 1
  Segment part 30.            Intra module refs:   Term_Project_s::Term_Project_s()
                                                   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000009EC - 000009F5 (0xa bytes), align: 1
  Segment part 31.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000009F6 - 000009F9 (0x4 bytes), align: 1
  Segment part 32.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000009FA - 00000A01 (0x8 bytes), align: 1
  Segment part 33.            Intra module refs:   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A02 - 00000A07 (0x6 bytes), align: 1
  Segment part 34.            Intra module refs:   Segment part 33
                                                   Term_Project_s::Term_Project_s()
                                                   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A08 - 00000A0F (0x8 bytes), align: 1
  Segment part 35.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             00000A08 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A10 - 00000A17 (0x8 bytes), align: 1
  Segment part 36.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 1>             00000A10 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A18 - 00000A19 (0x2 bytes), align: 1
  Segment part 37.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 2>             00000A18 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A1A - 00000A1B (0x2 bytes), align: 1
  Segment part 38.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 3>             00000A1A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A1C - 00000A1D (0x2 bytes), align: 1
  Segment part 39.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 4>             00000A1C 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A1E - 00000A1F (0x2 bytes), align: 1
  Segment part 40.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 5>             00000A1E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A20 - 00000A21 (0x2 bytes), align: 1
  Segment part 41.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 6>             00000A20 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A22 - 00000A23 (0x2 bytes), align: 1
  Segment part 42.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 7>             00000A22 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A24 - 00000A25 (0x2 bytes), align: 1
  Segment part 43.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 8>             00000A24 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A26 - 00000A27 (0x2 bytes), align: 1
  Segment part 44.            Intra module refs:   Segment part 15
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 9>             00000A26 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A28 - 00000A3F (0x18 bytes), align: 1
  Segment part 45.            Intra module refs:   __sti__routine()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::Term_Project_s()
                                   00000A28 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000A40 - 00000B8B (0x14c bytes), align: 1
  Segment part 46.            Intra module refs:   Term_Project_s::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::Init()
                                   00000A40 
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B8C - 00000B91 (0x6 bytes), align: 1
  Segment part 47.            Intra module refs:   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B92 - 00000B95 (0x4 bytes), align: 1
  Segment part 48.            Intra module refs:   Segment part 47
                                                   Segment part 50
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B96 - 00000B97 (0x2 bytes), align: 1
  Segment part 49.            Intra module refs:   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B98 - 00000B9D (0x6 bytes), align: 1
  Segment part 50.            Intra module refs:   Segment part 49
                                                   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B9E - 00000BA5 (0x8 bytes), align: 1
  Segment part 51.            Intra module refs:   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BA6 - 00000BAD (0x8 bytes), align: 1
  Segment part 52.            Intra module refs:   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BAE - 00000BBB (0xe bytes), align: 1
  Segment part 53.            Intra module refs:   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BBC - 00000BBF (0x4 bytes), align: 1
  Segment part 54.            Intra module refs:   Term_Project_s::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BC0 - 00000BC5 (0x6 bytes), align: 1
  Segment part 55.            Intra module refs:   Term_Project_s::Init()
                                                   __sti__routine()
    -------------------------------------------------------------------------
CODE
  Segment part 56. TENTATIVE. Used definition from System_Manager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SystemManager::Exit()   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BC6 - 00000BEB (0x26 bytes), align: 1
  Segment part 57.            Intra module refs:   <Unnamed 0>
                                                   Term_Project_s::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::~Term_Project_s()
                                   00000BC6 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BEC - 00000BFB (0x10 bytes), align: 1
  Segment part 58.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::~myTimer1s()
                                   00000BEC 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000BFC - 00000C27 (0x2c bytes), align: 1
  Segment part 59.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer1s::TimeOutEvent()
                                   00000BFC 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C28 - 00000C37 (0x10 bytes), align: 1
  Segment part 60.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::~myTimer500ms()
                                   00000C28 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C38 - 00000C63 (0x2c bytes), align: 1
  Segment part 61.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myTimer500ms::TimeOutEvent()
                                   00000C38 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C64 - 00000C73 (0x10 bytes), align: 1
  Segment part 62.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::~mySWEvent()
                                   00000C64 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C74 - 00000C89 (0x16 bytes), align: 1
  Segment part 63.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySWEvent::Changed(enum DInEvent::EDGE)
                                   00000C74 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C8A - 00000C99 (0x10 bytes), align: 1
  Segment part 64.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myAdcAdaptor::~myAdcAdaptor()
                                   00000C8A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000C9A - 00000CAB (0x12 bytes), align: 1
  Segment part 65.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myAdcAdaptor::Converted(unsigned short)
                                   00000C9A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000CAC - 00000CBB (0x10 bytes), align: 1
  Segment part 66.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmAdaptor::~myPwmAdaptor()
                                   00000CAC 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000CBC - 00000CCD (0x12 bytes), align: 1
  Segment part 67.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           myPwmAdaptor::SetDuty(unsigned short)
                                   00000CBC 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000CCE - 00000CDD (0x10 bytes), align: 1
  Segment part 68.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialEvent::~mySerialEvent()
                                   00000CCE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000CDE - 00000D19 (0x3c bytes), align: 1
  Segment part 69.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialEvent::Receive(unsigned char)
                                   00000CDE 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D1A - 00000D29 (0x10 bytes), align: 1
  Segment part 70.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialOutAdaptor::~mySerialOutAdaptor()
                                   00000D1A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D2A - 00000D3B (0x12 bytes), align: 1
  Segment part 71.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mySerialOutAdaptor::Write(char *)
                                   00000D2A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D3C - 00000D4B (0x10 bytes), align: 1
  Segment part 72.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdAdaptor::~mylcdAdaptor()
                                   00000D3C 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D4C - 00000D63 (0x18 bytes), align: 1
  Segment part 73.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           mylcdAdaptor::Write(char *)
                                   00000D4C 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000376B - 0000376C (0x2 bytes), align: 0
  Segment part 10.            Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
INITTAB
  Segment part 11. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
INITTAB
  Segment part 13. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000376D - 000037AE (0x42 bytes), align: 0
  Segment part 15.            Intra module refs:   Segment part 14
    -------------------------------------------------------------------------
DIFUNCT
  Relative segment, address: CODE 000002AE - 000002AF (0x2 bytes), align: 0
  Segment part 27. ROOT.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000B2 - 000000D1 (0x20 bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 33
                                                   __sti__routine()
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000D2 - 000000D7 (0x6 bytes), align: 0
  Segment part 8.             Intra module refs:   Term_Project_s::Term_Project_s()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Term_Project_s::__vtbl
                                   000000D2 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\TimerManager.r90
  PROGRAM MODULE, NAME : TimerManager

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00000D64 - 00000D69 (0x6 bytes), align: 1
  Segment part 14.            Intra module refs:   Segment part 11
           LOCAL                   ADDRESS         
           =====                   =======         
           <Unnamed 0>             00000D64 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000743 - 00000748 (0x6 bytes), align: 0
  Segment part 10.            Intra module refs:   TimerManager::GetInstance(ITimer *)
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::new TimerManager(ITimer *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D6A - 00000D89 (0x20 bytes), align: 1
  Segment part 16.            Intra module refs:   TimerManager::GetInstance(ITimer *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::TimerManager(ITimer *)
                                   00000D6A 
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D8A - 00000D8F (0x6 bytes), align: 1
  Segment part 17.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
                                                   TimerManager::GetInstance(ITimer *)
                                                   TimerManager::TimerManager(ITimer *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D90 - 00000D93 (0x4 bytes), align: 1
  Segment part 18.            Intra module refs:   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::evTick()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D94 - 00000D9D (0xa bytes), align: 1
  Segment part 19.            Intra module refs:   Segment part 18
                                                   TimerManager::evTick()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000D9E - 00000DDD (0x40 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::GetInstance(ITimer *)
                                   00000D9E        BCComponentManager::Init() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008A0 - 000008AE (0xf bytes), align: 0
  Segment part 8.             Intra module refs:   Segment part 11
                                                   TimerManager::GetInstance(ITimer *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::pInstance
                                   000008A0 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008AF - 000008B0 (0x2 bytes), align: 0
  Segment part 13.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000DDE - 00000E07 (0x2a bytes), align: 1
  Segment part 21.            Intra module refs:   <Unnamed 0>
                                                   TimerManager::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::~TimerManager()
                                   00000DDE 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000E08 - 00000E11 (0xa bytes), align: 1
  Segment part 22.            Intra module refs:   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::~TimerManager()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000E12 - 00000E1B (0xa bytes), align: 1
  Segment part 23.            Intra module refs:   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::~TimerManager()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000E1C - 00000E27 (0xc bytes), align: 1
  Segment part 24.            Intra module refs:   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::~TimerManager()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000E28 - 00000E73 (0x4c bytes), align: 1
  Segment part 25.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::AddEvent(ITimerEvent *)
                                   00000E28        Segment part 53 (BCComponentManager)
                                                   Segment part 53 (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000E74 - 00000EF5 (0x82 bytes), align: 1
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::evTick()
                                   00000E74        BCComponentMod::Execute() (BCComponentManager)
               calls direct and indirect
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000EF6 - 00000EFD (0x8 bytes), align: 1
  Segment part 27.            Intra module refs:   TimerManager::TimerManager(ITimer *)
                                                   TimerManager::evTick()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000EFE - 00000F25 (0x28 bytes), align: 1
  Segment part 28.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                   00000EFE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000F26 - 00000F45 (0x20 bytes), align: 1
  Segment part 29.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copy(char const *, char const *, char *)
                                   00000F26 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000F46 - 00000F5D (0x18 bytes), align: 1
  Segment part 30.            Intra module refs:   TimerManager::~TimerManager()
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
                                   00000F46 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000F5E - 00001051 (0xf4 bytes), align: 1
  Segment part 31.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                   00000F5E 
               calls direct
               CSTACK = 00000000 ( 0000000E )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001052 - 0000108D (0x3c bytes), align: 1
  Segment part 32.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                   00001052 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000108E - 000010AD (0x20 bytes), align: 1
  Segment part 33.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                   0000108E 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000010AE - 000010E7 (0x3a bytes), align: 1
  Segment part 34.            Intra module refs:   TimerManager::AddEvent(ITimerEvent *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                   000010AE 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000010E8 - 00001109 (0x22 bytes), align: 1
  Segment part 35.            Intra module refs:   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                   000010E8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000110A - 00001131 (0x28 bytes), align: 1
  Segment part 36.            Intra module refs:   TimerManager::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ITimerEvent::CalTime(unsigned short)
                                   0000110A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000037AF - 000037B4 (0x6 bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 10
    -------------------------------------------------------------------------
INITTAB
  Segment part 12. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000D8 - 000000D9 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 24
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerManager::__vtbl    000000D8 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\adc.r90
  PROGRAM MODULE, NAME : adc

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::new Adc(IAdcPort *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001132 - 00001155 (0x24 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Adc(IAdcPort *)    00001132        BCComponentManager::CreateAdc() (BCComponentManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001156 - 00001165 (0x10 bytes), align: 1
  Segment part 10.            Intra module refs:   Adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::~Adc()             00001156        <Unnamed 4> (BCComponentManager)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001166 - 000011AF (0x4a bytes), align: 1
  Segment part 11.            Intra module refs:   Adc::TimeOutEvent()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::evTick()           00001166 
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000011B0 - 000011B1 (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   Adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::TimeOutEvent()     000011B0 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000011B2 - 000011B5 (0x4 bytes), align: 1
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Run()              000011B2        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000011B6 - 000011B9 (0x4 bytes), align: 1
  Segment part 14.            Intra module refs:   Adc::Run()
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Stop()             
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000011BA - 000011C7 (0xe bytes), align: 1
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::Addevent(AdcEvent *)
                                   000011BA        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000011C8 - 0000120B (0x44 bytes), align: 1
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::SetFrequency(unsigned char)
                                   000011C8        Term_Project_s::Init() (Term_Project_s)
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000DA - 000000DD (0x4 bytes), align: 0
  Segment part 7.             Intra module refs:   Adc::Adc(IAdcPort *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Adc::__vtbl             000000DA 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_WatchDog.r90
  PROGRAM MODULE, NAME : avr_WatchDog

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::new avr_watchdog()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           WDT_Prescaler_Change()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           isWDT_WoringBefore()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           WDT_Kick()              
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::avr_watchdog()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::Kick()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::CPUReset()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::Prescaler_Change()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_watchdog::Off()     
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_adc.r90
  PROGRAM MODULE, NAME : avr_adc

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000024 - 00000025 (0x2 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   ADC_conv_done()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_ADC                  00000024 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000026 - 00000026 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_adc::Init()
                                                   Avr_adc::SetPrescaler(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_ADCSR                00000026 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000027 - 00000027 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_adc::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_ADMUX                00000027 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008B1 - 000008B3 (0x3 bytes), align: 0
  Segment part 12.            Intra module refs:   ADC_conv_done()
                                                   Avr_adc::GetAdc()
                                                   Avr_adc::isConverted()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           adc_result              000008B1 
           isconv                  000008B3 
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::new Avr_adc()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000120C - 0000124D (0x42 bytes), align: 1
  Segment part 15.            Intra module refs:   ADC_conv_done()::??INTVEC 84
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ADC_conv_done()         0000120C 
               interrupt function
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::SetChannel(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000124E - 0000125B (0xe bytes), align: 1
  Segment part 17.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::SetPrescaler(unsigned char)
                                   0000124E 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000125C - 00001269 (0xe bytes), align: 1
  Segment part 18.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::Init()         0000125C 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000126A - 0000126D (0x4 bytes), align: 1
  Segment part 19.            Intra module refs:   Avr_adc::GetAdc()
                                                   Avr_adc::Init()
                                                   Avr_adc::SetPrescaler(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000126E - 0000128F (0x22 bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::Avr_adc()      0000126E        MC_E02SMBDriverFactory::CreateAdc() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001290 - 0000129F (0x10 bytes), align: 1
  Segment part 21.            Intra module refs:   Avr_adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::~Avr_adc()     00001290        <Unnamed 6> (MC_E02SMB_v1_3DriverFactory)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012A0 - 000012A7 (0x8 bytes), align: 1
  Segment part 22.            Intra module refs:   Avr_adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::isConverted()
                                   000012A0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012A8 - 000012B7 (0x10 bytes), align: 1
  Segment part 23.            Intra module refs:   Avr_adc::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::GetAdc()       000012A8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 00000057 (0x58 bytes), align: 1
  Segment part 8. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ADC_conv_done()::??INTVEC 84
                                   00000054 
    -------------------------------------------------------------------------
CSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 13. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000DE - 000000E3 (0x6 bytes), align: 0
  Segment part 11.            Intra module refs:   Avr_adc::Avr_adc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_adc::__vtbl         000000DE 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_common.r90
  PROGRAM MODULE, NAME : avr_common

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000012B8 - 000012C7 (0x10 bytes), align: 1
  Segment part 7.             Intra module refs:   Segment part 10
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_delay_us(unsigned char)
                                   000012B8        Segment part 16 (clcd_adaptor)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012C8 - 000012E5 (0x1e bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           avr_delay_ms(unsigned int)
                                   000012C8        Segment part 12 (clcd_adaptor)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012E6 - 000012E7 (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   avr_delay_ms(unsigned int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012E8 - 000012EB (0x4 bytes), align: 1
  Segment part 10.            Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_nv_ram.r90
  PROGRAM MODULE, NAME : avr_nv_ram

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_pwm.r90
  PROGRAM MODULE, NAME : avr_pwm

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000037 - 00000037 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   Avr_pwm::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRB                 00000037 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000051 - 00000051 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_pwm::SetDuty(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_OCR0                 00000051 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000053 - 00000053 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_pwm::Init()
                                                   Avr_pwm::SetPreScaler(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TCCR0                00000053 
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::new Avr_pwm(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012EC - 00001309 (0x1e bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Avr_pwm(unsigned char)
                                   000012EC        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000130A - 00001319 (0x10 bytes), align: 1
  Segment part 13.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::~Avr_pwm()     0000130A        <Unnamed 2> (MC_E02SMB_v1_3DriverFactory)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000131A - 00001327 (0xe bytes), align: 1
  Segment part 14.            Intra module refs:   Avr_pwm::Avr_pwm(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Init()         0000131A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::SetOcr(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001328 - 0000132B (0x4 bytes), align: 1
  Segment part 16.            Intra module refs:   Avr_pwm::SetDuty(unsigned short)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000132C - 00001337 (0xc bytes), align: 1
  Segment part 17.            Intra module refs:   Segment part 19
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::SetPreScaler(unsigned char)
                                   0000132C 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001338 - 0000133B (0x4 bytes), align: 1
  Segment part 18.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Run()          00001338 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000133C - 0000133D (0x2 bytes), align: 1
  Segment part 19.            Intra module refs:   Avr_pwm::Run()
                                                   Avr_pwm::Stop()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000133E - 00001341 (0x4 bytes), align: 1
  Segment part 20.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::Stop()         0000133E 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001342 - 00001343 (0x2 bytes), align: 1
  Segment part 21.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::SetDuty(unsigned short)
                                   00001342 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001344 - 00001347 (0x4 bytes), align: 1
  Segment part 22.            Intra module refs:   Avr_pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::GetResolution()
                                   00001344 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000E4 - 000000ED (0xa bytes), align: 0
  Segment part 10.            Intra module refs:   Avr_pwm::Avr_pwm(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_pwm::__vtbl         000000E4 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_sleep.r90
  PROGRAM MODULE, NAME : avr_sleep

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_spi.r90
  PROGRAM MODULE, NAME : avr_spi

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 0000002D - 0000002D (0x1 bytes), align: 0
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_SPCR                 0000002D 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002E - 0000002E (0x1 bytes), align: 0
  Segment part 2. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_SPSR                 0000002E 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002F - 0000002F (0x1 bytes), align: 0
  Segment part 3. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_SPDR                 0000002F 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from avr_pwm
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRB                 
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::new AvrSpi()    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::AvrSpi()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::Init()          
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::WriteByte(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::ReadByte(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AvrSpi::__vtbl          

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_timer.r90
  PROGRAM MODULE, NAME : avr_timer

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000043 - 00000043 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_OCR2                 00000043 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000044 - 00000044 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TCNT2                00000044 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000045 - 00000045 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TCCR2                00000045 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000057 - 00000057 (0x1 bytes), align: 0
  Segment part 4. ROOT.       Intra module refs:   Avr_timer0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_TIMSK                00000057 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008B4 - 000008B4 (0x1 bytes), align: 0
  Segment part 13.            Intra module refs:   Avr_timer0::Avr_timer0()
                                                   Avr_timer0::isTimeOut()
                                                   timer_cmp()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timeout                 000008B4 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::new Avr_timer0()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001348 - 0000134B (0x4 bytes), align: 1
  Segment part 16.            Intra module refs:   Avr_timer0::GetTimeOutMS()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000134C - 00001357 (0xc bytes), align: 1
  Segment part 17.            Intra module refs:   timer_cmp()::??INTVEC 36
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timer_cmp()             0000134C 
               interrupt function
               CSTACK = 00000000 ( 00000003 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001358 - 00001379 (0x22 bytes), align: 1
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::Avr_timer0()
                                   00001358        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000137A - 0000138F (0x16 bytes), align: 1
  Segment part 19.            Intra module refs:   Avr_timer0::Avr_timer0()
                                                   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::Init()      0000137A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001390 - 00001393 (0x4 bytes), align: 1
  Segment part 20.            Intra module refs:   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::GetTimeOutMS()
                                   00001390 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001394 - 000013A5 (0x12 bytes), align: 1
  Segment part 21.            Intra module refs:   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::isTimeOut()
                                   00001394 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013A6 - 000013B5 (0x10 bytes), align: 1
  Segment part 22.            Intra module refs:   Avr_timer0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::~Avr_timer0()
                                   000013A6 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 00000027 (0x28 bytes), align: 1
  Segment part 9. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timer_cmp()::??INTVEC 36
                                   00000024 
    -------------------------------------------------------------------------
CSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 14. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000EE - 000000F5 (0x8 bytes), align: 0
  Segment part 12.            Intra module refs:   Avr_timer0::Avr_timer0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_timer0::__vtbl      000000EE 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_uart.r90
  PROGRAM MODULE, NAME : avr_uart

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000029 - 00000029 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UBRR0L               00000029 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002A - 0000002A (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   Avr_uart0::Init()
                                                   Avr_uart0::SendTxEvent()
                                                   usart0_txc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UCSR0B               0000002A 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002B - 0000002B (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UCSR0A               0000002B 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 0000002C - 0000002C (0x1 bytes), align: 0
  Segment part 4. ROOT.       Intra module refs:   usart0_rxc()
                                                   usart0_txc()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UDR0                 0000002C 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000031 - 00000031 (0x1 bytes), align: 0
  Segment part 5. ROOT.       Intra module refs:   Avr_uart0::Init()
                                                   E02SMBLed::E02SMBLed() (dio_adaptor)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRD                 00000031 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000090 - 00000090 (0x1 bytes), align: 0
  Segment part 6. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UBRR0H               00000090 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000095 - 00000095 (0x1 bytes), align: 0
  Segment part 7. ROOT.       Intra module refs:   Avr_uart0::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_UCSR0C               00000095 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008B5 - 000008B6 (0x2 bytes), align: 0
  Segment part 17.            Intra module refs:   Avr_uart0::Avr_uart0()
                                                   Segment part 23
                                                   Segment part 25
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::new Avr_uart0()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013B6 - 000013C7 (0x12 bytes), align: 1
  Segment part 20.            Intra module refs:   usart0_rxc()::??INTVEC 72
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_rxc()            000013B6 
               interrupt function
               calls direct
               CSTACK = 00000000 ( 00000010 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013C8 - 000013CB (0x4 bytes), align: 1
  Segment part 21.            Intra module refs:   usart0_rxc()
                                                   usart0_txc()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013CC - 000013EF (0x24 bytes), align: 1
  Segment part 22.            Intra module refs:   usart0_txc()::??INTVEC 76
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_txc()            000013CC 
               interrupt function
               calls direct
               CSTACK = 00000000 ( 00000011 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013F0 - 000013F7 (0x8 bytes), align: 1
  Segment part 23.            Intra module refs:   usart0_rxc()
                                                   usart0_txc()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013F8 - 000013FB (0x4 bytes), align: 1
  Segment part 24.            Intra module refs:   Segment part 23
                                                   Segment part 25
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000013FC - 00001409 (0xe bytes), align: 1
  Segment part 25.            Intra module refs:   usart0_rxc()
                                                   usart0_txc()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000140A - 0000142F (0x26 bytes), align: 1
  Segment part 26.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001430 - 00001455 (0x26 bytes), align: 1
  Segment part 27.            Intra module refs:   usart0_rxc()
                                                   usart0_txc()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001456 - 00001489 (0x34 bytes), align: 1
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Avr_uart0()
                                   00001456        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000148A - 0000148D (0x4 bytes), align: 1
  Segment part 29.            Intra module refs:   Avr_uart0::Avr_uart0()
                                                   Avr_uart0::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000148E - 000014E7 (0x5a bytes), align: 1
  Segment part 30.            Intra module refs:   Avr_uart0::Avr_uart0()
                                                   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Init()       0000148E 
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014E8 - 000014E9 (0x2 bytes), align: 1
  Segment part 31.            Intra module refs:   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Run()        000014E8 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014EA - 000014ED (0x4 bytes), align: 1
  Segment part 32.            Intra module refs:   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::SendTxEvent()
                                   000014EA 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::Write(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014EE - 000014FD (0x10 bytes), align: 1
  Segment part 34.            Intra module refs:   Avr_uart0::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::~Avr_uart0()
                                   000014EE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 9. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 10. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 11. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 0000004B (0x4c bytes), align: 1
  Segment part 12. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_rxc()::??INTVEC 72
                                   00000048 
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 0000004F (0x50 bytes), align: 1
  Segment part 13. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           usart0_txc()::??INTVEC 76
                                   0000004C 
    -------------------------------------------------------------------------
CSTACK
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 18. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000F6 - 000000FD (0x8 bytes), align: 0
  Segment part 16.            Intra module refs:   Avr_uart0::Avr_uart0()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Avr_uart0::__vtbl       000000F6 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\clcd.r90
  PROGRAM MODULE, NAME : clcd

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::new Clcd()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000014FE - 000014FF (0x2 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Clcd()            000014FE        ClcdAdaptor::ClcdAdaptor() (clcd_adaptor)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001500 - 00001523 (0x24 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Write(unsigned char, char *)
                                   00001500        mylcdAdaptor::Write(char *) (Term_Project_s)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Clcd::Write(unsigned char, char __flash *)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001524 - 0000152D (0xa bytes), align: 1
  Segment part 11.            Intra module refs:   Clcd::Write(unsigned char, char *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000152E - 00001539 (0xc bytes), align: 1
  Segment part 12.            Intra module refs:   Clcd::Write(unsigned char, char *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000153A - 00001541 (0x8 bytes), align: 1
  Segment part 13.            Intra module refs:   Clcd::Write(unsigned char, char *)
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\clcd_adaptor.r90
  PROGRAM MODULE, NAME : clcd_adaptor

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Relative segment, address: DATA 00000055 - 00000055 (0x1 bytes), align: 0
  Segment part 1. ROOT.       Intra module refs:   ClcdAdaptor::Init()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_MCUCR                00000055 
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::new ClcdAdaptor()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001542 - 00001561 (0x20 bytes), align: 1
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::ClcdAdaptor()
                                   00001542        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001562 - 00001581 (0x20 bytes), align: 1
  Segment part 11.            Intra module refs:   ClcdAdaptor::ClcdAdaptor()
                                                   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::Init()     00001562 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001582 - 00001587 (0x6 bytes), align: 1
  Segment part 12.            Intra module refs:   ClcdAdaptor::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001588 - 0000158B (0x4 bytes), align: 1
  Segment part 13.            Intra module refs:   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::SetData(unsigned char)
                                   00001588 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000158C - 0000158F (0x4 bytes), align: 1
  Segment part 14.            Intra module refs:   ClcdAdaptor::SetData(unsigned char)
                                                   ClcdAdaptor::SetInstruction(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001590 - 00001595 (0x6 bytes), align: 1
  Segment part 15.            Intra module refs:   ClcdAdaptor::Init()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001596 - 00001599 (0x4 bytes), align: 1
  Segment part 16.            Intra module refs:   Segment part 14
                                                   Segment part 15
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000159A - 000015A1 (0x8 bytes), align: 1
  Segment part 17.            Intra module refs:   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::SetInstruction(unsigned char)
                                   0000159A 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::Data4bit_out(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015A2 - 000015B1 (0x10 bytes), align: 1
  Segment part 19.            Intra module refs:   ClcdAdaptor::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::~ClcdAdaptor()
                                   000015A2 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 000000FE - 00000105 (0x8 bytes), align: 0
  Segment part 8.             Intra module refs:   ClcdAdaptor::ClcdAdaptor()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ClcdAdaptor::__vtbl     000000FE 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\dac7512.r90
  PROGRAM MODULE, NAME : dac7512

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::new Dac7512(ISpi &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Dac7512(ISpi &)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Init()         
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::SetMode(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Write(unsigned short)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Dac7512::Write(unsigned short, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\dio.r90
  PROGRAM MODULE, NAME : dio

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::new DOut()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::new DIn(DInEvent &, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::new DIn()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015B2 - 000015B9 (0x8 bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::DOut()            000015B2        Led::Led() (led)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015BA - 000015CB (0x12 bytes), align: 1
  Segment part 13.            Intra module refs:   DOut::Flip(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::Set(unsigned char)
                                   000015BA        Segment part 17 (led)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015CC - 000015D1 (0x6 bytes), align: 1
  Segment part 14.            Intra module refs:   DIn::evTimerExpir()
                                                   DOut::Set(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015D2 - 000015D3 (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   DIn::evTimerExpir()
                                                   DOut::Set(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015D4 - 000015DD (0xa bytes), align: 1
  Segment part 16.            Intra module refs:   DIn::evTimerExpir()
                                                   Segment part 15
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::Get()             
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015DE - 000015E5 (0x8 bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DOut::Flip(unsigned char)
                                   000015DE        Led::evTimerExpir() (led)
                                                   myTimer1s::TimeOutEvent() (Term_Project_s)
                                                   myTimer500ms::TimeOutEvent() (Term_Project_s)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::DIn(DInEvent &, unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015E6 - 000015F5 (0x10 bytes), align: 1
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::DIn()              000015E6        DigialIn::DigialIn() (dio_adaptor)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000015F6 - 0000160B (0x16 bytes), align: 1
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::SetEvent(DInEvent &)
                                   000015F6        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::Get()              
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000160C - 00001615 (0xa bytes), align: 1
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::SetTimerInterval(unsigned char)
                                   0000160C        DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char) (BCComponentManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::evISR()            
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001616 - 0000167B (0x66 bytes), align: 1
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DIn::evTimerExpir()     00001616        DInTimerAdaptor::TimeOutEvent() (BCComponentManager)
               calls indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000167C - 00001685 (0xa bytes), align: 1
  Segment part 27.            Intra module refs:   DIn::evTimerExpir()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001686 - 0000168D (0x8 bytes), align: 1
  Segment part 28.            Intra module refs:   Segment part 27
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\dio_adaptor.r90
  PROGRAM MODULE, NAME : dio_adaptor

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from avr_uart
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRD                 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000032 - 00000032 (0x1 bytes), align: 0
  Segment part 2. ROOT.       Intra module refs:   E02SMBLed::GetPort()
                                                   E02SMBLed::SetPort(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_PORTD                00000032 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000063 - 00000063 (0x1 bytes), align: 0
  Segment part 3. ROOT.       Intra module refs:   DigialIn::GetPort()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_PING                 00000063 
    -------------------------------------------------------------------------
ABSOLUTE
  Relative segment, address: DATA 00000064 - 00000064 (0x1 bytes), align: 0
  Segment part 4. ROOT.       Intra module refs:   DigialIn::DigialIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _A_DDRG                 00000064 
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::new E02SMBLed()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::new DigialIn(DInEvent &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::new DigialIn()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000168E - 000016AB (0x1e bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::E02SMBLed()
                                   0000168E        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016AC - 000016B3 (0x8 bytes), align: 1
  Segment part 20.            Intra module refs:   E02SMBLed::E02SMBLed()
                                                   Segment part 26
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016B4 - 000016C3 (0x10 bytes), align: 1
  Segment part 21.            Intra module refs:   E02SMBLed::E02SMBLed()
                                                   E02SMBLed::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::SetPort(unsigned char)
                                   000016B4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016C4 - 000016CD (0xa bytes), align: 1
  Segment part 22.            Intra module refs:   E02SMBLed::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::GetPort()    000016C4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::DigialIn(DInEvent &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016CE - 000016D5 (0x8 bytes), align: 1
  Segment part 24.            Intra module refs:   DigialIn::DigialIn()
                                                   E02SMBLed::E02SMBLed()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016D6 - 000016DB (0x6 bytes), align: 1
  Segment part 25.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::DigialIn()    000016D6        __sti__routine() (MC_E02SMB_v1_3DriverFactory)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016DC - 000016F3 (0x18 bytes), align: 1
  Segment part 26.            Intra module refs:   DigialIn::DigialIn()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000016F4 - 00001703 (0x10 bytes), align: 1
  Segment part 27.            Intra module refs:   DigialIn::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::GetPort()     000016F4 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001704 - 00001713 (0x10 bytes), align: 1
  Segment part 28.            Intra module refs:   E02SMBLed::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::~E02SMBLed()
                                   00001704 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001714 - 00001723 (0x10 bytes), align: 1
  Segment part 29.            Intra module refs:   DigialIn::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::~DigialIn()   00001714 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 5. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 6. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 7. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 8. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000106 - 0000010B (0x6 bytes), align: 0
  Segment part 11.            Intra module refs:   E02SMBLed::E02SMBLed()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           E02SMBLed::__vtbl       00000106 
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000010C - 0000010F (0x4 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 26
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DigialIn::__vtbl        0000010C 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\led.r90
  PROGRAM MODULE, NAME : led

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::new Led()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001724 - 0000173D (0x1a bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::Led()              00001724        E02SMBLed::E02SMBLed() (dio_adaptor)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000173E - 00001743 (0x6 bytes), align: 1
  Segment part 10.            Intra module refs:   Led::Led()
                                                   Led::evTimerExpir()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001744 - 00001759 (0x16 bytes), align: 1
  Segment part 11.            Intra module refs:   Segment part 18
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::Init()             00001744 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::Blink(unsigned char, unsigned char, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000175A - 000017E3 (0x8a bytes), align: 1
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::evTimerExpir()     0000175A        TimerWithLedAdapter::TimeOutEvent() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000017E4 - 000017ED (0xa bytes), align: 1
  Segment part 15.            Intra module refs:   Led::evTimerExpir()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000017EE - 000017F5 (0x8 bytes), align: 1
  Segment part 16.            Intra module refs:   Led::evTimerExpir()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000017F6 - 000017FD (0x8 bytes), align: 1
  Segment part 17.            Intra module refs:   Led::evTimerExpir()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000017FE - 00001801 (0x4 bytes), align: 1
  Segment part 18.            Intra module refs:   Led::Led()
                                                   Led::evTimerExpir()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001802 - 00001811 (0x10 bytes), align: 1
  Segment part 19.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Led::~Led()             00001802 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000110 - 00000115 (0x6 bytes), align: 0
  Segment part 7.             Intra module refs:   Led::Led()

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\mcp3204.r90
  PROGRAM MODULE, NAME : mcp3204

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::new Mcp3204(ISpi &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::Mcp3204(ISpi &)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::Init()         
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::SetChannel(unsigned char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::GetADC()       
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mcp3204::GetADC(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\pwm.r90
  PROGRAM MODULE, NAME : pwm

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::new Pwm(IPwmPort *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001812 - 00001821 (0x10 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::Pwm(IPwmPort *)    00001812        BCComponentManager::CreatePwm() (BCComponentManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001822 - 00001831 (0x10 bytes), align: 1
  Segment part 10.            Intra module refs:   Pwm::__vtbl
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::~Pwm()             00001822        <Unnamed 5> (BCComponentManager)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001832 - 00001879 (0x48 bytes), align: 1
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::SetDuty(unsigned short)
                                   00001832        myPwmAdaptor::SetDuty(unsigned short) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000187A - 0000187F (0x6 bytes), align: 1
  Segment part 12.            Intra module refs:   Pwm::SetDuty(unsigned short)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::Run()              0000187A 
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::Stop()             
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001880 - 00001887 (0x8 bytes), align: 1
  Segment part 14.            Intra module refs:   Pwm::Run()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001888 - 0000188F (0x8 bytes), align: 1
  Segment part 15.            Intra module refs:   Pwm::SetDuty(unsigned short)
                                                   Segment part 14
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001890 - 000018A1 (0x12 bytes), align: 1
  Segment part 16.            Intra module refs:   Pwm::Run()
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000116 - 00000117 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   Pwm::Pwm(IPwmPort *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Pwm::__vtbl             00000116 

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ringbuffer.r90
  PROGRAM MODULE, NAME : ringbuffer

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::new RingBuffer()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018A2 - 000018B3 (0x12 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::RingBuffer()
                                   000018A2        Segment part 18 (serialIO)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::Flush()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::isEmpty()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018B4 - 000018B7 (0x4 bytes), align: 1
  Segment part 12.            Intra module refs:   RingBuffer::Pop(unsigned char &)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018B8 - 000018BB (0x4 bytes), align: 1
  Segment part 13.            Intra module refs:   RingBuffer::Pop(unsigned char &)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018BC - 00001901 (0x46 bytes), align: 1
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::PushBack(unsigned char)
                                   000018BC        Segment part 34 (serialIO)
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001902 - 0000192B (0x2a bytes), align: 1
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::Pop(unsigned char &)
                                   00001902        Segment part 38 (serialIO)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000192C - 0000193B (0x10 bytes), align: 1
  Segment part 16.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           RingBuffer::~RingBuffer()
                                   0000192C 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 00000118 - 00000119 (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   RingBuffer::RingBuffer()

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\serialIO.r90
  PROGRAM MODULE, NAME : serialIO

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::new SerialIO(ISerialPort &, SerialEvent &, WRITE_OPT_T)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::new SerialIO(ISerialPort &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000193C - 00001941 (0x6 bytes), align: 1
  Segment part 12.            Intra module refs:   Segment part 32
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::SerialIO(ISerialPort &, SerialEvent &, WRITE_OPT_T)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001942 - 00001943 (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   SerialIO::SerialIO(ISerialPort &)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001944 - 00001949 (0x6 bytes), align: 1
  Segment part 15.            Intra module refs:   Segment part 14
                                                   SerialIO::evTick()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000194A - 00001959 (0x10 bytes), align: 1
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::SerialIO(ISerialPort &)
                                   0000194A        BCComponentManager::Init() (BCComponentManager)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000195A - 0000196D (0x14 bytes), align: 1
  Segment part 17.            Intra module refs:   SerialIO::SerialIO(ISerialPort &)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000196E - 0000198F (0x22 bytes), align: 1
  Segment part 18.            Intra module refs:   SerialIO::SerialIO(ISerialPort &)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001990 - 000019B1 (0x22 bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::SetEvent(SerialEvent &)
                                   00001990        Term_Project_s::Init() (Term_Project_s)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::rxFlush()     
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::txFlush()     
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000019B2 - 000019E1 (0x30 bytes), align: 1
  Segment part 23.            Intra module refs:   Segment part 27
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(unsigned char)
                                   000019B2        mySerialEvent::Receive(unsigned char) (Term_Project_s)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000019E2 - 000019E7 (0x6 bytes), align: 1
  Segment part 24.            Intra module refs:   Segment part 18
                                                   SerialIO::Write(unsigned char)
                                                   SerialIO::evTick()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(unsigned char const *, unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000019E8 - 000019E9 (0x2 bytes), align: 1
  Segment part 26.            Intra module refs:   SerialIO::Write(char __flash *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000019EA - 000019EF (0x6 bytes), align: 1
  Segment part 27.            Intra module refs:   Segment part 26
                                                   SerialIO::Write(char const *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000019F0 - 00001A2F (0x40 bytes), align: 1
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(char const *)
                                   000019F0        mySerialEvent::Receive(unsigned char) (Term_Project_s)
                                                   mySerialOutAdaptor::Write(char *) (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001A30 - 00001A35 (0x6 bytes), align: 1
  Segment part 29.            Intra module refs:   SerialIO::Write(char __flash *)
                                                   SerialIO::Write(char const *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001A36 - 00001A79 (0x44 bytes), align: 1
  Segment part 30.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::Write(char __flash *)
                                   00001A36        Term_Project_s::Init() (Term_Project_s)
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001A7A - 00001AAB (0x32 bytes), align: 1
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::evTick()      00001A7A        BCComponentMod::Execute() (BCComponentManager)
               calls direct and indirect
               CSTACK = 00000000 ( 00000003 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AAC - 00001AB1 (0x6 bytes), align: 1
  Segment part 32.            Intra module refs:   SerialIO::Write(unsigned char)
                                                   SerialIO::evTick()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AB2 - 00001AB3 (0x2 bytes), align: 1
  Segment part 33.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PushBackRxBuff(unsigned char)
                                   00001AB2        usart0_rxc() (avr_uart)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AB4 - 00001AB7 (0x4 bytes), align: 1
  Segment part 34.            Intra module refs:   SerialIO::PushBackRxBuff(unsigned char)
                                                   SerialIO::PushBackTxBuff(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AB8 - 00001AB9 (0x2 bytes), align: 1
  Segment part 35.            Intra module refs:   Segment part 18
                                                   SerialIO::PopRxBuff(unsigned char &)
                                                   SerialIO::PushBackRxBuff(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001ABA - 00001ABD (0x4 bytes), align: 1
  Segment part 36.            Intra module refs:   Segment part 35
                                                   Segment part 40
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001ABE - 00001ABF (0x2 bytes), align: 1
  Segment part 37.            Intra module refs:   SerialIO::evTick()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PopRxBuff(unsigned char &)
                                   00001ABE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AC0 - 00001AC3 (0x4 bytes), align: 1
  Segment part 38.            Intra module refs:   SerialIO::PopRxBuff(unsigned char &)
                                                   SerialIO::PopTxBuff(unsigned char &)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AC4 - 00001AC7 (0x4 bytes), align: 1
  Segment part 39.            Intra module refs:   SerialIO::Write(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PushBackTxBuff(unsigned char)
                                   00001AC4 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AC8 - 00001ACB (0x4 bytes), align: 1
  Segment part 40.            Intra module refs:   Segment part 18
                                                   SerialIO::PopTxBuff(unsigned char &)
                                                   SerialIO::PushBackTxBuff(unsigned char)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001ACC - 00001ACF (0x4 bytes), align: 1
  Segment part 41.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::PopTxBuff(unsigned char &)
                                   00001ACC        usart0_txc() (avr_uart)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AD0 - 00001ADF (0x10 bytes), align: 1
  Segment part 42.            Intra module refs:   Segment part 7
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SerialIO::~SerialIO()   00001AD0 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Relative segment, address: CODE 0000011A - 0000011B (0x2 bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 17

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\split2.r90
  PROGRAM MODULE, NAME : split2

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(_Myt const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(_Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 _Copy_backward_opt0(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=string const *, _BidIt2=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy0(_InIt, _InIt, _FwdIt)[with _InIt=string const *, _FwdIt=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=string *, _Diff=unsigned int, _Tval=string, _Alloc=allocator<string>]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Tidy0()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=string, _Alloc=allocator<string>, _Ty1=string]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           split(string const &)   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\terminal_service.r90
  PROGRAM MODULE, NAME : terminal_service

  SEGMENTS IN THE MODULE
  ======================
NEAR_F
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           errormsg                
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::new TerminalService(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::TerminalService(unsigned char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::Init()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::Input(char)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::isprint(char)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::Input(string const &)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TerminalService::AddCommand(ITerminalCommand &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 50. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(_Myt const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(char const *, char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(char *, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::erase(char *, char *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::clear()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::compare(_Myt const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr()        
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _OutIt _Copy_opt0(_InIt, _InIt, _OutIt)[with _InIt=string const *, _OutIt=string *]
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 59. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BidIt2 _Copy_backward_opt0(_BidIt1, _BidIt1, _BidIt2)[with _BidIt1=string const *, _BidIt2=string *]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 60. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 61. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _FwdIt _Uninit_copy0(_InIt, _InIt, _FwdIt)[with _InIt=string const *, _FwdIt=string *]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 62. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Uninit_copy(char const *, char const *, char *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 63. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Uninitialized_fill_n(_FwdIt, _Diff, _Tval const &, _Alloc &)[with _FwdIt=string *, _Diff=unsigned int, _Tval=string, _Alloc=allocator<string>]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Zero()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_value<allocator<void>>::_Buy(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Tidy0()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 67. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Assign(_Vector_impl<string, allocator<string>> const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 76. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           void _Vector_impl<_Ty, _Alloc>::_Insert_n(_Vector_impl<_Ty, _Alloc>::pointer, _Vector_impl<_Ty, _Alloc>::size_type, _Ty1 const &)[with _Ty=string, _Alloc=allocator<string>, _Ty1=string]
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Erase(string *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 78. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 86. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 87. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 88. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 89. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 90. TENTATIVE. Used definition from split2
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 91. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 92. TENTATIVE. Used definition from TimerManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator+(char const *, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator+(string const &, char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 9. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 14. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_I
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 10. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\type.r90
  PROGRAM MODULE, NAME : type

  SEGMENTS IN THE MODULE
  ======================
NEAR_F
  Relative segment, address: CODE 0000011C - 00000274 (0x159 bytes), align: 0
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           gnu_lic                 0000011C        Term_Project_s::Init() (Term_Project_s)
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\xmodem.r90
  PROGRAM MODULE, NAME : xmodem

  SEGMENTS IN THE MODULE
  ======================
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EECR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEDR                 
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARL                
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 4. TENTATIVE. Used definition from ANSI200
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEARH                
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.

    *************************************************************************

  FILE NAME : C:\Program Files (x86)\IAR Systems\Embedded Workbench 5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.r90
  LIBRARY MODULE, NAME : ?abort

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001AE0 - 00001AF1 (0x12 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           abort                   00001AE0        _Nomemory() (?nomemory)
                                                   __pure_virtual_called (?xpurevirtual)
                                                   __record_needed_destruction (?cppinit)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?__dbg_break

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001AF2 - 00001AF3 (0x2 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __DebugBreak            00001AF2        __exit (?__exit)
                                                   abort (?abort)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?__exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001AF4 - 00001B05 (0x12 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __exit                  00001AF4        Segment part 5 (?_exit)
                                                   abort (?abort)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?_exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001B06, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _exit                   00001B06        ?cstartup_call_main (?C_STARTUP)
                                                   exit (?exit)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B06 - 00001B09 (0x4 bytes), align: 1
  Segment part 1.             Intra module refs:   __cstart_call_dtors
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B0A - 00001B0D (0x4 bytes), align: 1
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __cstart_call_dtors     00001B0A        __record_needed_destruction (?cppinit)
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __cstart_closeall       
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B0E - 00001B11 (0x4 bytes), align: 1
  Segment part 4.             Intra module refs:   Segment part 1
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B12 - 00001B15 (0x4 bytes), align: 1
  Segment part 5.             Intra module refs:   _exit

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?cppinit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001B16 - 00001B73 (0x5e bytes), align: 1
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __call_ctors            00001B16        ?call_ctors (?C_STARTUP)
               calls indirect
               CSTACK = 00000000 ( 0000000B )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __alloc_record_needed_destruction
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008B7 - 000008B8 (0x2 bytes), align: 0
  Segment part 3.             Intra module refs:   Segment part 10
                                                   __call_dtors
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001B74 - 00001B9F (0x2c bytes), align: 1
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __record_needed_destruction
                                   00001B74        MC_E02SMBDriverFactory::CreateAdc() (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 27 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 32 (Term_Project_s)
                                                   Segment part 33 (Term_Project_s)
                                                   Segment part 54 (BCComponentManager)
                                                   TimerManager::GetInstance(ITimer *) (TimerManager)
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BA0 - 00001BA5 (0x6 bytes), align: 1
  Segment part 8.             Intra module refs:   __call_dtors
                                                   __record_needed_destruction
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BA6 - 00001BE1 (0x3c bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __call_dtors            00001BA6        __cstart_call_dtors (?_exit)
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BE2 - 00001BE7 (0x6 bytes), align: 1
  Segment part 10.            Intra module refs:   __call_dtors
                                                   __record_needed_destruction
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BE8 - 00001BF1 (0xa bytes), align: 1
  Segment part 11.            Intra module refs:   __call_dtors
                                                   __record_needed_destruction
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __tiny_vec_cctor        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_vec_cctor        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?RESET

  SEGMENTS IN THE MODULE
  ======================
INTVEC
  Common segment, address: CODE 00000000 - 00000003 (0x4 bytes), align: 1
  Segment part 0. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __program_start         00000000        Absolute parts (?ABS_ENTRY_MOD)
           ?RESET                  00000000        Segment part 2 (?C_STARTUP)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?C_STARTUP

  SEGMENTS IN THE MODULE
  ======================
CSTACK
  Segment part 0. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BF2, align: 1
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?C_STARTUP              00001BF2        Segment part 0 (?RESET)
           __RESTART               00001BF2 
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __RSTACK_in_external_ram
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __RSTACK_in_external_ram_new_way
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BF2 - 00001BFD (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   Segment part 2
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?zero_reg_initialization
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001BFE - 00001C01 (0x4 bytes), align: 1
  Segment part 7.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?call_low_level_init    00001BFE 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C02 - 00001C09 (0x8 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?need_segment_init      00001C02        ?<Segment init: NEAR_I> (BCComponentManager)
                                                   ?<Segment init: NEAR_Z> (BCComponentManager)
    -------------------------------------------------------------------------
DIFUNCT
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C0A - 00001C19 (0x10 bytes), align: 1
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?call_ctors             00001C0A        Segment part 24 (MC_E02SMB_v1_3DriverFactory)
                                                   Segment part 27 (Term_Project_s)
                                                   Segment part 30 (BCComponentManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001C1A - 00001C25 (0xc bytes), align: 1
  Segment part 11.            Intra module refs:   ?call_low_level_init
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?cstartup_call_main     00001C1A 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?delop_0

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001C26 - 00001C31 (0xc bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator delete(void *)
                                   00001C26        Adc::~Adc() (adc)
                                                   Avr_adc::~Avr_adc() (avr_adc)
                                                   Avr_pwm::~Avr_pwm() (avr_pwm)
                                                   Avr_timer0::~Avr_timer0() (avr_timer)
                                                   Avr_uart0::~Avr_uart0() (avr_uart)
                                                   BCComponentMod::~BCComponentMod() (BCComponentManager)
                                                   CalClkFuncGen::~CalClkFuncGen() (CalClkFuncGen)
                                                   ClcdAdaptor::~ClcdAdaptor() (clcd_adaptor)
                                                   DInTimerAdaptor::~DInTimerAdaptor() (BCComponentManager)
                                                   DigialIn::~DigialIn() (dio_adaptor)
                                                   E02SMBLed::~E02SMBLed() (dio_adaptor)
                                                   Led::~Led() (led)
                                                   Pwm::~Pwm() (pwm)
                                                   RingBuffer::~RingBuffer() (ringbuffer)
                                                   SerialIO::~SerialIO() (serialIO)
                                                   SystemManager::~SystemManager() (System_Manager)
                                                   Term_Project_s::~Term_Project_s() (Term_Project_s)
                                                   TimerManager::~TimerManager() (TimerManager)
                                                   TimerWithLedAdapter::~TimerWithLedAdapter() (BCComponentManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0() (TimerManager)
                                                   myAdcAdaptor::~myAdcAdaptor() (Term_Project_s)
                                                   myPwmAdaptor::~myPwmAdaptor() (Term_Project_s)
                                                   mySWEvent::~mySWEvent() (Term_Project_s)
                                                   mySerialEvent::~mySerialEvent() (Term_Project_s)
                                                   mySerialOutAdaptor::~mySerialOutAdaptor() (Term_Project_s)
                                                   myTimer1s::~myTimer1s() (Term_Project_s)
                                                   myTimer500ms::~myTimer500ms() (Term_Project_s)
                                                   mylcdAdaptor::~mylcdAdaptor() (Term_Project_s)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?div

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001C32 - 00001C55 (0x24 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           div                     00001C32        _GenldLarge (?xprintflarge)
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?errno

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Errno             
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __taabi_errno_addr      
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001C56 - 00001C59 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           exit                    00001C56        ?cstartup_call_main (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?ios

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Fnarray::new _Fnarray(int, ios_base::event_callback, ios_base::_Fnarray *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Iosarray::new _Iosarray(int, ios_base::_Iosarray *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Iosarray::_Iosarray(int, ios_base::_Iosarray *)
                                   
               not allocated function
    -------------------------------------------------------------------------
NEAR_I
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _BADOFF                 
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           fpos::_Stz              
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Fpz                    
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Index        
    -------------------------------------------------------------------------
NEAR_I
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Sync         
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::clear(int, bool)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::copyfmt(ios_base const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::imbue(locale const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::register_callback(event_callback, int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::~ios_base()   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Callfns(enum event)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Findarr(int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Addstd()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Init()       
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::_Tidy()       
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 6. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_F
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios_base::__vtbl        

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?istream

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::in_avail()   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
    -------------------------------------------------------------------------
CODE
  Segment part 5. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
    -------------------------------------------------------------------------
CODE
  Segment part 6. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::snextc()     
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputbackc(char)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sungetc()    
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 10. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios::clear(int, bool)   
    -------------------------------------------------------------------------
CODE
  Segment part 11. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::_Sentry_base(istream &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::~_Sentry_base()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::sentry::sentry(istream &, bool)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Ipfx(bool)    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(_Bool &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(short &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned short &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(int &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned int &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(long long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(unsigned long long &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(float &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(double &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(long double &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(void * &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::operator>>(_Mysb *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get(char *, int, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get(char &)    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::get(_Mysb &, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::getline(char *, int, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::ignore(int, int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::read(char *, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::readsome(char *, int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::peek()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::putback(char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::unget()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::sync()         
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::seekg(streampos)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::seekg(long, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::tellg()        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator>>(istream &, char *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 120. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator>>(istream &, char &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 122. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws(istream &)           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 124. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 126. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?S_EC_MUL_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001C5A - 00001C69 (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?S_EC_MUL_L02           00001C5A        Segment part 19 (?xprintflarge)
                                                   div (?div)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?S_SHL_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?S_SHL_L02              

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?US_SHR_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?US_SHR_L02             

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?US_DIVMOD_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001C6A - 00001C91 (0x28 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?US_DIVMOD_L02          00001C6A        ?SS_DIVMOD_L02 (?SS_DIVMOD_L02)
                                                   Led::evTimerExpir() (led)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?SS_DIVMOD_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001C92 - 00001CC1 (0x30 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SS_DIVMOD_L02          00001C9A        div (?div)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?L_EC_MUL_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001CC2 - 00001D01 (0x40 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_EC_MUL_L03           00001CC2        _LdtobLarge (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?L_SHL_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001D02 - 00001D11 (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_SHL_L03              00001D02        Avr_uart0::Init() (avr_uart)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?UL_SHR_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001D12 - 00001D21 (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL_SHR_L03             00001D12        Segment part 9 (?FLOATS_L04)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?UL_DIVMOD_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001D22 - 00001D67 (0x46 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL_DIVMOD_L03          00001D22        ?SL_DIVMOD_L03 (?SL_DIVMOD_L03)
                                                   Avr_uart0::Init() (avr_uart)
                                                   Segment part 62 (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?SL_DIVMOD_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001D68 - 00001D8B (0x24 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SL_DIVMOD_L03          00001D68        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001D8C - 00001D9B (0x10 bytes), align: 1
  Segment part 1.             Intra module refs:   ?SL_DIVMOD_L03
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_NEG_L03              00001D8C        Segment part 9 (?FLOATS_L04)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001D9C - 00001DAB (0x10 bytes), align: 1
  Segment part 2.             Intra module refs:   ?SL_DIVMOD_L03
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_NEG_Q_L03            00001D9C 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?FLOATS_L04

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00001DAC - 00001DD5 (0x2a bytes), align: 1
  Segment part 0.             Intra module refs:   ?F2SL_L04
                                                   ?F2UL_L04
                                                   ?F_ADD_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001DD6 - 00001E29 (0x54 bytes), align: 1
  Segment part 1.             Intra module refs:   ?F_ADD_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_ROUND_L04            00001DF6 
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E2A - 00001E2B (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?F_ROUND_L04
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SL2F_L04               
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E2C - 00001E37 (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   ?UL2F_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E38 - 00001E3B (0x4 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL2F_L04               00001E38        Adc::SetFrequency(unsigned char) (adc)
                                                   _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E3C - 00001E4F (0x14 bytes), align: 1
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F2UL_L04               00001E3C        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E50 - 00001E61 (0x12 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F2SL_L04               00001E50        Adc::SetFrequency(unsigned char) (adc)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E62 - 00001E85 (0x24 bytes), align: 1
  Segment part 9.             Intra module refs:   ?F2SL_L04
                                                   ?F2UL_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001E86 - 00001EB3 (0x2e bytes), align: 1
  Segment part 10.            Intra module refs:   ?F_ADD_L04
                                                   ?F_CMP_LT_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 11
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?TEST_P_L04             00001E86 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001EB4 - 00001ED3 (0x20 bytes), align: 1
  Segment part 11.            Intra module refs:   ?F_ADD_L04
                                                   ?F_CMP_LT_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 17
                                                   Segment part 22
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001ED4 - 00001F7B (0xa8 bytes), align: 1
  Segment part 12.            Intra module refs:   ?F_SUB_L04
                                                   Segment part 17
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_ADD_L04              00001EF4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F7C - 00001F81 (0x6 bytes), align: 1
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_SUB_L04              00001F7C        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F82 - 00001F8D (0xc bytes), align: 1
  Segment part 14.            Intra module refs:   ?F2SL_L04
                                                   ?F_DIV_L04
                                                   ?F_INFINITE_L04
                                                   ?F_MUL_L04
                                                   ?F_NAN_L04
                                                   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_ZERO_L04             00001F82 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F8E - 00001F95 (0x8 bytes), align: 1
  Segment part 15.            Intra module refs:   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 3
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_INFINITE_L04         00001F8E 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F96 - 00001F9B (0x6 bytes), align: 1
  Segment part 16.            Intra module refs:   ?F_ADD_L04
                                                   ?F_DIV_L04
                                                   ?F_MUL_L04
                                                   Segment part 17
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_NAN_L04              00001F96 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001F9C - 00001FB5 (0x1a bytes), align: 1
  Segment part 17.            Intra module refs:   ?F_DIV_L04
                                                   ?F_MUL_L04
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001FB6 - 0000208B (0xd6 bytes), align: 1
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_MUL_L04              00001FB6        Adc::SetFrequency(unsigned char) (adc)
                                                   Segment part 55 (?xprintflarge)
                                                   scale (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000208C - 0000219B (0x110 bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_DIV_L04              000020A8        Adc::SetFrequency(unsigned char) (adc)
                                                   _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_CMP_EQ_L04           
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000219C - 000021A3 (0x8 bytes), align: 1
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_CMP_LT_L04           0000219C        _LdtobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000021A4 - 000021CB (0x28 bytes), align: 1
  Segment part 22.            Intra module refs:   ?F_CMP_LT_L04
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?F_CMP_GE_L04           

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xV_SWITCH_L06

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000021CC - 00002267 (0x9c bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?CV_SWITCH_L06          000021DE        _PrintfLarge (?xprintflarge)
           ?SV_SWITCH_L06          000021E6 
           ?LV_SWITCH_L06          000021F2 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?MOVE_LONG_L07

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002268 - 0000227D (0x16 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_SRAM_SRAM_16_L07    00002268        Segment part 51 (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Segment part 1. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_FLASH_SRAM_16EC_16_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_FLASH_SRAM_24EC_16_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_GENERIC24_SRAM_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_SRAM_GENERIC24_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_FLASH_GENERIC24_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_GENERIC_GENERIC_24_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ML_GENERIC24_FARG_L07
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LONG_FARG_8_L07        
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LONG_FARG_16_L07       
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LONG_FARG_24_L07       
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?FLASH_FARG_8_L07       
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?FLASH_FARG_16_L07      
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?FLASH_FARG_24_L07      
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?HUGEFLASH_FARG_L07     
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?MEMCLR_8_L07           
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?MEMCLR_16_L07          

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?PROLOGUE_L09

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000227E - 0000227F (0x2 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE16_L09         0000227E        _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002280 - 00002281 (0x2 bytes), align: 1
  Segment part 1.             Intra module refs:   ?PROLOGUE16_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE15_L09         00002280 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002282 - 00002283 (0x2 bytes), align: 1
  Segment part 2.             Intra module refs:   ?PROLOGUE15_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE14_L09         00002282        _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002284 - 00002285 (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?PROLOGUE14_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE13_L09         00002284 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002286 - 00002287 (0x2 bytes), align: 1
  Segment part 4.             Intra module refs:   ?PROLOGUE13_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE12_L09         00002286 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002288 - 00002289 (0x2 bytes), align: 1
  Segment part 5.             Intra module refs:   ?PROLOGUE12_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE11_L09         00002288        _GenldLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   __call_ctors (?cppinit)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000228A - 0000228B (0x2 bytes), align: 1
  Segment part 6.             Intra module refs:   ?PROLOGUE11_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE10_L09         0000228A        scale (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000228C - 0000228D (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   ?PROLOGUE10_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE9_L09          0000228C 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000228E - 0000228F (0x2 bytes), align: 1
  Segment part 8.             Intra module refs:   ?PROLOGUE9_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE8_L09          0000228E        SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   div (?div)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002290 - 00002291 (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   ?PROLOGUE8_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE7_L09          00002290 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002292 - 00002293 (0x2 bytes), align: 1
  Segment part 10.            Intra module refs:   ?PROLOGUE7_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE6_L09          00002292        BCComponentManager::Init() (BCComponentManager)
                                                   TimerManager::evTick() (TimerManager)
                                                   _PutcharsLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   pad (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002294 - 00002295 (0x2 bytes), align: 1
  Segment part 11.            Intra module refs:   ?PROLOGUE6_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE5_L09          00002294 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002296 - 00002297 (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   ?PROLOGUE5_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE4_L09          00002296        Adc::evTick() (adc)
                                                   BCComponentManager::CreateAdc() (BCComponentManager)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   Clcd::Write(unsigned char, char *) (clcd)
                                                   DIn::evTimerExpir() (dio)
                                                   DOut::Set(unsigned char) (dio)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   RingBuffer::PushBack(unsigned char) (ringbuffer)
                                                   SerialIO::Write(unsigned char) (serialIO)
                                                   Term_Project_s::Init() (Term_Project_s)
                                                   TimerManager::~TimerManager() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   __iar_Dunscale (?xprintflarge)
                                                   avr_delay_ms(unsigned int) (avr_common)
                                                   malloc (?xxmemxmalloc)
                                                   mySerialEvent::Receive(unsigned char) (Term_Project_s)
                                                   sprintf (?sprintf)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002298 - 00002299 (0x2 bytes), align: 1
  Segment part 13.            Intra module refs:   ?PROLOGUE4_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE3_L09          00002298        Term_Project_s::~Term_Project_s() (Term_Project_s)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000229A - 0000229B (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   ?PROLOGUE3_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE2_L09          0000229A 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000229C - 0000229D (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   ?PROLOGUE2_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE1_L09          0000229C 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000229E - 0000229F (0x2 bytes), align: 1
  Segment part 16.            Intra module refs:   ?PROLOGUE1_L09

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?EPILOGUE_B_L09

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022A0 - 000022A1 (0x2 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B16_L09       000022A0        Segment part 43 (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022A2 - 000022A3 (0x2 bytes), align: 1
  Segment part 1.             Intra module refs:   ?EPILOGUE_B16_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B15_L09       000022A2 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022A4 - 000022A5 (0x2 bytes), align: 1
  Segment part 2.             Intra module refs:   ?EPILOGUE_B15_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B14_L09       000022A4        _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022A6 - 000022A7 (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?EPILOGUE_B14_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B13_L09       000022A6 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022A8 - 000022A9 (0x2 bytes), align: 1
  Segment part 4.             Intra module refs:   ?EPILOGUE_B13_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B12_L09       000022A8 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022AA - 000022AB (0x2 bytes), align: 1
  Segment part 5.             Intra module refs:   ?EPILOGUE_B12_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B11_L09       000022AA        Segment part 68 (?xprintflarge)
                                                   __call_ctors (?cppinit)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022AC - 000022AD (0x2 bytes), align: 1
  Segment part 6.             Intra module refs:   ?EPILOGUE_B11_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B10_L09       000022AC        scale (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022AE - 000022AF (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   ?EPILOGUE_B10_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B9_L09        000022AE 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022B0 - 000022B1 (0x2 bytes), align: 1
  Segment part 8.             Intra module refs:   ?EPILOGUE_B9_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B8_L09        000022B0        Segment part 29 (serialIO)
                                                   div (?div)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022B2 - 000022B3 (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   ?EPILOGUE_B8_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B7_L09        000022B2 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022B4 - 000022B5 (0x2 bytes), align: 1
  Segment part 10.            Intra module refs:   ?EPILOGUE_B7_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B6_L09        000022B4        BCComponentManager::Init() (BCComponentManager)
                                                   Segment part 41 (?xprintflarge)
                                                   TimerManager::evTick() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022B6 - 000022B7 (0x2 bytes), align: 1
  Segment part 11.            Intra module refs:   ?EPILOGUE_B6_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B5_L09        000022B6 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022B8 - 000022B9 (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   ?EPILOGUE_B5_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B4_L09        000022B8        Adc::evTick() (adc)
                                                   BCComponentManager::CreateAdc() (BCComponentManager)
                                                   CalClkFuncGen::InputCh(char) (CalClkFuncGen)
                                                   Clcd::Write(unsigned char, char *) (clcd)
                                                   Pwm::SetDuty(unsigned short) (pwm)
                                                   RingBuffer::PushBack(unsigned char) (ringbuffer)
                                                   Segment part 14 (dio)
                                                   SerialIO::Write(unsigned char) (serialIO)
                                                   Term_Project_s::Init() (Term_Project_s)
                                                   TimerManager::~TimerManager() (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short) (TimerManager)
                                                   __iar_Dunscale (?xprintflarge)
                                                   avr_delay_ms(unsigned int) (avr_common)
                                                   malloc (?xxmemxmalloc)
                                                   mySerialEvent::Receive(unsigned char) (Term_Project_s)
                                                   sprintf (?sprintf)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022BA - 000022BB (0x2 bytes), align: 1
  Segment part 13.            Intra module refs:   ?EPILOGUE_B4_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B3_L09        000022BA        Term_Project_s::~Term_Project_s() (Term_Project_s)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022BC - 000022BD (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   ?EPILOGUE_B3_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B2_L09        000022BC 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022BE - 000022BF (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   ?EPILOGUE_B2_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B1_L09        000022BE 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022C0 - 000022C9 (0xa bytes), align: 1
  Segment part 16.            Intra module refs:   ?EPILOGUE_B1_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B0_L09        000022C0 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR4_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R4_is_cg_reg
                                   000022CA        ?ULL_DIV_L12 (?LL_DIV_L12)
                                                   ?ULL_MOD_L12 (?LL_DIV_L12)
                                                   BCComponentManager::Init() (BCComponentManager)
                                                   Segment part 1 (?LL_DIV_L12)
                                                   Segment part 2 (?LL_DIV_L12)
                                                   Segment part 3 (?LL_DIV_L12)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   TimerManager::evTick() (TimerManager)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _PutcharsLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   pad (?xprintflarge)
                                                   scale (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR5_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R5_is_cg_reg
                                   000022CA        BCComponentManager::Init() (BCComponentManager)
                                                   SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   TimerManager::evTick() (TimerManager)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _PutcharsLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short) (TimerManager)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   pad (?xprintflarge)
                                                   scale (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR6_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R6_is_cg_reg
                                   000022CA        SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   div (?div)
                                                   scale (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR7_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R7_is_cg_reg
                                   000022CA        SerialIO::Write(char __flash *) (serialIO)
                                                   SerialIO::Write(char const *) (serialIO)
                                                   _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   div (?div)
                                                   scale (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR8_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R8_is_cg_reg
                                   000022CA        _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   scale (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR9_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R9_is_cg_reg
                                   000022CA        _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)
                                                   scale (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR10_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R10_is_cg_reg
                                   000022CA        _GenldLarge (?xprintflarge)
                                                   _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _PrintfLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
                                                   __call_ctors (?cppinit)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR11_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R11_is_cg_reg
                                   000022CA        _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR12_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R12_is_cg_reg
                                   000022CA        _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR13_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R13_is_cg_reg
                                   000022CA        _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)
                                                   _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR14_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R14_is_cg_reg
                                   000022CA        _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR15_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R15_is_cg_reg
                                   000022CA        _LdtobLarge (?xprintflarge)
                                                   _LitobLarge (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?LL_MUL_L12

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_MUL_L12             

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?LL_DIV_L12

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022CA - 000022CF (0x6 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ULL_DIV_L12            000022CA        _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022D0 - 000022EB (0x1c bytes), align: 1
  Segment part 1.             Intra module refs:   ?ULL_DIV_L12
                                                   ?ULL_MOD_L12
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000022EC - 0000231B (0x30 bytes), align: 1
  Segment part 2.             Intra module refs:   ?ULL_DIV_L12
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000231C - 00002327 (0xc bytes), align: 1
  Segment part 3.             Intra module refs:   ?ULL_MOD_L12
                                                   Segment part 2
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002328 - 0000238B (0x64 bytes), align: 1
  Segment part 4.             Intra module refs:   ?ULL_DIV_L12
                                                   ?ULL_MOD_L12
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000238C - 00002393 (0x8 bytes), align: 1
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ULL_MOD_L12            0000238C        _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SLL_DIV_L12            
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SLL_MOD_L12            

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?LONGLONG

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 0. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_SHL_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 1. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?ULL_SHR_L12            
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?SLL_SHR_L12            
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_ADD_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_AND_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_IOR_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_XOR_L12             
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_SUB_L12             
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002394 - 000023B3 (0x20 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_NEG_L12             00002394        _LitobLarge (?xprintflarge)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000023B4 - 000023D5 (0x22 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?LL_CMP_L12             000023B4        Segment part 15 (?xprintflarge)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?low_level_init

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000023D6 - 000023D9 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __low_level_init        000023D6        ?call_low_level_init (?C_STARTUP)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memchr

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memchr                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000023DA - 000023F9 (0x20 bytes), align: 1
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Memchr            000023DA        _PrintfLarge (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memcmp

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memcmp                  
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memcpy

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000023FA - 00002413 (0x1a bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memcpy                  000023FA        Segment part 69 (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memmove

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002414 - 00002453 (0x40 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memmove                 00002414        _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *) (TimerManager)
                                                   _Uninit_copy(char const *, char const *, char *) (TimerManager)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?memset

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           memset                  
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?new

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 000008B9 - 000008BA (0x2 bytes), align: 0
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_New_hand          000008B9        operator new(size_t) (?newop_0)
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           set_new_handler(new_handler)
                                   
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?newop_0

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002454 - 0000248D (0x3a bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new(size_t)    00002454        _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int) (TimerManager)
               calls direct and indirect
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?nomemory

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000248E - 00002491 (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Nomemory()             0000248E        operator new(size_t) (?newop_0)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?ostream

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 12. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
    -------------------------------------------------------------------------
CODE
  Segment part 13. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::snextc()     
    -------------------------------------------------------------------------
CODE
  Segment part 15. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, unsigned long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, long long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, unsigned long long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, void const *) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios::clear(int, bool)   
    -------------------------------------------------------------------------
CODE
  Segment part 21. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::_Sentry_base(ostream &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::~_Sentry_base()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 24. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::sentry(ostream &)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::~sentry()
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(_Bool)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(short)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned short)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(long long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(unsigned long long)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(float)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(double)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(long double)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(void const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::operator<<(_Mysb *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::put(char)      
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::write(char const *, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::flush()        
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::seekp(streampos)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::seekp(long, int)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator<<(ostream &, char const *)
                                   
               calls direct and indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator<<(ostream &, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 10. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?segment_init

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002492 - 00002499 (0x8 bytes), align: 1
  Segment part 3.             Intra module refs:   __segment_init
           LOCAL                   ADDRESS         
           =====                   =======         
           __memclr                00002492 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000249A - 000024A5 (0xc bytes), align: 1
  Segment part 4.             Intra module refs:   __segment_init
           LOCAL                   ADDRESS         
           =====                   =======         
           __flashcpy              0000249A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024A6 - 000024B1 (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   __flashcpy
                                                   __memclr
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000024B2 - 00002511 (0x60 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __segment_init          000024B2        ?need_segment_init (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 7. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?sprintf

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002512 - 0000255B (0x4a bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sprintf                 00002512        CalClkFuncGen::tm1s() (CalClkFuncGen)
               calls direct
               CSTACK = 00000000 ( 00000008 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strchr

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strchr                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000255C - 0000256F (0x14 bytes), align: 1
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Strchr            0000255C        _PrintfLarge (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strcspn

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strcspn                 
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?string

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Eos(size_t)    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Inside(char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. TENTATIVE. Used definition from terminal_service
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr()        
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Myptr() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::snextc()     
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ios::clear(int, bool)   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::_Sentry_base(ostream &)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::_Sentry_base::~_Sentry_base()
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::sentry(ostream &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ostream::sentry::~sentry()
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::_Sentry_base(istream &)
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::_Sentry_base::~_Sentry_base()
                                   
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           istream::sentry::sentry(istream &, bool)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _String_base::_Xlen() const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _String_base::_Xran() const
                                   
               not allocated function
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::npos            
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(_Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::append(size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(_Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::assign(size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(size_t, _Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(size_t, char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::insert(size_t, size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::erase(size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::replace(size_t, size_t, _Myt const &, size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::replace(size_t, size_t, char const *, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::replace(size_t, size_t, size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::copy(char *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::swap(string &)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::rfind(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_first_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_last_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 120. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 122. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_first_not_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 124. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 126. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 129. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 130. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 131. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::find_last_not_of(char const *, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 132. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 133. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 134. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 136. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::compare(size_t, size_t, _Myt const &, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 137. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 138. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::compare(size_t, size_t, char const *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 139. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 140. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Copy(size_t, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 141. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 142. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 143. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 144. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 145. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Grow(size_t, bool)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 146. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::_Tidy(bool, size_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 147. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 148. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 149. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator>>(istream &, string &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 150. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 151. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 152. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 153. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 154. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           getline(istream &, string &, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 155. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 156. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 157. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 158. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 159. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 160. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator<<(ostream &, string const &)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 161. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 162. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 163. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 164. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strlen

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002570 - 00002583 (0x14 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strlen                  00002570        _PrintfLarge (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?strtol

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           strtol                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xcloseall

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Close_all              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xdnorm

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002584 - 0000261F (0x9c bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dnorm             00002584        __iar_Dunscale (?xprintflarge)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xdscale

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dscale            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xdtento

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. TENTATIVE. Used definition from ?xprintflarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dunscale          
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           dmul                    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           ddiv                    
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dtento            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xgetmemchunk

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002620 - 00002645 (0x26 bytes), align: 1
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_GetMemChunk      00002620        __near_findmem (?xxmemxmalloc)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000008BB - 000008BC (0x2 bytes), align: 0
  Segment part 3.             Intra module refs:   __near_GetMemChunk
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_HEAP
  Segment part 6. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xlocnum

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 10. TENTATIVE. Used definition from terminal_service
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(char const *)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::string(size_t, char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::operator[](size_t)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           string::c_str() const   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sbumpc()     
    -------------------------------------------------------------------------
CODE
  Segment part 15. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sgetc()      
    -------------------------------------------------------------------------
CODE
  Segment part 16. TENTATIVE. Used definition from ?string
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           streambuf::sputc(char)
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::operator*() const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::equal(_Myt const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::_Inc()         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Istrit::_Peek()        
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Ostrit::operator=(char)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Getloctxt(_Istrit &, _Istrit &, size_t, char const *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, _Bool &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned short &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned int &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, long long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, unsigned long long &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, float &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, double &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, long double &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::do_get(_InIt, _InIt, ios_base &, int &, void * &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::_Getifld(char *, _InIt &, _InIt &, int, locale const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_get::_Getffld(char *, _InIt &, _InIt &, locale const &) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 120. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 122. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 124. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 126. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 129. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 130. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 131. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 132. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 133. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 134. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 136. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 137. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 138. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 139. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, _Bool) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 140. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 141. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 142. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 143. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 144. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 145. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, long) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 146. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 147. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 148. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 149. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, double) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 150. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 151. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 152. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 153. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::do_put(_OutIt, ios_base &, char, long double) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 154. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 155. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 156. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 157. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 158. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 159. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 160. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 161. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 162. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 163. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 164. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 165. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 166. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 167. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 168. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 169. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 170. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Ffmt(char *, char, int) const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 171. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Fput(_OutIt, ios_base &, char, char const *, size_t, size_t, size_t, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 172. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 173. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 174. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 175. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 176. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 177. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 178. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 179. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 180. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 181. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 182. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 183. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 184. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 185. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 186. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 187. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 188. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 189. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 190. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 191. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 192. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 193. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 194. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 195. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 196. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 197. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Ifmt(char *, char const *, int) const
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 198. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Iput(_OutIt, ios_base &, char, char *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 199. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 200. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 201. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 202. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 203. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 204. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 205. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 206. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 207. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 208. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 209. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 210. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 211. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 212. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 213. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 214. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 215. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 216. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 217. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 218. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 219. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Put(_OutIt, char const *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 220. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 221. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 222. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 223. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 224. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Putc(_OutIt, char const *, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 225. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 226. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 227. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 228. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 229. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Putgrouped(_OutIt, char const *, size_t, char) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 230. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 231. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 232. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 233. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 234. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 235. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 236. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_put::_Rep(_OutIt, char, size_t) const
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 237. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 8. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xprintflarge

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002646 - 00002A7F (0x43a bytes), align: 1
  Segment part 12.            Intra module refs:   Segment part 90
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _PrintfLarge            00002646        sprintf (?sprintf)
               calls direct
               CSTACK = 00000000 ( 00000071 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A80 - 00002A89 (0xa bytes), align: 1
  Segment part 13.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A8A - 00002A8D (0x4 bytes), align: 1
  Segment part 14.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A8E - 00002A91 (0x4 bytes), align: 1
  Segment part 15.            Intra module refs:   Segment part 14
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A92 - 00002AAD (0x1c bytes), align: 1
  Segment part 16.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AAE - 00002AB9 (0xc bytes), align: 1
  Segment part 17.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002ABA - 00002AC5 (0xc bytes), align: 1
  Segment part 18.            Intra module refs:   Segment part 17
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AC6 - 00002AD9 (0x14 bytes), align: 1
  Segment part 19.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002ADA - 00002ADF (0x6 bytes), align: 1
  Segment part 20.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AE0 - 00002AEF (0x10 bytes), align: 1
  Segment part 21.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AF0 - 00002AF5 (0x6 bytes), align: 1
  Segment part 22.            Intra module refs:   Segment part 23
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AF6 - 00002AF7 (0x2 bytes), align: 1
  Segment part 23.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AF8 - 00002AFD (0x6 bytes), align: 1
  Segment part 24.            Intra module refs:   Segment part 23
                                                   Segment part 70
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002AFE - 00002B05 (0x8 bytes), align: 1
  Segment part 25.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B06 - 00002B0B (0x6 bytes), align: 1
  Segment part 26.            Intra module refs:   Segment part 22
                                                   Segment part 25
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B0C - 00002B15 (0xa bytes), align: 1
  Segment part 27.            Intra module refs:   Segment part 22
                                                   Segment part 25
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B16 - 00002B1B (0x6 bytes), align: 1
  Segment part 28.            Intra module refs:   Segment part 36
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B1C - 00002B25 (0xa bytes), align: 1
  Segment part 29.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B26 - 00002B29 (0x4 bytes), align: 1
  Segment part 30.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B2A - 00002B2D (0x4 bytes), align: 1
  Segment part 31.            Intra module refs:   Segment part 30
                                                   Segment part 33
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B2E - 00002B31 (0x4 bytes), align: 1
  Segment part 32.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B32 - 00002B37 (0x6 bytes), align: 1
  Segment part 33.            Intra module refs:   Segment part 32
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B38 - 00002B41 (0xa bytes), align: 1
  Segment part 34.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B42 - 00002B49 (0x8 bytes), align: 1
  Segment part 35.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B4A - 00002B51 (0x8 bytes), align: 1
  Segment part 36.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B52 - 00002B5D (0xc bytes), align: 1
  Segment part 37.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B5E - 00002B69 (0xc bytes), align: 1
  Segment part 38.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B6A - 00002B6F (0x6 bytes), align: 1
  Segment part 39.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B70 - 00002B9F (0x30 bytes), align: 1
  Segment part 40.            Intra module refs:   Segment part 33
           LOCAL                   ADDRESS         
           =====                   =======         
           pad                     00002B70 
               calls direct
               CSTACK = 00000000 ( 00000007 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002BA0 - 00002BA5 (0x6 bytes), align: 1
  Segment part 41.            Intra module refs:   _PutcharsLarge
                                                   pad
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002BA6 - 00002D2B (0x186 bytes), align: 1
  Segment part 42.            Intra module refs:   _PrintfLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _LitobLarge             00002BA6 
               CSTACK = 00000000 ( 00000030 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D2C - 00002D31 (0x6 bytes), align: 1
  Segment part 43.            Intra module refs:   _LdtobLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D32 - 00002D39 (0x8 bytes), align: 1
  Segment part 44.            Intra module refs:   Segment part 63
                                                   _LitobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D3A - 00002D43 (0xa bytes), align: 1
  Segment part 45.            Intra module refs:   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D44 - 00002D4D (0xa bytes), align: 1
  Segment part 46.            Intra module refs:   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D4E - 00002D53 (0x6 bytes), align: 1
  Segment part 47.            Intra module refs:   _LdtobLarge
                                                   _LitobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D54 - 00002D6B (0x18 bytes), align: 1
  Segment part 48.            Intra module refs:   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D6C - 00002D6D (0x2 bytes), align: 1
  Segment part 49.            Intra module refs:   Segment part 48
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D6E - 00002D75 (0x8 bytes), align: 1
  Segment part 50.            Intra module refs:   Segment part 49
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D76 - 00002D7D (0x8 bytes), align: 1
  Segment part 51.            Intra module refs:   Segment part 48
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002D7E - 00002DC5 (0x48 bytes), align: 1
  Segment part 52.            Intra module refs:   _LdtobLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           scale                   00002D7E 
               CSTACK = 00000000 ( 0000000A )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002DC6 - 0000300B (0x246 bytes), align: 1
  Segment part 53.            Intra module refs:   _PrintfLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _LdtobLarge             00002DC6 
               calls direct
               CSTACK = 00000000 ( 00000041 )
               RSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000300C - 00003017 (0xc bytes), align: 1
  Segment part 54.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003018 - 00003021 (0xa bytes), align: 1
  Segment part 55.            Intra module refs:   _LdtobLarge
                                                   scale
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003022 - 00003025 (0x4 bytes), align: 1
  Segment part 56.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003026 - 0000302B (0x6 bytes), align: 1
  Segment part 57.            Intra module refs:   Segment part 56
                                                   _LdtobLarge
                                                   scale
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000302C - 0000302D (0x2 bytes), align: 1
  Segment part 58.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000302E - 00003033 (0x6 bytes), align: 1
  Segment part 59.            Intra module refs:   Segment part 58
                                                   _GenldLarge
                                                   _LdtobLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003034 - 00003039 (0x6 bytes), align: 1
  Segment part 60.            Intra module refs:   _LdtobLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000303A - 00003043 (0xa bytes), align: 1
  Segment part 61.            Intra module refs:   _LdtobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003044 - 00003053 (0x10 bytes), align: 1
  Segment part 62.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003054 - 00003059 (0x6 bytes), align: 1
  Segment part 63.            Intra module refs:   _LdtobLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000305A - 00003063 (0xa bytes), align: 1
  Segment part 64.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003064 - 00003065 (0x2 bytes), align: 1
  Segment part 65.            Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003066 - 0000306D (0x8 bytes), align: 1
  Segment part 66.            Intra module refs:   Segment part 65
                                                   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000306E - 000032FB (0x28e bytes), align: 1
  Segment part 67.            Intra module refs:   _LdtobLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _GenldLarge             0000306E 
               calls direct
               CSTACK = 00000000 ( 00000017 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000032FC - 000032FF (0x4 bytes), align: 1
  Segment part 68.            Intra module refs:   _GenldLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003300 - 00003303 (0x4 bytes), align: 1
  Segment part 69.            Intra module refs:   Segment part 80
                                                   _GenldLarge
                                                   _LdtobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003304 - 00003309 (0x6 bytes), align: 1
  Segment part 70.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000330A - 00003313 (0xa bytes), align: 1
  Segment part 71.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003314 - 00003319 (0x6 bytes), align: 1
  Segment part 72.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000331A - 00003323 (0xa bytes), align: 1
  Segment part 73.            Intra module refs:   Segment part 72
                                                   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003324 - 0000332B (0x8 bytes), align: 1
  Segment part 74.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000332C - 00003337 (0xc bytes), align: 1
  Segment part 75.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003338 - 00003341 (0xa bytes), align: 1
  Segment part 76.            Intra module refs:   _GenldLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003342 - 00003347 (0x6 bytes), align: 1
  Segment part 77.            Intra module refs:   _GenldLarge
                                                   _LitobLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003348 - 0000335F (0x18 bytes), align: 1
  Segment part 78.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003360 - 00003363 (0x4 bytes), align: 1
  Segment part 79.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003364 - 0000336D (0xa bytes), align: 1
  Segment part 80.            Intra module refs:   Segment part 78
                                                   Segment part 79
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000336E - 00003377 (0xa bytes), align: 1
  Segment part 81.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003378 - 0000337D (0x6 bytes), align: 1
  Segment part 82.            Intra module refs:   _GenldLarge
                                                   pad
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000337E - 00003381 (0x4 bytes), align: 1
  Segment part 83.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003382 - 00003387 (0x6 bytes), align: 1
  Segment part 84.            Intra module refs:   Segment part 83
                                                   _GenldLarge
                                                   _PrintfLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003388 - 0000338D (0x6 bytes), align: 1
  Segment part 85.            Intra module refs:   _GenldLarge
                                                   _LdtobLarge
                                                   _PutcharLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000338E - 0000338F (0x2 bytes), align: 1
  Segment part 86.            Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003390 - 00003397 (0x8 bytes), align: 1
  Segment part 87.            Intra module refs:   Segment part 86
                                                   _GenldLarge
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003398 - 000033D1 (0x3a bytes), align: 1
  Segment part 88.            Intra module refs:   _PrintfLarge
                                                   _PutcharsLarge
           LOCAL                   ADDRESS         
           =====                   =======         
           _PutcharLarge           00003398 
               calls indirect
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000033D2 - 000033F9 (0x28 bytes), align: 1
  Segment part 89.            Intra module refs:   Segment part 30
                                                   pad
           LOCAL                   ADDRESS         
           =====                   =======         
           _PutcharsLarge          000033D2 
               calls direct
               CSTACK = 00000000 ( 00000006 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000033FA - 00003479 (0x80 bytes), align: 1
  Segment part 91.            Intra module refs:   _LdtobLarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Dunscale          000033FA 
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000037B5 - 000037BB (0x7 bytes), align: 0
  Segment part 4.             Intra module refs:   Segment part 3
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000037BC - 000037CB (0x10 bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000037CC - 000037CD (0x2 bytes), align: 0
  Segment part 9.             Intra module refs:   Segment part 8
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000037CE - 000037D5 (0x8 bytes), align: 0
  Segment part 10.            Intra module refs:   __Constant_0_0
    -------------------------------------------------------------------------
SWITCH
  Relative segment, address: CODE 00000276 - 000002A9 (0x34 bytes), align: 1
  Segment part 90.            Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000749 - 0000074F (0x7 bytes), align: 0
  Segment part 3.             Intra module refs:   _PrintfLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000750 - 0000075F (0x10 bytes), align: 0
  Segment part 6.             Intra module refs:   _LdtobLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000760 - 00000761 (0x2 bytes), align: 0
  Segment part 8.             Intra module refs:   _GenldLarge
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00000762 - 00000769 (0x8 bytes), align: 0
  Segment part 11.            Intra module refs:   Segment part 14
                                                   _LitobLarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_0_0          00000762 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xpurevirtual

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000347A - 0000347D (0x4 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __pure_virtual_called   0000347A        Segment part 7 (led)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xsprout

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000347E - 00003499 (0x1c bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _SProut                 0000347E        sprintf (?sprintf)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstod

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stod              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstof

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stof              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoflt

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Stoflt                 
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstold

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stold             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoll

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stoll             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 4. TENTATIVE. Used definition from ?xprintflarge
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_0_0          
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_0_80000000   
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __Constant_1_80000000   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstopfx

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _LocaleC_isalpha        
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           isalnum                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Stopfx                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoul

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stoul             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xstoull

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __iar_Stoull            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 5. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xxmemxfree

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 0000349A - 00003551 (0xb8 bytes), align: 1
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           free                    0000349A        __near_findmem (?xxmemxmalloc)
                                                   operator delete(void *) (?delop_0)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003552 - 0000355F (0xe bytes), align: 1
  Segment part 4.             Intra module refs:   free
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003560 - 00003569 (0xa bytes), align: 1
  Segment part 5.             Intra module refs:   free
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_free             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xxmemxmalloc

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 000008BD - 000008C0 (0x4 bytes), align: 0
  Segment part 3.             Intra module refs:   __near_findmem
                                                   malloc
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_Aldata           000008BD        free (?xxmemxfree)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000356A - 000035E5 (0x7c bytes), align: 1
  Segment part 5.             Intra module refs:   malloc
           LOCAL                   ADDRESS         
           =====                   =======         
           __near_findmem          0000356A 
               calls direct
               CSTACK = 00000000 ( 00000002 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000035E6 - 000035EB (0x6 bytes), align: 1
  Segment part 6.             Intra module refs:   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000035EC - 000035ED (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   Segment part 6
                                                   malloc
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000035EE - 000035F3 (0x6 bytes), align: 1
  Segment part 8.             Intra module refs:   Segment part 7
                                                   Segment part 9
                                                   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000035F4 - 000035FF (0xc bytes), align: 1
  Segment part 9.             Intra module refs:   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003600 - 0000360B (0xc bytes), align: 1
  Segment part 10.            Intra module refs:   __near_findmem
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000360C - 000036B3 (0xa8 bytes), align: 1
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           malloc                  0000360C        operator new(size_t) (?newop_0)
               calls direct
               CSTACK = 00000000 ( 00000004 )
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000036B4 - 000036BD (0xa bytes), align: 1
  Segment part 12.            Intra module refs:   malloc
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_malloc           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 4. TENTATIVE. Used definition from BCComponentManager
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  DEFINED ABSOLUTE ENTRIES
  PROGRAM MODULE, NAME : ?FILLER_BYTES

  SEGMENTS IN THE MODULE
  ======================
INTVEC
  Common segment, address: CODE 00000000 - 00000057 (0x58 bytes), align: 0
  Segment part 1.
    -------------------------------------------------------------------------
?FILL1
  Relative segment, address: CODE 00000058 - 0000008B (0x34 bytes), align: 0
  Segment part 0.




                ****************************************
                *                                      *
                *            MODULE SUMMARY            *
                *                                      *
                ****************************************

Module                         CODE      DATA
------                         ----      ----
                              (Rel)  (Rel)  (Abs)
?C_STARTUP                       52
?EPILOGUE_B_L09                  42
?FILLER_BYTES                    52
  + common                       88
?FLOATS_L04                   1 056
?LL_DIV_L12                     202
?LONGLONG                        66
?L_EC_MUL_L03                    64
?L_SHL_L03                       16
?MOVE_LONG_L07                   22
?PROLOGUE_L09                    34
?RESET
  + common                        4
?SL_DIVMOD_L03                   68
?SS_DIVMOD_L02                   48
?S_EC_MUL_L02                    16
?UL_DIVMOD_L03                   70
?UL_SHR_L03                      16
?US_DIVMOD_L02                   40
?__dbg_break                      2
?__exit                          18
?_exit                           16
?abort                           18
?cppinit                        220      2
?delop_0                         12
?div                             36
?exit                             4
?low_level_init                   4
?memchr                          32
?memcpy                          26
?memmove                         64
?new                                     2
?newop_0                         58
?nomemory                         4
?segment_init                   128
?sprintf                         74
?strchr                          20
?strlen                          20
?xV_SWITCH_L06                  156
?xdnorm                         156
?xgetmemchunk                    38      2
?xprintflarge                 3 593     25
  + shared                      128      8
?xpurevirtual                     4
?xsprout                         28
?xxmemxfree                     208
?xxmemxmalloc                   340      4
BCComponentManager              926    164
  + shared                       14
CalClkFuncGen                   407     75
DriverFactory                            2
MC_E02SMB_v1_3DriverFactory     328     96
System_Manager                  136      2
  + shared                        2
System_main                      72
Term_Project_s                1 178    198
TimerManager                    482     23
  + shared                      500
adc                             222
avr_adc                         178      3      4
  + common                       88
avr_common                       52
avr_pwm                         102             2
  + shared                                      1
avr_spi                                         3
avr_timer                       118      1      4
  + common                       40
avr_uart                        336      2      6
  + shared                       80             1
  + common
clcd                             68
clcd_adaptor                    120             1
dio                             220
dio_adaptor                     160             3
led                             244
pwm                             146
ringbuffer                      156
serialIO                        422
type                            345
N/A (command line)                   1 376
N/A (alignment)
----------                   ------  -----     --
Total:                       14 205  1 985     25
  + common                       88


                ****************************************
                *                                      *
                *              CALL GRAPH              *
                *                                      *
                ****************************************

  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000000 00000000
  01  ADC_conv_done()
      | Stack used (prev) :  00000000 00000000
      | + function block  :  00000008 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  00000008 00000002


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000008 00000002
  01  timer_cmp()
      | Stack used (prev) :  00000008 00000002
      | + function block  :  00000003 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  0000000B 00000004


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  0000000B 00000004
  03      RingBuffer::PushBack(unsigned char)
          | Stack used (prev) :  0000000B 00000004
          | + function block  :  00000004 00000002
  02    SerialIO::PushBackRxBuff(unsigned char)
        | Stack used (prev) :  0000000F 00000006
        | + function block  :  00000000 00000002
  01  usart0_rxc()
      | Stack used (prev) :  0000000F 00000008
      | + function block  :  00000010 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  0000001F 0000000A


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  0000001F 0000000A
  03      RingBuffer::Pop(unsigned char &)
          | Stack used (prev) :  0000001F 0000000A
          | + function block  :  00000000 00000002
  02    SerialIO::PopTxBuff(unsigned char &)
        | Stack used (prev) :  0000001F 0000000C
        | + function block  :  00000000 00000002
  01  usart0_txc()
      | Stack used (prev) :  0000001F 0000000E
      | + function block  :  00000011 00000002
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  00000030 00000010


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 1>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 2>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 3>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  04        free
            | Stack used (prev) :  00000030 00000010
            | + function block  :  00000000 00000002
  03      operator delete(void *)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000000 00000002
  02    Adc::~Adc()
        | Stack used (prev) :  00000030 00000014
        | + function block  :  00000000 00000002
  01  <Unnamed 4>
      | Stack used (prev) :  00000030 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      operator delete(void *)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000000 00000002
          |  Already listed
  02    Pwm::~Pwm()
        | Stack used (prev) :  00000030 00000014
        | + function block  :  00000000 00000002
  01  <Unnamed 5>
      | Stack used (prev) :  00000030 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 0>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  DInTimerAdaptor::~DInTimerAdaptor()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    DIn::evTimerExpir()
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000004 00000002
  01  DInTimerAdaptor::TimeOutEvent()
      | Stack used (prev) :  00000034 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  TimerWithLedAdapter::~TimerWithLedAdapter()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      Led::Init()
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
  03      Led::Init()
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
          |  Already listed
  04        DOut::Set(unsigned char)
            | Stack used (prev) :  00000030 00000010
            | + function block  :  00000004 00000002
  03      DOut::Flip(unsigned char)
          | Stack used (prev) :  00000034 00000012
          | + function block  :  00000000 00000002
  03      DOut::Set(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000004 00000002
          |  Already listed
  02    Led::evTimerExpir()
        | Stack used (prev) :  00000034 00000014
        | + function block  :  00000002 00000002
  01  TimerWithLedAdapter::TimeOutEvent()
      | Stack used (prev) :  00000036 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000036 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  BCComponentMod::~BCComponentMod()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    BCComponentManager::CreateSerialIO(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
  01  BCComponentMod::Init()
      | Stack used (prev) :  00000030 00000012
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000032 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  04        RingBuffer::Pop(unsigned char &)
            | Stack used (prev) :  0000001F 0000000A
            | + function block  :  00000000 00000002
            |  Already listed
  03      SerialIO::PopRxBuff(unsigned char &)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
  02    SerialIO::evTick()
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000003 00000002
  03      ITimerEvent::CalTime(unsigned short)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
  02    TimerManager::evTick()
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000006 00000002
  01  BCComponentMod::Execute()
      | Stack used (prev) :  00000036 00000014
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000038 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  CalClkFuncGen::~CalClkFuncGen()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      operator delete(void *)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000000 00000002
          |  Already listed
  02    Avr_adc::~Avr_adc()
        | Stack used (prev) :  00000030 00000014
        | + function block  :  00000000 00000002
  01  <Unnamed 6>
      | Stack used (prev) :  00000030 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 0>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 1>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      operator delete(void *)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000000 00000002
          |  Already listed
  02    Avr_pwm::~Avr_pwm()
        | Stack used (prev) :  00000030 00000014
        | + function block  :  00000000 00000002
  01  <Unnamed 2>
      | Stack used (prev) :  00000030 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 3>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 4>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 5>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  DriverFactory::CreateSPI()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  DriverFactory::CreateDOut(char *)
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  DriverFactory::CreateDac7512()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  DriverFactory::CreateMcp3204()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  MC_E02SMBDriverFactory::CreateTimer()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  MC_E02SMBDriverFactory::CreateUart()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  MC_E02SMBDriverFactory::CreateLed(unsigned char)
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  MC_E02SMBDriverFactory::CreateClcd()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  MC_E02SMBDriverFactory::CreateDIn()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  05          __DebugBreak
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000000 00000002
  04        __exit
            | Stack used (prev) :  00000030 00000012
            | + function block  :  00000002 00000002
  04        __DebugBreak
            | Stack used (prev) :  00000030 00000010
            | + function block  :  00000000 00000002
            |  Already listed
  03      abort
          | Stack used (prev) :  00000032 00000014
          | + function block  :  00000000 00000002
  02    __record_needed_destruction
        | Stack used (prev) :  00000032 00000016
        | + function block  :  00000002 00000002
  03      Avr_adc::Init()
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
  03      Avr_adc::SetPrescaler(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
  02    Avr_adc::Avr_adc()
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000002 00000002
  01  MC_E02SMBDriverFactory::CreateAdc()
      | Stack used (prev) :  00000034 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  MC_E02SMBDriverFactory::CreatePwm()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  SystemManager::~SystemManager()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  SystemManager::Exit()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      operator delete(void *)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000000 00000002
          |  Already listed
  03      SystemManager::~SystemManager()
          | Stack used (prev) :  00000030 00000014
          | + function block  :  00000000 00000002
          |  Already listed
  02    Term_Project_s::~Term_Project_s()
        | Stack used (prev) :  00000030 00000016
        | + function block  :  00000004 00000002
  01  <Unnamed 0>
      | Stack used (prev) :  00000034 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    CalClkFuncGen::~CalClkFuncGen()
        | Stack used (prev) :  00000030 00000014
        | + function block  :  00000000 00000002
        |  Already listed
  01  <Unnamed 1>
      | Stack used (prev) :  00000030 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 2>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 3>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 4>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 5>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 6>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 7>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 8>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  <Unnamed 9>
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  myTimer1s::~myTimer1s()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    DOut::Flip(unsigned char)
        | Stack used (prev) :  00000034 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  06            _PutcharLarge
                | Stack used (prev) :  00000030 00000010
                | + function block  :  00000002 00000002
  05          _PutcharsLarge
              | Stack used (prev) :  00000032 00000012
              | + function block  :  00000006 00000002
  05          _PutcharsLarge
              | Stack used (prev) :  00000032 00000012
              | + function block  :  00000006 00000002
              |  Already listed
  05          _PutcharsLarge
              | Stack used (prev) :  00000032 00000012
              | + function block  :  00000006 00000002
              |  Already listed
  05          _PutcharLarge
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000002 00000002
              |  Already listed
  07              __iar_Dnorm
                  | Stack used (prev) :  00000030 00000010
                  | + function block  :  00000000 00000002
  06            __iar_Dunscale
                | Stack used (prev) :  00000030 00000012
                | + function block  :  00000004 00000002
  07              memcpy
                  | Stack used (prev) :  00000030 00000010
                  | + function block  :  00000000 00000002
  07              div
                  | Stack used (prev) :  00000030 00000010
                  | + function block  :  00000008 00000004
  06            _GenldLarge
                | Stack used (prev) :  00000038 00000014
                | + function block  :  00000017 00000002
  06            scale
                | Stack used (prev) :  00000030 00000010
                | + function block  :  0000000A 00000004
  06            scale
                | Stack used (prev) :  00000030 00000010
                | + function block  :  0000000A 00000004
                |  Already listed
  06            memcpy
                | Stack used (prev) :  00000030 00000010
                | + function block  :  00000000 00000002
                |  Already listed
  05          _LdtobLarge
              | Stack used (prev) :  0000004F 00000016
              | + function block  :  00000041 00000002
  05          _LitobLarge
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000030 00000004
  05          _LitobLarge
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000030 00000004
              |  Already listed
  06            _PutcharsLarge
                | Stack used (prev) :  00000032 00000012
                | + function block  :  00000006 00000002
                |  Already listed
  05          pad
              | Stack used (prev) :  00000038 00000014
              | + function block  :  00000007 00000002
  05          pad
              | Stack used (prev) :  00000038 00000014
              | + function block  :  00000007 00000002
              |  Already listed
  05          pad
              | Stack used (prev) :  00000038 00000014
              | + function block  :  00000007 00000002
              |  Already listed
  05          pad
              | Stack used (prev) :  00000038 00000014
              | + function block  :  00000007 00000002
              |  Already listed
  05          pad
              | Stack used (prev) :  00000038 00000014
              | + function block  :  00000007 00000002
              |  Already listed
  05          strlen
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000000 00000002
  05          __iar_Strchr
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000000 00000002
  05          __iar_Memchr
              | Stack used (prev) :  00000030 00000010
              | + function block  :  00000000 00000002
  04        _PrintfLarge
            | Stack used (prev) :  00000090 00000018
            | + function block  :  00000071 00000002
  03      sprintf
          | Stack used (prev) :  00000101 0000001A
          | + function block  :  00000008 00000002
  02    CalClkFuncGen::tm1s()
        | Stack used (prev) :  00000109 0000001C
        | + function block  :  00000017 00000002
  01  myTimer1s::TimeOutEvent()
      | Stack used (prev) :  00000120 0000001E
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000122 00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  myTimer500ms::~myTimer500ms()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    DOut::Flip(unsigned char)
        | Stack used (prev) :  00000034 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  02    CalClkFuncGen::tm500ms()
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
  01  myTimer500ms::TimeOutEvent()
      | Stack used (prev) :  00000034 00000014
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000036 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  mySWEvent::~mySWEvent()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    CalClkFuncGen::Switch()
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000002 00000002
  01  mySWEvent::Changed(enum DInEvent::EDGE)
      | Stack used (prev) :  00000032 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000032 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  myAdcAdaptor::~myAdcAdaptor()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    CalClkFuncGen::InputAdc(unsigned short)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000002 00000002
  01  myAdcAdaptor::Converted(unsigned short)
      | Stack used (prev) :  00000032 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000032 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  myPwmAdaptor::~myPwmAdaptor()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      Pwm::Run()
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000002 00000002
  02    Pwm::SetDuty(unsigned short)
        | Stack used (prev) :  00000032 00000012
        | + function block  :  00000004 00000002
  01  myPwmAdaptor::SetDuty(unsigned short)
      | Stack used (prev) :  00000036 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000036 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  mySerialEvent::~mySerialEvent()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  05          RingBuffer::PushBack(unsigned char)
              | Stack used (prev) :  0000000B 00000004
              | + function block  :  00000004 00000002
              |  Already listed
  04        SerialIO::PushBackTxBuff(unsigned char)
            | Stack used (prev) :  00000030 00000010
            | + function block  :  00000000 00000002
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000004 00000002
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000004 00000002
          |  Already listed
  02    SerialIO::Write(char const *)
        | Stack used (prev) :  00000034 00000014
        | + function block  :  00000008 00000002
  02    SerialIO::Write(unsigned char)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000004 00000002
        |  Already listed
  02    CalClkFuncGen::InputCh(char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000004 00000002
  01  mySerialEvent::Receive(unsigned char)
      | Stack used (prev) :  0000003C 00000016
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000040 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  mySerialOutAdaptor::~mySerialOutAdaptor()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    SerialIO::Write(char const *)
        | Stack used (prev) :  00000034 00000014
        | + function block  :  00000008 00000002
        |  Already listed
  01  mySerialOutAdaptor::Write(char *)
      | Stack used (prev) :  0000003C 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000003C 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  mylcdAdaptor::~mylcdAdaptor()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    Clcd::Write(unsigned char, char *)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000004 00000002
  01  mylcdAdaptor::Write(char *)
      | Stack used (prev) :  00000034 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      operator delete(void *)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000000 00000002
          |  Already listed
  04        operator delete(void *)
            | Stack used (prev) :  00000030 00000012
            | + function block  :  00000000 00000002
            |  Already listed
  03      _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
          | Stack used (prev) :  00000030 00000014
          | + function block  :  00000000 00000002
  02    TimerManager::~TimerManager()
        | Stack used (prev) :  00000030 00000016
        | + function block  :  00000004 00000002
  01  <Unnamed 0>
      | Stack used (prev) :  00000034 00000018
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 0000001A


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    Adc::evTick()
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000004 00000002
  01  Adc::TimeOutEvent()
      | Stack used (prev) :  00000034 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_adc::isConverted()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_adc::GetAdc()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    Avr_pwm::SetPreScaler(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
  01  Avr_pwm::Run()
      | Stack used (prev) :  00000030 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    Avr_pwm::SetPreScaler(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
        |  Already listed
  01  Avr_pwm::Stop()
      | Stack used (prev) :  00000030 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_pwm::SetDuty(unsigned short)
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_pwm::GetResolution()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_timer0::Init()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_timer0::GetTimeOutMS()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_timer0::isTimeOut()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  Avr_timer0::~Avr_timer0()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_uart0::Init()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000002 00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000032 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_uart0::Run()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  Avr_uart0::SendTxEvent()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  Avr_uart0::~Avr_uart0()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
          |  Already listed
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
          |  Already listed
  03      avr_delay_us(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
          |  Already listed
  02    avr_delay_ms(unsigned int)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000004 00000002
  02    avr_delay_us(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::Init()
      | Stack used (prev) :  00000034 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    avr_delay_us(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::SetData(unsigned char)
      | Stack used (prev) :  00000030 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    avr_delay_us(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::SetInstruction(unsigned char)
      | Stack used (prev) :  00000030 00000012
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  ClcdAdaptor::~ClcdAdaptor()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  E02SMBLed::SetPort(unsigned char)
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  E02SMBLed::GetPort()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  DigialIn::GetPort()
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  E02SMBLed::~E02SMBLed()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  DigialIn::~DigialIn()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  Led::~Led()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  RingBuffer::~RingBuffer()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    operator delete(void *)
        | Stack used (prev) :  00000030 00000012
        | + function block  :  00000000 00000002
        |  Already listed
  01  SerialIO::~SerialIO()
      | Stack used (prev) :  00000030 00000014
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000016


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  02    abort
        | Stack used (prev) :  00000032 00000014
        | + function block  :  00000000 00000002
        |  Already listed
  01  __pure_virtual_called
      | Stack used (prev) :  00000032 00000016
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000032 00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000030 00000010
  01  _SProut
      | Stack used (prev) :  00000030 00000010
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000030 00000012


  ->Sub-tree of type: Indirectly called function tree that makes indirect
                    : calls (Is not an interrupt and is not flagged as not
                    : overlayable)
                             CSTACK   RSTACK
    | Stack used (prev) :  00000122 00000020
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000004 00000002
          |  Already listed
  03      SerialIO::Write(unsigned char)
          | Stack used (prev) :  00000030 00000012
          | + function block  :  00000004 00000002
          |  Already listed
  02    SerialIO::Write(char __flash *)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000008 00000002
  02    SerialIO::SetEvent(SerialEvent &)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    DIn::SetEvent(DInEvent &)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    Adc::SetFrequency(unsigned char)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000002 00000004
  02    Adc::Addevent(AdcEvent *)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    Adc::Run()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  04        _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
            | Stack used (prev) :  00000122 00000020
            | + function block  :  00000000 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                | Stack used (prev) :  00000122 00000020
                | + function block  :  00000000 00000002
                |  Already listed
  10                    free
                        | Stack used (prev) :  00000030 00000010
                        | + function block  :  00000000 00000002
                        |  Already listed
  10                    __near_GetMemChunk
                        | Stack used (prev) :  00000122 00000020
                        | + function block  :  00000000 00000002
  09                  __near_findmem
                      | Stack used (prev) :  00000122 00000022
                      | + function block  :  00000002 00000002
  08                malloc
                    | Stack used (prev) :  00000124 00000024
                    | + function block  :  00000004 00000002
  09                  abort
                      | Stack used (prev) :  00000032 00000014
                      | + function block  :  00000000 00000002
                      |  Already listed
  08                _Nomemory()
                    | Stack used (prev) :  00000122 00000020
                    | + function block  :  00000000 00000002
  07              operator new(size_t)
                  | Stack used (prev) :  00000128 00000026
                  | + function block  :  00000004 00000002
  07              operator delete(void *)
                  | Stack used (prev) :  00000030 00000012
                  | + function block  :  00000000 00000002
                  |  Already listed
  07              _Vector_impl<unsigned short, allocator<unsigned short>>::_Tidy0()
                  | Stack used (prev) :  00000030 00000014
                  | + function block  :  00000000 00000002
                  |  Already listed
  08                memmove
                    | Stack used (prev) :  00000122 00000020
                    | + function block  :  00000000 00000002
  07              _Uninit_copy(char const *, char const *, char *)
                  | Stack used (prev) :  00000122 00000022
                  | + function block  :  00000002 00000002
  07              _Uninit_copy(char const *, char const *, char *)
                  | Stack used (prev) :  00000122 00000022
                  | + function block  :  00000002 00000002
                  |  Already listed
  08                memmove
                    | Stack used (prev) :  00000122 00000020
                    | + function block  :  00000000 00000002
                    |  Already listed
  07              _Backward_copier<_Ty, true>[with _Ty=unsigned short]::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                  | Stack used (prev) :  00000122 00000022
                  | + function block  :  00000000 00000002
  06            _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                | Stack used (prev) :  0000012C 00000028
                | + function block  :  0000000E 00000002
  05          _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
              | Stack used (prev) :  0000013A 0000002A
              | + function block  :  00000006 00000002
  04        _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
            | Stack used (prev) :  00000140 0000002C
            | + function block  :  00000004 00000002
  03      _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
          | Stack used (prev) :  00000144 0000002E
          | + function block  :  00000002 00000002
  02    TimerManager::AddEvent(ITimerEvent *)
        | Stack used (prev) :  00000146 00000030
        | + function block  :  00000002 00000002
  02    GetDriverFactory()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    CalClkFuncGen::SetPwm(IPwmOut *)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    CalClkFuncGen::SetIStringOut(IStringOut *, IStringOut *, IStringOut *)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    CalClkFuncGen::Init()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000002 00000002
  02    GetBCComponentManager()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  03      __record_needed_destruction
          | Stack used (prev) :  00000032 00000016
          | + function block  :  00000002 00000002
          |  Already listed
  03      Pwm::Pwm(IPwmPort *)
          | Stack used (prev) :  00000122 00000020
          | + function block  :  00000000 00000002
  02    BCComponentManager::CreatePwm()
        | Stack used (prev) :  00000122 00000022
        | + function block  :  00000002 00000002
  03      __record_needed_destruction
          | Stack used (prev) :  00000032 00000016
          | + function block  :  00000002 00000002
          |  Already listed
  03      Adc::Adc(IAdcPort *)
          | Stack used (prev) :  00000122 00000020
          | + function block  :  00000000 00000002
  03      TimerManager::AddEvent(ITimerEvent *)
          | Stack used (prev) :  00000146 00000030
          | + function block  :  00000002 00000002
          |  Already listed
  02    BCComponentManager::CreateAdc()
        | Stack used (prev) :  00000148 00000032
        | + function block  :  00000004 00000002
  02    BCComponentManager::CreateDIn()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000002 00000002
  02    BCComponentManager::CreateSerialIO(unsigned char)
        | Stack used (prev) :  00000030 00000010
        | + function block  :  00000000 00000002
        |  Already listed
  02    BCComponentManager::CreateLed(enum LED)
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  02    BCComponentManager::CreateTimer()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
  01  Term_Project_s::Init()
      | Stack used (prev) :  0000014C 00000034
      | + function block  :  00000004 00000002
  <-Sub-tree of type: Indirectly called function tree that makes indirect
                    : calls (Is not an interrupt and is not flagged as not
                    : overlayable)
    | Stack used          :  00000150 00000036


  ->Sub-tree of type: Function tree that makes indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000150 00000036
  02    SystemManager::Run(unsigned char)
        | Stack used (prev) :  00000150 00000036
        | + function block  :  00000002 00000002
  02    SystemManager::InitModule()
        | Stack used (prev) :  00000150 00000036
        | + function block  :  00000002 00000002
  02    SystemManager::Instance()
        | Stack used (prev) :  00000150 00000036
        | + function block  :  00000000 00000002
  02    GetBCComponentManager()
        | Stack used (prev) :  00000122 00000020
        | + function block  :  00000000 00000002
        |  Already listed
  03      __record_needed_destruction
          | Stack used (prev) :  00000032 00000016
          | + function block  :  00000002 00000002
          |  Already listed
  04        RingBuffer::RingBuffer()
            | Stack used (prev) :  00000150 00000036
            | + function block  :  00000000 00000002
  03      SerialIO::SerialIO(ISerialPort &)
          | Stack used (prev) :  00000150 00000038
          | + function block  :  00000002 00000002
  03      TimerManager::AddEvent(ITimerEvent *)
          | Stack used (prev) :  00000146 00000030
          | + function block  :  00000002 00000002
          |  Already listed
  04        __record_needed_destruction
            | Stack used (prev) :  00000032 00000016
            | + function block  :  00000002 00000002
            |  Already listed
  04        TimerManager::TimerManager(ITimer *)
            | Stack used (prev) :  00000150 00000036
            | + function block  :  00000002 00000002
  03      TimerManager::GetInstance(ITimer *)
          | Stack used (prev) :  00000152 00000038
          | + function block  :  00000002 00000002
  03      SystemManager::AddModule(IModule &)
          | Stack used (prev) :  00000150 00000036
          | + function block  :  00000000 00000002
  03      SystemManager::Instance()
          | Stack used (prev) :  00000150 00000036
          | + function block  :  00000000 00000002
          |  Already listed
  03      GetDriverFactory()
          | Stack used (prev) :  00000122 00000020
          | + function block  :  00000000 00000002
          |  Already listed
  03      TimerWithLedAdapter::TimerWithLedAdapter(Led *)
          | Stack used (prev) :  00000150 00000036
          | + function block  :  00000000 00000002
  03      TimerWithLedAdapter::TimerWithLedAdapter(Led *)
          | Stack used (prev) :  00000150 00000036
          | + function block  :  00000000 00000002
          |  Already listed
  04        DIn::SetTimerInterval(unsigned char)
            | Stack used (prev) :  00000150 00000036
            | + function block  :  00000000 00000002
  03      DInTimerAdaptor::DInTimerAdaptor(DIn &, unsigned char)
          | Stack used (prev) :  00000150 00000038
          | + function block  :  00000002 00000002
  02    BCComponentManager::Init()
        | Stack used (prev) :  00000154 0000003A
        | + function block  :  00000006 00000002
  01  main
      | Stack used (prev) :  0000015A 0000003C
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Function tree that makes indirect calls
    | Stack used          :  0000015C 0000003E


  ->Sub-tree of type: Function tree that makes indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  0000015C 0000003E
  01  __call_ctors
      | Stack used (prev) :  0000015C 0000003E
      | + function block  :  0000000B 00000002
  <-Sub-tree of type: Function tree that makes indirect calls
    | Stack used          :  00000167 00000040


  ->Sub-tree of type: Function tree that makes indirect calls
                             CSTACK   RSTACK
    | Stack used (prev) :  00000167 00000040
  01  __call_dtors
      | Stack used (prev) :  00000167 00000040
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Function tree that makes indirect calls
    | Stack used          :  00000169 00000042


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000169 00000042
  02    __record_needed_destruction
        | Stack used (prev) :  00000032 00000016
        | + function block  :  00000002 00000002
        |  Already listed
  02    BCComponentManager::BCComponentManager()
        | Stack used (prev) :  00000169 00000042
        | + function block  :  00000000 00000002
  01  __sti__routine()
      | Stack used (prev) :  00000169 00000044
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000169 00000046


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000169 00000046
  02    __record_needed_destruction
        | Stack used (prev) :  00000032 00000016
        | + function block  :  00000002 00000002
        |  Already listed
  03      DIn::DIn()
          | Stack used (prev) :  00000169 00000046
          | + function block  :  00000000 00000002
  02    DigialIn::DigialIn()
        | Stack used (prev) :  00000169 00000048
        | + function block  :  00000002 00000002
  04        Led::Init()
            | Stack used (prev) :  00000030 00000010
            | + function block  :  00000000 00000002
            |  Already listed
  04        DOut::DOut()
            | Stack used (prev) :  00000169 00000046
            | + function block  :  00000000 00000002
  03      Led::Led()
          | Stack used (prev) :  00000169 00000048
          | + function block  :  00000002 00000002
  03      E02SMBLed::SetPort(unsigned char)
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
          |  Already listed
  02    E02SMBLed::E02SMBLed()
        | Stack used (prev) :  0000016B 0000004A
        | + function block  :  00000002 00000002
  03      ClcdAdaptor::Init()
          | Stack used (prev) :  00000034 00000014
          | + function block  :  00000000 00000002
          |  Already listed
  03      Clcd::Clcd()
          | Stack used (prev) :  00000169 00000046
          | + function block  :  00000000 00000002
  02    ClcdAdaptor::ClcdAdaptor()
        | Stack used (prev) :  00000169 00000048
        | + function block  :  00000002 00000002
  03      Avr_uart0::Init()
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000002 00000004
          |  Already listed
  02    Avr_uart0::Avr_uart0()
        | Stack used (prev) :  00000169 00000046
        | + function block  :  00000002 00000002
  03      Avr_timer0::Init()
          | Stack used (prev) :  00000030 00000010
          | + function block  :  00000000 00000002
          |  Already listed
  02    Avr_timer0::Avr_timer0()
        | Stack used (prev) :  00000169 00000046
        | + function block  :  00000002 00000002
  03      Avr_pwm::Init()
          | Stack used (prev) :  00000169 00000046
          | + function block  :  00000000 00000002
  02    Avr_pwm::Avr_pwm(unsigned char)
        | Stack used (prev) :  00000169 00000048
        | + function block  :  00000002 00000002
  01  __sti__routine()
      | Stack used (prev) :  0000016D 0000004C
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  0000016D 0000004E


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  0000016D 0000004E
  02    __record_needed_destruction
        | Stack used (prev) :  00000032 00000016
        | + function block  :  00000002 00000002
        |  Already listed
  03      SystemManager::SystemManager()
          | Stack used (prev) :  0000016D 0000004E
          | + function block  :  00000000 00000002
  02    Term_Project_s::Term_Project_s()
        | Stack used (prev) :  0000016D 00000050
        | + function block  :  00000002 00000002
  02    CalClkFuncGen::CalClkFuncGen()
        | Stack used (prev) :  0000016D 0000004E
        | + function block  :  00000000 00000002
  01  __sti__routine()
      | Stack used (prev) :  0000016F 00000052
      | + function block  :  00000002 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000171 00000054


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000171 00000054
  01  exit
      | Stack used (prev) :  00000171 00000054
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000171 00000056


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000171 00000056
  01  __low_level_init
      | Stack used (prev) :  00000171 00000056
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000171 00000058


  ->Sub-tree of type: Function tree
                             CSTACK   RSTACK
    | Stack used (prev) :  00000171 00000058
  02    __flashcpy
        | Stack used (prev) :  00000171 00000058
        | + function block  :  00000000 00000002
  02    __memclr
        | Stack used (prev) :  00000171 00000058
        | + function block  :  00000000 00000002
  01  __segment_init
      | Stack used (prev) :  00000171 0000005A
      | + function block  :  00000000 00000002
  <-Sub-tree of type: Function tree
    | Stack used          :  00000171 0000005C




                ****************************************
                *                                      *
                *      SEGMENTS IN ADDRESS ORDER       *
                *                                      *
                ****************************************


SEGMENT              SPACE    START ADDRESS   END ADDRESS     SIZE  TYPE  ALIGN
=======              =====    =============   ===========     ====  ====  =====
INTVEC               CODE          00000000 - 00000057          58   com    1
?FILL1               CODE          00000058 - 0000008B          34   rel    0
NEAR_F               CODE          0000008C - 00000274         1E9   rel    0
SWITCH               CODE          00000276 - 000002A9          34   rel    1
DIFUNCT              CODE          000002AA - 000002AF           6   rel    0
CODE                 CODE          000002B0 - 000036BD        340E   rel    1
INITTAB              CODE          000036BE - 000036CB           E   rel    0
NEAR_ID              CODE          000036CC - 000037D5         10A   rel    0
ABSOLUTE             DATA               0000001C                     rel    0
                     DATA               0000001D                   
                     DATA               0000001E                   
                     DATA               0000001F                   
                     DATA          00000024 - 00000027           4 
                     DATA          00000029 - 0000002F           7 
                     DATA          00000031 - 00000032           2 
                     DATA          00000037 - 00000037           1 
                     DATA          00000043 - 00000045           3 
                     DATA          00000051 - 00000051           1 
                     DATA          00000053 - 00000053           1 
                     DATA          00000055 - 00000055           1 
                     DATA          00000057 - 00000057           1 
                     DATA          00000063 - 00000064           2 
                     DATA          00000090 - 00000090           1 
                     DATA          00000095 - 00000095           1 
CSTACK               DATA          00000100 - 000003BF         2C0   dse    0
NEAR_HEAP            DATA          000003C0 - 0000061F         260   dse    0
RSTACK               DATA          00000620 - 0000065F          40   dse    0
NEAR_I               DATA          00000660 - 00000769         10A   rel    0
NEAR_Z               DATA          0000076A - 000008C0         157   rel    0

                ****************************************
                *                                      *
                *        END OF CROSS REFERENCE        *
                *                                      *
                ****************************************

 14 241 bytes of CODE memory (+             52 range fill )
  1 985 bytes of DATA memory (+ 25 absolute )

Errors: none
Warnings: none

