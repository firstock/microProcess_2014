###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    02/Dec/2013  00:33:05 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\CPU\AVR_Driver #
#                    \avr_spi.cpp                                             #
#    Command line =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\CPU\AVR_Driver #
#                    \avr_spi.cpp --cpu=m128 -ms -o                           #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ -D     #
#                    NDEBUG -D xWATCHDOG_ENABLE -lC                           #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ -y    #
#                    --initializers_in_flash -z9 --cross_call_passes=2        #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    D:\Work\IAR\TIEF_Framework\ -I                           #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Basic_Componen #
#                    t\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/BSP/MC_E #
#                    02SMB_v1_3\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork #
#                    /Common\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Co #
#                    nfiguration\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWor #
#                    k/CPU/AVR_Driver\ -I D:\Work\IAR\TIEF_Framework/TIEL_Fra #
#                    meWork/Driver_Interface\ -I                              #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Drivers\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Service\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/System\ -I     #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Test\ -I       #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Utils\ -I      #
#                    D:\Work\IAR\TIEF_Framework/BUILD_COUNT\ -I "C:\Program   #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\INC\" -I "C:\Program Files (x86)\IAR           #
#                    Systems\Embedded Workbench 5.4_0\avr\INC\DLIB\"          #
#                    --eeprom_size 4096 --eec++ --dlib_config "C:\Program     #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"                  #
#    List file    =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\avr_sp #
#                    i.lst                                                    #
#    Object file  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\avr_spi #
#                    .r90                                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\CPU\AVR_Driver\avr_spi.cpp
      1          #include "avr_spi.h"
      2          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x2d
   \   <__C13> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   <__C14> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f
   \   <__C15> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   <__C23> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1
      3          #include <assert.h>
      4          
      5          #define PORT_SS_NUM 4
      6          #define PORT_MOSI_NUM 5
      7          #define PORT_MISO_NUM 6
      8          #define PORT_SCK_NUM  7
      9          #define SPI_DDR       DDRB 
     10          
     11          // bit number of SPI control register
     12          #define SPI_SPE       6
     13          #define SPI_MSTR      4
     14          #define SPI_SPR0      0
     15          #define SPI_SPI2X     0
     16          #define SPI_SPIF      7
     17          

   \                                 In  segment CODE, align 2, keep-with-next
     18          AvrSpi::AvrSpi(void)
   \                     ??AvrSpi:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     19          {
   \   00000006   ....               LDI     R16, LOW(??__vtbl)
   \   00000008   ....               LDI     R17, (??__vtbl) >> 8
   \   0000000A   930D               ST      X+, R16
   \   0000000C   931C               ST      X, R17
   \   0000000E   9711               SBIW    R27:R26, 1
     20            Init();
   \   00000010   018D               MOVW    R17:R16, R27:R26
   \   00000012   ....               RCALL   ??Init
     21          }
   \   00000014   018D               MOVW    R17:R16, R27:R26
   \   00000016   91A9               LD      R26, Y+
   \   00000018   91B9               LD      R27, Y+
   \   0000001A   9508               RET
     22          

   \                                 In  segment CODE, align 2, keep-with-next
     23          void AvrSpi::AvrSpi::Init(void)
   \                     ??Init:
     24          {
     25          
     26            SPI_DDR |= (1 << PORT_MOSI_NUM) | (1 << PORT_SCK_NUM) | ( 1 << PORT_SS_NUM);
   \   00000000   B307               IN      R16, 0x17
   \   00000002   6B00               ORI     R16, 0xB0
   \   00000004   BB07               OUT     0x17, R16
     27          
     28            SPCR = (1 << SPI_SPE) | (1 << SPI_MSTR) | (1 << SPI_SPR0) ;//|  (1<<2);
   \   00000006   E501               LDI     R16, 81
   \   00000008   B90D               OUT     0x0D, R16
     29            SPSR |= 1 << SPI_SPI2X;
   \   0000000A   9A70               SBI     0x0E, 0x00
     30          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_SPCR
   \   0000000E                      REQUIRE _A_SPSR
   \   0000000E                      REQUIRE _A_DDRB
     31          
     32            

   \                                 In  segment CODE, align 2, keep-with-next
     33          unsigned char AvrSpi::WriteByte(unsigned char _byte)
   \                     ??WriteByte:
     34          {
     35            assert( (1 << PORT_MOSI_NUM ) & SPI_DDR);
     36            assert( (1 << PORT_SCK_NUM ) & SPI_DDR);
     37            
     38            assert( (1 << SPI_SPE ) & SPCR);
     39            assert( (1 << SPI_MSTR ) & SPCR);
     40            assert( (1 << SPI_SPR0 ) & SPCR);
     41            
     42            SPDR = _byte;
   \   00000000   B92F               OUT     0x0F, R18
     43           while(!(SPSR & (1<<SPI_SPIF)));
   \                     ??WriteByte_1:
   \   00000002   9B77               SBIS    0x0E, 0x07
   \   00000004   CFFE               RJMP    ??WriteByte_1
     44            
     45            return SPDR;
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      REQUIRE _A_SPSR
   \   00000006                      REQUIRE _A_SPDR
   \   00000006                      ;               // Fall through to label ?Subroutine0
     46          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   B10F               IN      R16, 0x0F
   \   00000002   9508               RET
     47            

   \                                 In  segment CODE, align 2, keep-with-next
     48          unsigned char AvrSpi::ReadByte(unsigned char _byte)
   \                     ??ReadByte:
     49          {
     50            
     51            assert( (1 << PORT_MOSI_NUM ) & SPI_DDR);
     52            assert( (1 << PORT_SCK_NUM ) & SPI_DDR);
     53            
     54            assert( (1 << SPI_SPE ) & SPCR);
     55            assert( (1 << SPI_MSTR ) & SPCR);
     56            assert( (1 << SPI_SPR0 ) & SPCR);
     57            SPDR = _byte;
   \   00000000   B92F               OUT     0x0F, R18
     58            while (!(SPSR & (1<<SPI_SPIF) ));
   \                     ??ReadByte_1:
   \   00000002   9B77               SBIS    0x0E, 0x07
   \   00000004   CFFE               RJMP    ??ReadByte_1
     59            
     60            return SPDR;  
   \   00000006   ....               RJMP    ?Subroutine0
   \   00000008                      REQUIRE _A_SPSR
   \   00000008                      REQUIRE _A_SPDR
     61            
     62          }

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 AvrSpi *AvrSpi::new AvrSpi()
   \                     `??new AvrSpi`:
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   2B21               OR      R18, R17
   \   0000000C   F009               BREQ    `??new AvrSpi_1`
   \   0000000E   ....               RJMP    ??AvrSpi
   \                     `??new AvrSpi_1`:
   \   00000010   E000               LDI     R16, 0
   \   00000012   E010               LDI     R17, 0
   \   00000014   9508               RET

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     AvrSpi::AvrSpi()                   2      2
       -> AvrSpi::Init()                2      2
     AvrSpi::Init()                     0      2
     AvrSpi::ReadByte(unsigned char)
                                        0      2
     AvrSpi::WriteByte(unsigned char)
                                        0      2
     AvrSpi::new AvrSpi()               0      2
       -> operator new(unsigned int)
                                        0      2
       -> AvrSpi::AvrSpi()              0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_SPCR                           1
     _A_SPSR                           1
     _A_SPDR                           1
     _A_DDRB                           1
     AvrSpi::AvrSpi()                 28
     AvrSpi::Init()                   14
     AvrSpi::WriteByte(unsigned char)
                                       6
     ?Subroutine0                      4
     AvrSpi::ReadByte(unsigned char)
                                       8
     AvrSpi::new AvrSpi()             22
      Others                           6

 
  4 bytes in segment ABSOLUTE
 82 bytes in segment CODE
  6 bytes in segment NEAR_F
 
 82 bytes of CODE memory (+ 6 bytes shared)
  0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
