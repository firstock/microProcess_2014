###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    02/Dec/2013  00:32:57 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Drivers\mcp320 #
#                    4.cpp                                                    #
#    Command line =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Drivers\mcp320 #
#                    4.cpp --cpu=m128 -ms -o D:\Work\IAR\TIEF_Framework\ATmeg #
#                    a128_Release\Obj\ -D NDEBUG -D xWATCHDOG_ENABLE -lC      #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ -y    #
#                    --initializers_in_flash -z9 --cross_call_passes=2        #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    D:\Work\IAR\TIEF_Framework\ -I                           #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Basic_Componen #
#                    t\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/BSP/MC_E #
#                    02SMB_v1_3\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork #
#                    /Common\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Co #
#                    nfiguration\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWor #
#                    k/CPU/AVR_Driver\ -I D:\Work\IAR\TIEF_Framework/TIEL_Fra #
#                    meWork/Driver_Interface\ -I                              #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Drivers\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Service\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/System\ -I     #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Test\ -I       #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Utils\ -I      #
#                    D:\Work\IAR\TIEF_Framework/BUILD_COUNT\ -I "C:\Program   #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\INC\" -I "C:\Program Files (x86)\IAR           #
#                    Systems\Embedded Workbench 5.4_0\avr\INC\DLIB\"          #
#                    --eeprom_size 4096 --eec++ --dlib_config "C:\Program     #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"                  #
#    List file    =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\mcp320 #
#                    4.lst                                                    #
#    Object file  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\mcp3204 #
#                    .r90                                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Drivers\mcp3204.cpp
      1          ///////////////////////////////////////////////////////////////////////////////////////
      2           
      3          // Project description
      4           
      5          // -------------------------------------------
      6           
      7          // Description: SerialIO Class
      8           
      9          //
     10           
     11          // Author: Yoo Joo-Hyoung (potato97@naver.com)
     12           
     13          // Site: ccrs.hanyang.ac.kr
     14           
     15          // Copyright (C) 2013-2013 TIEL(TIEL is Embedded S/W library) Project.
     16           
     17          //
     18           
     19          //////////////////////////////////////////////////////////////////////////////////////////
     20          //
     21          //    License type: GNU General Public License (GPL)
     22          //      
     23          //    This program is free software: you can redistribute it and/or modify
     24          //    it under the terms of the GNU General Public License as published by
     25          //    the Free Software Foundation, either version 3 of the License, or
     26          //    (at your option) any later version.
     27          
     28          //    This program is distributed in the hope that it will be useful,
     29          //    but WITHOUT ANY WARRANTY; without even the implied warranty of
     30          //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     31          //    GNU General Public License for more details.
     32          
     33          //    You should have received a copy of the GNU General Public License
     34          //    along with this program.  If not, see <http://www.gnu.org/licenses/>.
     35          //
     36          //////////////////////////////////////////////////////////////////////////////////////////
     37          
     38          #include "mcp3204.h"
     39          #include <assert.h>
     40          

   \                                 In  segment CODE, align 2, keep-with-next
     41          Mcp3204::Mcp3204(ISpi & _spi)
   \                     ??Mcp3204:
     42          {
     43            spi = &_spi;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8321               STD     Z+1, R18
   \   00000004   8332               STD     Z+2, R19
     44            
     45            ch = 0;
   \   00000006   E020               LDI     R18, 0
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;               // Fall through to label ?Subroutine8
     46          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   8320               ST      Z, R18
   \   00000002   9508               RET
     47          

   \                                 In  segment CODE, align 2, keep-with-next
     48          void Mcp3204::Init(void)
   \                     ??Init:
     49          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     50            ch = 0;
   \   00000006   E000               LDI     R16, 0
   \   00000008   930C               ST      X, R16
     51            Init_Spi();
   \   0000000A   2F0A               MOV     R16, R26
   \   0000000C   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_0:
   \   0000000E   ....               RCALL   ?Subroutine6
     52            Spi_CS_H();
   \                     ??CrossCallReturnLabel_12:
   \   00000010   018D               MOVW    R17:R16, R27:R26
   \   00000012   9613               ADIW    R27:R26, 3
   \   00000014   91ED               LD      R30, X+
   \   00000016   91FC               LD      R31, X
   \   00000018   ....               RCALL   ?Subroutine1
     53          }
   \                     ??CrossCallReturnLabel_9:
   \   0000001A   91A9               LD      R26, Y+
   \   0000001C   91B9               LD      R27, Y+
   \   0000001E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9613               ADIW    R27:R26, 3
   \   00000002   91ED               LD      R30, X+
   \   00000004   91FC               LD      R31, X
   \   00000006   9714               SBIW    R27:R26, 4
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9632               ADIW    R31:R30, 2
   \   00000002                      REQUIRE ?Subroutine6
   \   00000002                      ;               // Fall through to label ?Subroutine6

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9125               LPM     R18, Z+
   \   00000002   91F4               LPM     R31, Z
   \   00000004   2FE2               MOV     R30, R18
   \   00000006   9409               IJMP

   \                                 In  segment CODE, align 2, keep-with-next
     54          void Mcp3204::SetChannel(unsigned char _ch)
   \                     ??SetChannel:
     55          {
     56            assert(0x03 >= _ch);
     57            
     58            ch = 0x03 & _ch;  
   \   00000000   7023               ANDI    R18, 0x03
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   ....               RJMP    ?Subroutine8
     59            
     60          }
     61          

   \                                 In  segment CODE, align 2, keep-with-next
     62          unsigned short Mcp3204::GetADC(void)
   \                     ??GetADC:
     63          {
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     64            unsigned short v = 0;
     65            Spi_CS_H();
   \   00000006   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_1:
   \   00000008   ....               RCALL   ?Subroutine1
     66            Spi_CS_L();
   \                     ??CrossCallReturnLabel_10:
   \   0000000A   018D               MOVW    R17:R16, R27:R26
   \   0000000C   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   0000000E   9634               ADIW    R31:R30, 4
   \   00000010   ....               RCALL   ?Subroutine6
     67            spi->WriteByte(0x06);
   \                     ??CrossCallReturnLabel_13:
   \   00000012   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   00000014   E026               LDI     R18, 6
   \   00000016   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_14:
   \   00000018   9632               ADIW    R31:R30, 2
   \   0000001A   ....               RCALL   ?Subroutine5
     68            v = spi->ReadByte(ch << 6) & 0x0f;
   \                     ??CrossCallReturnLabel_8:
   \   0000001C   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_4:
   \   0000001E   912C               LD      R18, X
   \   00000020   E430               LDI     R19, 64
   \   00000022   9F23               MUL     R18, R19
   \   00000024   2D20               MOV     R18, R0
   \   00000026   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_6:
   \   00000028   2F80               MOV     R24, R16
     69            v <<=8;
     70            v |= spi->ReadByte();
   \   0000002A   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_5:
   \   0000002C   E020               LDI     R18, 0
   \   0000002E   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_7:
   \   00000030   2E40               MOV     R4, R16
     71            Spi_CS_H();
   \   00000032   018D               MOVW    R17:R16, R27:R26
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8123               LDD     R18, Z+3
   \   00000038   81F4               LDD     R31, Z+4
   \   0000003A   2FE2               MOV     R30, R18
   \   0000003C   ....               RCALL   ?Subroutine1
     72            
     73            return v & 0xfff;
   \                     ??CrossCallReturnLabel_11:
   \   0000003E   2F18               MOV     R17, R24
   \   00000040   2D04               MOV     R16, R4
   \   00000042   701F               ANDI    R17, 0x0F
   \   00000044   E0E5               LDI     R30, 5
   \   00000046   ........           JMP     ?EPILOGUE_B5_L09
     74            
     75          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8101               LDD     R16, Z+1
   \   00000004   8112               LDD     R17, Z+2
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_15:
   \   00000002   9634               ADIW    R31:R30, 4
   \   00000004   ....               RJMP    ?Subroutine5

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8140               LD      R20, Z
   \   00000004   81F1               LDD     R31, Z+1
   \   00000006   2FE4               MOV     R30, R20
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   9145               LPM     R20, Z+
   \   00000002   91F4               LPM     R31, Z
   \   00000004   2FE4               MOV     R30, R20
   \   00000006   9409               IJMP
     76          

   \                                 In  segment CODE, align 2, keep-with-next
     77          unsigned short Mcp3204::GetADC(unsigned char _ch)
   \                     ??GetADC_1:
     78          {
     79            SetChannel(_ch);
   \   00000000   7023               ANDI    R18, 0x03
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8320               ST      Z, R18
     80            return GetADC();
   \   00000006   ....               RJMP    ??GetADC
     81          }

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 Mcp3204 *Mcp3204::new Mcp3204(ISpi &)
   \                     `??new Mcp3204`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   E005               LDI     R16, 5
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    `??operator new`
   \   0000000E   2F20               MOV     R18, R16
   \   00000010   2B21               OR      R18, R17
   \   00000012   F019               BREQ    `??new Mcp3204_1`
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   ....               RCALL   ??Mcp3204
   \   00000018   C002               RJMP    `??new Mcp3204_2`
   \                     `??new Mcp3204_1`:
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   E010               LDI     R17, 0
   \                     `??new Mcp3204_2`:
   \   0000001E   9189               LD      R24, Y+
   \   00000020   9199               LD      R25, Y+
   \   00000022   9508               RET
     82          

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     Mcp3204::GetADC()                  6      2
       ->   Indirect call               6      2
       ->   Indirect call               6      2
       ->   Indirect call               6      2
       ->   Indirect call               6      2
       ->   Indirect call               6      2
       ->   Indirect call               6      2
     Mcp3204::GetADC(unsigned char)     0      2
       -> Mcp3204::GetADC()             0      2
     Mcp3204::Init()                    2      2
       ->   Indirect call               2      2
       ->   Indirect call               2      2
     Mcp3204::Mcp3204(ISpi &)           0      2
     Mcp3204::SetChannel(unsigned char)
                                        0      2
     Mcp3204::new Mcp3204(ISpi &)       2      2
       -> operator new(unsigned int)
                                        2      2
       -> Mcp3204::Mcp3204(ISpi &)      2      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Mcp3204::Mcp3204(ISpi &)          8
     ?Subroutine8                      4
     Mcp3204::Init()                  32
     ?Subroutine2                     10
     ?Subroutine1                      2
     ?Subroutine6                      8
     Mcp3204::SetChannel(unsigned char)
                                       6
     Mcp3204::GetADC()                74
     ?Subroutine4                      8
     ?Subroutine0                      6
     ?Subroutine7                     10
     ?Subroutine5                      8
     Mcp3204::GetADC(unsigned char)    8
     Mcp3204::new Mcp3204(ISpi &)     36

 
 220 bytes in segment CODE
 
 220 bytes of CODE memory

Errors: none
Warnings: none
