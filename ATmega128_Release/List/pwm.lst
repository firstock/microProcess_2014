###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    02/Dec/2013  00:32:57 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Basic_Componen #
#                    t\pwm.cpp                                                #
#    Command line =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Basic_Componen #
#                    t\pwm.cpp --cpu=m128 -ms -o                              #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ -D     #
#                    NDEBUG -D xWATCHDOG_ENABLE -lC                           #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ -y    #
#                    --initializers_in_flash -z9 --cross_call_passes=2        #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    D:\Work\IAR\TIEF_Framework\ -I                           #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Basic_Componen #
#                    t\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/BSP/MC_E #
#                    02SMB_v1_3\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork #
#                    /Common\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Co #
#                    nfiguration\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWor #
#                    k/CPU/AVR_Driver\ -I D:\Work\IAR\TIEF_Framework/TIEL_Fra #
#                    meWork/Driver_Interface\ -I                              #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Drivers\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Service\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/System\ -I     #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Test\ -I       #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Utils\ -I      #
#                    D:\Work\IAR\TIEF_Framework/BUILD_COUNT\ -I "C:\Program   #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\INC\" -I "C:\Program Files (x86)\IAR           #
#                    Systems\Embedded Workbench 5.4_0\avr\INC\DLIB\"          #
#                    --eeprom_size 4096 --eec++ --dlib_config "C:\Program     #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"                  #
#    List file    =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\pwm.ls #
#                    t                                                        #
#    Object file  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\pwm.r90 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Basic_Component\pwm.cpp
      1          //////////////////////////////////////////////////////////////////////////////////////////
      2           
      3          // Project description
      4           
      5          // Author: Yoo Joo-Hyoung (potato97@naver.com)
      6           
      7          // Site: ccrs.hanyang.ac.kr
      8           
      9          // Copyright (C) 2013-2013 TIEF(TIEF is Embedded S/W Framework) Project.
     10           
     11          //
     12           
     13          //////////////////////////////////////////////////////////////////////////////////////////
     14          //
     15          //    License type: GNU General Public License (GPL)
     16          //      
     17          //    This program is free software: you can redistribute it and/or modify
     18          //    it under the terms of the GNU General Public License as published by
     19          //    the Free Software Foundation, either version 3 of the License, or
     20          //    (at your option) any later version.
     21          
     22          //    This program is distributed in the hope that it will be useful,
     23          //    but WITHOUT ANY WARRANTY; without even the implied warranty of
     24          //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     25          //    GNU General Public License for more details.
     26          
     27          //    You should have received a copy of the GNU General Public License
     28          //    along with this program.  If not, see <http://www.gnu.org/licenses/>.
     29          //
     30          //////////////////////////////////////////////////////////////////////////////////////////
     31          
     32          #include "pwm.h"
     33          #include <cassert>
     34          

   \                                 In  segment CODE, align 2, keep-with-next
     35          Pwm::Pwm(IPwmPort  *_ipwm)
   \                     ??Pwm:
     36          {
   \   00000000   ....               LDI     R20, LOW(??__vtbl)
   \   00000002   ....               LDI     R21, (??__vtbl) >> 8
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8343               STD     Z+3, R20
   \   00000008   8354               STD     Z+4, R21
     37            assert( 0 != _ipwm);
     38            
     39            ipwm = _ipwm;
   \   0000000A   8320               ST      Z, R18
   \   0000000C   8331               STD     Z+1, R19
     40          }
   \   0000000E   9508               RET
     41          

   \                                 In  segment CODE, align 2, keep-with-next
     42          Pwm::~Pwm()
   \                     `?~Pwm`:
     43          {
   \   00000000   2F40               MOV     R20, R16
   \   00000002   2B41               OR      R20, R17
   \   00000004   F021               BREQ    `?~Pwm_1`
   \   00000006   FF20               SBRS    R18, 0
   \   00000008   C002               RJMP    `?~Pwm_1`
     44            
     45          }
   \   0000000A   ........           CALL    `??operator delete`
   \                     `?~Pwm_1`:
   \   0000000E   9508               RET
     46          

   \                                 In  segment CODE, align 2, keep-with-next
     47          void Pwm::SetDuty(unsigned short _du)
   \                     ??SetDuty:
     48          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
     49            assert( 0 != ipwm);
     50            unsigned char r;
                                 ^
Warning[Pe550]: variable "r" was set but never used
     51            
     52            r = ipwm->GetResolution();
   \   00000008   910D               LD      R16, X+
   \   0000000A   911C               LD      R17, X
   \   0000000C   9711               SBIW    R27:R26, 1
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   8120               LD      R18, Z
   \   00000012   81F1               LDD     R31, Z+1
   \   00000014   2FE2               MOV     R30, R18
   \   00000016   8120               LD      R18, Z
   \   00000018   81F1               LDD     R31, Z+1
   \   0000001A   2FE2               MOV     R30, R18
   \   0000001C   9638               ADIW    R31:R30, 8
   \   0000001E   ....               RCALL   ?Subroutine2
     53            
     54            assert(8 == r || 16 == r);
     55            
     56            ipwm->SetDuty(_du  );
   \                     ??CrossCallReturnLabel_3:
   \   00000020   019C               MOVW    R19:R18, R25:R24
   \   00000022   910D               LD      R16, X+
   \   00000024   911C               LD      R17, X
   \   00000026   9711               SBIW    R27:R26, 1
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   8140               LD      R20, Z
   \   00000030   81F1               LDD     R31, Z+1
   \   00000032   2FE4               MOV     R30, R20
   \   00000034   9636               ADIW    R31:R30, 6
   \   00000036   9145               LPM     R20, Z+
   \   00000038   91F4               LPM     R31, Z
   \   0000003A   2FE4               MOV     R30, R20
   \   0000003C   9509               ICALL
     57            
     58            Run();
   \   0000003E   018D               MOVW    R17:R16, R27:R26
   \   00000040   ....               RCALL   ??Run
     59          }
   \   00000042   E0E4               LDI     R30, 4
   \   00000044   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9125               LPM     R18, Z+
   \   00000002   91F4               LPM     R31, Z
   \   00000004   2FE2               MOV     R30, R18
   \   00000006   9409               IJMP
     60          //  unsigned short SetFrequency(unsigned short _hz);
     61          

   \                                 In  segment CODE, align 2, keep-with-next
     62          void Pwm::Run(void)
   \                     ??Run:
     63          {
   \   00000000   ....               RCALL   ?Subroutine0
     64            assert( 0 != ipwm);
     65            ipwm->Run();
   \                     ??CrossCallReturnLabel_0:
   \   00000002   9632               ADIW    R31:R30, 2
   \   00000004   ....               RJMP    ?Subroutine1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   00000002   91A9               LD      R26, Y+
   \   00000004   91B9               LD      R27, Y+
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8100               LD      R16, Z
   \   00000008   8111               LDD     R17, Z+1
   \   0000000A   01D8               MOVW    R27:R26, R17:R16
   \   0000000C   91ED               LD      R30, X+
   \   0000000E   91FC               LD      R31, X
   \   00000010   9508               RET
     66          }
     67          

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Pwm::Stop(void)
   \                     ??Stop:
     69          {
   \   00000000   ....               RCALL   ?Subroutine0
     70            assert( 0 != ipwm);
     71            
     72            ipwm->Stop();
   \                     ??CrossCallReturnLabel_1:
   \   00000002   9634               ADIW    R31:R30, 4
   \   00000004                      REQUIRE ?Subroutine1
   \   00000004                      ;               // Fall through to label ?Subroutine1

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 Pwm *Pwm::new Pwm(IPwmPort *)
   \                     `??new Pwm`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   E005               LDI     R16, 5
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    `??operator new`
   \   0000000E   2F20               MOV     R18, R16
   \   00000010   2B21               OR      R18, R17
   \   00000012   F019               BREQ    `??new Pwm_1`
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   ....               RCALL   ??Pwm
   \   00000018   C002               RJMP    `??new Pwm_2`
   \                     `??new Pwm_1`:
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   E010               LDI     R17, 0
   \                     `??new Pwm_2`:
   \   0000001E   9189               LD      R24, Y+
   \   00000020   9199               LD      R25, Y+
   \   00000022   9508               RET
     73            
     74          }

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     Pwm::Pwm(IPwmPort *)               0      2
     Pwm::Run()                         2      2
       ->   Indirect call               2      2
     Pwm::SetDuty(unsigned short)       4      2
       ->   Indirect call               4      2
       ->   Indirect call               4      2
       -> Pwm::Run()                    4      2
     Pwm::Stop()                        2      2
       ->   Indirect call               2      2
     Pwm::new Pwm(IPwmPort *)           2      2
       -> operator new(unsigned int)
                                        2      2
       -> Pwm::Pwm(IPwmPort *)          2      2
     Pwm::~Pwm()                        0      2
       -> operator delete(void *)       0      2


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     Pwm::Pwm(IPwmPort *)           16
     Pwm::~Pwm()                    16
     Pwm::SetDuty(unsigned short)   72
     ?Subroutine2                    8
     Pwm::Run()                      6
     ?Subroutine1                    8
     ?Subroutine0                   18
     Pwm::Stop()                     4
     Pwm::new Pwm(IPwmPort *)       36
      Others                         2

 
 184 bytes in segment CODE
   2 bytes in segment NEAR_F
 
 184 bytes of CODE memory (+ 2 bytes shared)

Errors: none
Warnings: 1
