###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    02/Dec/2013  00:33:07 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Common\ringbuf #
#                    fer.cpp                                                  #
#    Command line =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Common\ringbuf #
#                    fer.cpp --cpu=m128 -ms -o D:\Work\IAR\TIEF_Framework\ATm #
#                    ega128_Release\Obj\ -D NDEBUG -D xWATCHDOG_ENABLE -lC    #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ -y    #
#                    --initializers_in_flash -z9 --cross_call_passes=2        #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    D:\Work\IAR\TIEF_Framework\ -I                           #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Basic_Componen #
#                    t\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/BSP/MC_E #
#                    02SMB_v1_3\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork #
#                    /Common\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Co #
#                    nfiguration\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWor #
#                    k/CPU/AVR_Driver\ -I D:\Work\IAR\TIEF_Framework/TIEL_Fra #
#                    meWork/Driver_Interface\ -I                              #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Drivers\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Service\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/System\ -I     #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Test\ -I       #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Utils\ -I      #
#                    D:\Work\IAR\TIEF_Framework/BUILD_COUNT\ -I "C:\Program   #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\INC\" -I "C:\Program Files (x86)\IAR           #
#                    Systems\Embedded Workbench 5.4_0\avr\INC\DLIB\"          #
#                    --eeprom_size 4096 --eec++ --dlib_config "C:\Program     #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"                  #
#    List file    =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ringbu #
#                    ffer.lst                                                 #
#    Object file  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ringbuf #
#                    fer.r90                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Common\ringbuffer.cpp
      1          //////////////////////////////////////////////////////////////////////////////////////////
      2           
      3          // Project description
      4           
      5          // Author: Yoo Joo-Hyoung (potato97@naver.com)
      6           
      7          // Site: ccrs.hanyang.ac.kr
      8           
      9          // Copyright (C) 2013-2013 TIEF(TIEF is Embedded S/W Framework) Project.
     10           
     11          //
     12           
     13          //////////////////////////////////////////////////////////////////////////////////////////
     14          //
     15          //    License type: GNU General Public License (GPL)
     16          //      
     17          //    This program is free software: you can redistribute it and/or modify
     18          //    it under the terms of the GNU General Public License as published by
     19          //    the Free Software Foundation, either version 3 of the License, or
     20          //    (at your option) any later version.
     21          
     22          //    This program is distributed in the hope that it will be useful,
     23          //    but WITHOUT ANY WARRANTY; without even the implied warranty of
     24          //    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     25          //    GNU General Public License for more details.
     26          
     27          //    You should have received a copy of the GNU General Public License
     28          //    along with this program.  If not, see <http://www.gnu.org/licenses/>.
     29          //
     30          //////////////////////////////////////////////////////////////////////////////////////////
     31          
     32          #include "ringbuffer.h"

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 RingBuffer::~RingBuffer()
   \                     `?~RingBuffer`:
   \   00000000   2F40               MOV     R20, R16
   \   00000002   2B41               OR      R20, R17
   \   00000004   F021               BREQ    `?~RingBuffer_1`
   \   00000006   FF20               SBRS    R18, 0
   \   00000008   C002               RJMP    `?~RingBuffer_1`
   \   0000000A   ........           CALL    `??operator delete`
   \                     `?~RingBuffer_1`:
   \   0000000E   9508               RET
     33          

   \                                 In  segment CODE, align 2, keep-with-next
     34          RingBuffer::RingBuffer(void)
   \                     ??RingBuffer:
   \   00000000   ....               LDI     R18, LOW(??__vtbl)
   \   00000002   ....               LDI     R19, (??__vtbl) >> 8
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8724               STD     Z+12, R18
   \   00000008   8735               STD     Z+13, R19
     35          :Head(0), Tail(0)
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   8320               ST      Z, R18
   \   0000000E   8321               STD     Z+1, R18
     36          {
     37            
     38          }
   \   00000010   9508               RET
     39          

   \                                 In  segment CODE, align 2, keep-with-next
     40          void RingBuffer::Flush(void)
   \                     ??Flush:
     41          {
     42            Head = Tail;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8121               LDD     R18, Z+1
   \   00000004   8320               ST      Z, R18
     43          }
   \   00000006   9508               RET
     44          

   \                                 In  segment CODE, align 2, keep-with-next
     45          char RingBuffer::isEmpty(void)
   \                     ??isEmpty:
     46          {
     47             return Head == Tail;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8120               LD      R18, Z
   \   00000004   8101               LDD     R16, Z+1
   \   00000006   1720               CP      R18, R16
   \   00000008   F409               BRNE    ??isEmpty_1
   \   0000000A   ....               RJMP    ?Subroutine1
   \                     ??isEmpty_1:
   \   0000000C   ....               RJMP    ?Subroutine0
     48          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   E001               LDI     R16, 1
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9508               RET
     49          

   \                                 In  segment CODE, align 2, keep-with-next
     50          char RingBuffer::PushBack(unsigned char _d)
   \                     ??PushBack:
     51          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01F8               MOVW    R31:R30, R17:R16
     52              if( !( (Head+1 == Tail) || ( Head == Buff_size - 1 && Tail == 0) ) )
   \   00000006   8180               LD      R24, Z
   \   00000008   E090               LDI     R25, 0
   \   0000000A   9601               ADIW    R25:R24, 1
   \   0000000C   8101               LDD     R16, Z+1
   \   0000000E   E010               LDI     R17, 0
   \   00000010   1780               CP      R24, R16
   \   00000012   4090               SBCI    R25, 0
   \   00000014   F0A1               BREQ    ??PushBack_1
   \   00000016   8100               LD      R16, Z
   \   00000018   3009               CPI     R16, 9
   \   0000001A   F419               BRNE    ??PushBack_2
   \   0000001C   8101               LDD     R16, Z+1
   \   0000001E   2300               TST     R16
   \   00000020   F071               BREQ    ??PushBack_1
     53              {
     54                buff[Head] = _d;
   \                     ??PushBack_2:
   \   00000022   8100               LD      R16, Z
   \   00000024   01DF               MOVW    R27:R26, R31:R30
   \   00000026   0FA0               ADD     R26, R16
   \   00000028   1FB1               ADC     R27, R17
   \   0000002A   9612               ADIW    R27:R26, 2
   \   0000002C   932C               ST      X, R18
     55                Head++;
   \   0000002E   8100               LD      R16, Z
   \   00000030   9503               INC     R16
   \   00000032   8300               ST      Z, R16
     56                if(Buff_size == Head)
   \   00000034   300A               CPI     R16, 10
   \   00000036   F409               BRNE    ??PushBack_3
     57                  Head = 0;
   \   00000038   8310               ST      Z, R17
     58                
     59                return 1;
   \                     ??PushBack_3:
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   C001               RJMP    ??PushBack_4
     60              }
     61              
     62              return 0; //buffer is full
   \                     ??PushBack_1:
   \   0000003E   E000               LDI     R16, 0
   \                     ??PushBack_4:
   \   00000040   E0E4               LDI     R30, 4
   \   00000042   ........           JMP     ?EPILOGUE_B4_L09
     63            
     64          }
     65          
     66          

   \                                 In  segment CODE, align 2, keep-with-next
     67          char RingBuffer::Pop(unsigned char & _return)
   \                     ??Pop:
     68          {
     69           
     70            if(Head != Tail)
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8140               LD      R20, Z
   \   00000004   8151               LDD     R21, Z+1
   \   00000006   1745               CP      R20, R21
   \   00000008   F079               BREQ    ??Pop_1
     71            {
     72              _return =  buff[Tail];
   \   0000000A   2F45               MOV     R20, R21
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   0FE4               ADD     R30, R20
   \   00000010   1FF5               ADC     R31, R21
   \   00000012   8142               LDD     R20, Z+2
   \   00000014   01F9               MOVW    R31:R30, R19:R18
   \   00000016   8340               ST      Z, R20
     73              Tail++;
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   8121               LDD     R18, Z+1
   \   0000001C   9523               INC     R18
   \   0000001E   8321               STD     Z+1, R18
     74              if(Buff_size == Tail)
   \   00000020   302A               CPI     R18, 10
   \   00000022   F409               BRNE    ??Pop_2
     75              {
     76                Tail = 0;
   \   00000024   8351               STD     Z+1, R21
     77              }
     78              
     79              return 1;
   \                     ??Pop_2:
   \   00000026   ....               RJMP    ?Subroutine1
     80            }
     81            
     82            return 0;//fail. Buffer is empty.
   \                     ??Pop_1:
   \   00000028   ....               RJMP    ?Subroutine0
     83            
     84          }

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 RingBuffer *RingBuffer::new RingBuffer()
   \                     `??new RingBuffer`:
   \   00000000   E00E               LDI     R16, 14
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   2B21               OR      R18, R17
   \   0000000C   F009               BREQ    `??new RingBuffer_1`
   \   0000000E   ....               RJMP    ??RingBuffer
   \                     `??new RingBuffer_1`:
   \   00000010   E000               LDI     R16, 0
   \   00000012   E010               LDI     R17, 0
   \   00000014   9508               RET

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     RingBuffer::Flush()                0      2
     RingBuffer::Pop(unsigned char &)
                                        0      2
     RingBuffer::PushBack(unsigned char)
                                        4      2
     RingBuffer::RingBuffer()           0      2
     RingBuffer::isEmpty()              0      2
     RingBuffer::new RingBuffer()       0      2
       -> operator new(unsigned int)
                                        0      2
       -> RingBuffer::RingBuffer()      0      2
     RingBuffer::~RingBuffer()          0      2
       -> operator delete(void *)       0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RingBuffer::~RingBuffer()        16
     RingBuffer::RingBuffer()         18
     RingBuffer::Flush()               8
     RingBuffer::isEmpty()            14
     ?Subroutine1                      4
     ?Subroutine0                      4
     RingBuffer::PushBack(unsigned char)
                                      70
     RingBuffer::Pop(unsigned char &)
                                      42
     RingBuffer::new RingBuffer()     22
      Others                           2

 
 198 bytes in segment CODE
   2 bytes in segment NEAR_F
 
 184 bytes of CODE memory (+ 16 bytes shared)

Errors: none
Warnings: none
