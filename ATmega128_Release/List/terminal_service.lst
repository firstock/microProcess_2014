###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    02/Dec/2013  00:33:08 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Service\termin #
#                    al_service.cpp                                           #
#    Command line =  D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Service\termin #
#                    al_service.cpp --cpu=m128 -ms -o                         #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\ -D     #
#                    NDEBUG -D xWATCHDOG_ENABLE -lC                           #
#                    D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\ -y    #
#                    --initializers_in_flash -z9 --cross_call_passes=2        #
#                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I ./\ -I    #
#                    D:\Work\IAR\TIEF_Framework\ -I                           #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Basic_Componen #
#                    t\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/BSP/MC_E #
#                    02SMB_v1_3\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork #
#                    /Common\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Co #
#                    nfiguration\ -I D:\Work\IAR\TIEF_Framework/TIEL_FrameWor #
#                    k/CPU/AVR_Driver\ -I D:\Work\IAR\TIEF_Framework/TIEL_Fra #
#                    meWork/Driver_Interface\ -I                              #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Drivers\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Service\ -I    #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/System\ -I     #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Test\ -I       #
#                    D:\Work\IAR\TIEF_Framework/TIEL_FrameWork/Utils\ -I      #
#                    D:\Work\IAR\TIEF_Framework/BUILD_COUNT\ -I "C:\Program   #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\INC\" -I "C:\Program Files (x86)\IAR           #
#                    Systems\Embedded Workbench 5.4_0\avr\INC\DLIB\"          #
#                    --eeprom_size 4096 --eec++ --dlib_config "C:\Program     #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.4_0\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h"                  #
#    List file    =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\List\termin #
#                    al_service.lst                                           #
#    Object file  =  D:\Work\IAR\TIEF_Framework\ATmega128_Release\Obj\termina #
#                    l_service.r90                                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Service\terminal_service.cpp
      1          
      2          #include "terminal_service.h"

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string::string(string const &)
   \                     ??string:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   01F9               MOVW    R31:R30, R19:R18
   \   0000000A   8100               LD      R16, Z
   \   0000000C   930C               ST      X, R16
   \   0000000E   E040               LDI     R20, 0
   \   00000010   E050               LDI     R21, 0
   \   00000012   E020               LDI     R18, 0
   \   00000014   2F0A               MOV     R16, R26
   \   00000016   ........           CALL    ??_Tidy
   \   0000001A   ....               LDI     R30, LOW(??npos)
   \   0000001C   ....               LDI     R31, (??npos) >> 8
   \   0000001E   8160               LD      R22, Z
   \   00000020   8171               LDD     R23, Z+1
   \   00000022   E040               LDI     R20, 0
   \   00000024   E050               LDI     R21, 0
   \   00000026   019C               MOVW    R19:R18, R25:R24
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   ........           CALL    ??assign
   \   0000002E   018D               MOVW    R17:R16, R27:R26
   \   00000030   E0E4               LDI     R30, 4
   \   00000032   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string::string(char const *)
   \                     ??string_1:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8300               ST      Z, R16
   \   0000000C   E040               LDI     R20, 0
   \   0000000E   E050               LDI     R21, 0
   \   00000010   E020               LDI     R18, 0
   \   00000012   ........           CALL    ??_Tidy
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   ........           CALL    strlen
   \   0000001C   01A8               MOVW    R21:R20, R17:R16
   \   0000001E   019C               MOVW    R19:R18, R25:R24
   \   00000020   018D               MOVW    R17:R16, R27:R26
   \   00000022   ........           CALL    ??assign_1
   \   00000026   018D               MOVW    R17:R16, R27:R26
   \   00000028   E0E4               LDI     R30, 4
   \   0000002A   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string::string(char const *, char const *)
   \                     ??string_2:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   8300               ST      Z, R16
   \   0000000E   E040               LDI     R20, 0
   \   00000010   E050               LDI     R21, 0
   \   00000012   E020               LDI     R18, 0
   \   00000014   ........           CALL    ??_Tidy
   \   00000018   1584               CP      R24, R4
   \   0000001A   0595               CPC     R25, R5
   \   0000001C   F039               BREQ    ??string_3
   \   0000001E   1A48               SUB     R4, R24
   \   00000020   0A59               SBC     R5, R25
   \   00000022   01A2               MOVW    R21:R20, R5:R4
   \   00000024   019C               MOVW    R19:R18, R25:R24
   \   00000026   018D               MOVW    R17:R16, R27:R26
   \   00000028   ........           CALL    ??assign_1
   \                     ??string_3:
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   E0E6               LDI     R30, 6
   \   00000030   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 char * string::insert(char *, char)
   \                     ??insert:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   2E64               MOV     R6, R20
   \   0000000A   ........           CALL    ??_Myptr
   \   0000000E   2F28               MOV     R18, R24
   \   00000010   2B29               OR      R18, R25
   \   00000012   F419               BRNE    ??insert_2
   \   00000014   E080               LDI     R24, 0
   \   00000016   E090               LDI     R25, 0
   \   00000018   C002               RJMP    ??insert_3
   \                     ??insert_2:
   \   0000001A   1B80               SUB     R24, R16
   \   0000001C   0B91               SBC     R25, R17
   \                     ??insert_3:
   \   0000001E   2D66               MOV     R22, R6
   \   00000020   E041               LDI     R20, 1
   \   00000022   E050               LDI     R21, 0
   \   00000024   019C               MOVW    R19:R18, R25:R24
   \   00000026   0182               MOVW    R17:R16, R5:R4
   \   00000028   ........           CALL    ??insert_1
   \   0000002C   0182               MOVW    R17:R16, R5:R4
   \   0000002E   ........           CALL    ??_Myptr
   \   00000032   0F08               ADD     R16, R24
   \   00000034   1F19               ADC     R17, R25
   \   00000036   E0E7               LDI     R30, 7
   \   00000038   ........           JMP     ?EPILOGUE_B7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 char * string::erase(char *, char *)
   \                     ??erase:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   0138               MOVW    R7:R6, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
   \   0000000A   ........           CALL    ??_Myptr
   \   0000000E   2F2A               MOV     R18, R26
   \   00000010   2B2B               OR      R18, R27
   \   00000012   F419               BRNE    ??erase_2
   \   00000014   2444               CLR     R4
   \   00000016   2455               CLR     R5
   \   00000018   C003               RJMP    ??erase_3
   \                     ??erase_2:
   \   0000001A   012D               MOVW    R5:R4, R27:R26
   \   0000001C   1A40               SUB     R4, R16
   \   0000001E   0A51               SBC     R5, R17
   \                     ??erase_3:
   \   00000020   2F08               MOV     R16, R24
   \   00000022   2B09               OR      R16, R25
   \   00000024   F419               BRNE    ??erase_4
   \   00000026   E080               LDI     R24, 0
   \   00000028   E090               LDI     R25, 0
   \   0000002A   C002               RJMP    ??erase_5
   \                     ??erase_4:
   \   0000002C   1B8A               SUB     R24, R26
   \   0000002E   0B9B               SBC     R25, R27
   \                     ??erase_5:
   \   00000030   01AC               MOVW    R21:R20, R25:R24
   \   00000032   0192               MOVW    R19:R18, R5:R4
   \   00000034   0183               MOVW    R17:R16, R7:R6
   \   00000036   ........           CALL    ??erase_1
   \   0000003A   0183               MOVW    R17:R16, R7:R6
   \   0000003C   ........           CALL    ??_Myptr
   \   00000040   0D04               ADD     R16, R4
   \   00000042   1D15               ADC     R17, R5
   \   00000044   E0E8               LDI     R30, 8
   \   00000046   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void string::clear()
   \                     ??clear:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   ........           CALL    ??_Myptr
   \   0000000A   01C8               MOVW    R25:R24, R17:R16
   \   0000000C   9651               ADIW    R27:R26, 17
   \   0000000E   910D               LD      R16, X+
   \   00000010   911C               LD      R17, X
   \   00000012   9752               SBIW    R27:R26, 18
   \   00000014   0F80               ADD     R24, R16
   \   00000016   1F91               ADC     R25, R17
   \   00000018   018D               MOVW    R17:R16, R27:R26
   \   0000001A   ........           CALL    ??_Myptr
   \   0000001E   01AC               MOVW    R21:R20, R25:R24
   \   00000020   0198               MOVW    R19:R18, R17:R16
   \   00000022   018D               MOVW    R17:R16, R27:R26
   \   00000024   ........           CALL    ??erase
   \   00000028   E0E4               LDI     R30, 4
   \   0000002A   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 int string::compare(string const &) const
   \                     ??compare:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01F9               MOVW    R31:R30, R19:R18
   \   00000006   8941               LDD     R20, Z+17
   \   00000008   8952               LDD     R21, Z+18
   \   0000000A   8983               LDD     R24, Z+19
   \   0000000C   8994               LDD     R25, Z+20
   \   0000000E   3180               CPI     R24, 16
   \   00000010   4090               SBCI    R25, 0
   \   00000012   F018               BRCS    ??compare_2
   \   00000014   8121               LDD     R18, Z+1
   \   00000016   8132               LDD     R19, Z+2
   \   00000018   C002               RJMP    ??compare_3
   \                     ??compare_2:
   \   0000001A   5F2F               SUBI    R18, 255
   \   0000001C   4F3F               SBCI    R19, 255
   \                     ??compare_3:
   \   0000001E   935A               ST      -Y, R21
   \   00000020   934A               ST      -Y, R20
   \   00000022   01B9               MOVW    R23:R22, R19:R18
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8941               LDD     R20, Z+17
   \   00000028   8952               LDD     R21, Z+18
   \   0000002A   E020               LDI     R18, 0
   \   0000002C   E030               LDI     R19, 0
   \   0000002E   ........           CALL    ??compare_1
   \   00000032   9189               LD      R24, Y+
   \   00000034   9199               LD      R25, Y+
   \   00000036   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 char *string::_Myptr()
   \                     ??_Myptr:
   \   00000000   019C               MOVW    R19:R18, R25:R24
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8983               LDD     R24, Z+19
   \   00000006   8994               LDD     R25, Z+20
   \   00000008   3180               CPI     R24, 16
   \   0000000A   4090               SBCI    R25, 0
   \   0000000C   F018               BRCS    ??_Myptr_1
   \   0000000E   8101               LDD     R16, Z+1
   \   00000010   8112               LDD     R17, Z+2
   \   00000012   C002               RJMP    ??_Myptr_2
   \                     ??_Myptr_1:
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \                     ??_Myptr_2:
   \   00000018   01C9               MOVW    R25:R24, R19:R18
   \   0000001A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string *_Copy_opt0(string const *, string const *, string *)
   \                     ??_Copy_opt0:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
   \   0000000A   C00F               RJMP    ??_Copy_opt0_1
   \                     ??_Copy_opt0_2:
   \   0000000C   ....               LDI     R30, LOW(??npos)
   \   0000000E   ....               LDI     R31, (??npos) >> 8
   \   00000010   8160               LD      R22, Z
   \   00000012   8171               LDD     R23, Z+1
   \   00000014   E040               LDI     R20, 0
   \   00000016   E050               LDI     R21, 0
   \   00000018   0192               MOVW    R19:R18, R5:R4
   \   0000001A   018D               MOVW    R17:R16, R27:R26
   \   0000001C   ........           CALL    ??assign
   \   00000020   9655               ADIW    R27:R26, 21
   \   00000022   E105               LDI     R16, 21
   \   00000024   0E40               ADD     R4, R16
   \   00000026   E000               LDI     R16, 0
   \   00000028   1E50               ADC     R5, R16
   \                     ??_Copy_opt0_1:
   \   0000002A   1648               CP      R4, R24
   \   0000002C   0659               CPC     R5, R25
   \   0000002E   F771               BRNE    ??_Copy_opt0_2
   \   00000030   018D               MOVW    R17:R16, R27:R26
   \   00000032   E0E6               LDI     R30, 6
   \   00000034   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string *_Copy_backward_opt0(string const *, string const *, string *)
   \                     ??_Copy_backward_opt0:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
   \   0000000A   C00F               RJMP    ??_Copy_backward_opt0_1
   \                     ??_Copy_backward_opt0_2:
   \   0000000C   9745               SBIW    R25:R24, 21
   \   0000000E   EE0B               LDI     R16, 235
   \   00000010   0E40               ADD     R4, R16
   \   00000012   EF0F               LDI     R16, 255
   \   00000014   1E50               ADC     R5, R16
   \   00000016   ....               LDI     R30, LOW(??npos)
   \   00000018   ....               LDI     R31, (??npos) >> 8
   \   0000001A   8160               LD      R22, Z
   \   0000001C   8171               LDD     R23, Z+1
   \   0000001E   E040               LDI     R20, 0
   \   00000020   E050               LDI     R21, 0
   \   00000022   019C               MOVW    R19:R18, R25:R24
   \   00000024   0182               MOVW    R17:R16, R5:R4
   \   00000026   ........           CALL    ??assign
   \                     ??_Copy_backward_opt0_1:
   \   0000002A   17A8               CP      R26, R24
   \   0000002C   07B9               CPC     R27, R25
   \   0000002E   F771               BRNE    ??_Copy_backward_opt0_2
   \   00000030   0182               MOVW    R17:R16, R5:R4
   \   00000032   E0E6               LDI     R30, 6
   \   00000034   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 unsigned short *_Backward_copier<unsigned short, true>::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
   \                     ??_Copy:
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   01BA               MOVW    R23:R22, R21:R20
   \   00000004   1BE0               SUB     R30, R16
   \   00000006   0BF1               SBC     R31, R17
   \   00000008   95F5               ASR     R31
   \   0000000A   95E7               ROR     R30
   \   0000000C   01AF               MOVW    R21:R20, R31:R30
   \   0000000E   0F44               LSL     R20
   \   00000010   1F55               ROL     R21
   \   00000012   0198               MOVW    R19:R18, R17:R16
   \   00000014   0FEE               LSL     R30
   \   00000016   1FFF               ROL     R31
   \   00000018   95F1               NEG     R31
   \   0000001A   95E1               NEG     R30
   \   0000001C   40F0               SBCI    R31, 0
   \   0000001E   0F6E               ADD     R22, R30
   \   00000020   1F7F               ADC     R23, R31
   \   00000022   018B               MOVW    R17:R16, R23:R22
   \   00000024   ........           JMP     memmove

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string *_Uninit_copy0(string const *, string const *, string *)
   \                     ??_Uninit_copy0:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
   \   0000000A   C009               RJMP    ??_Uninit_copy0_1
   \                     ??_Uninit_copy0_2:
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   2B09               OR      R16, R25
   \   00000010   F021               BREQ    ??_Uninit_copy0_3
   \   00000012   019D               MOVW    R19:R18, R27:R26
   \   00000014   018C               MOVW    R17:R16, R25:R24
   \   00000016   ........           CALL    ??string
   \                     ??_Uninit_copy0_3:
   \   0000001A   9645               ADIW    R25:R24, 21
   \   0000001C   9655               ADIW    R27:R26, 21
   \                     ??_Uninit_copy0_1:
   \   0000001E   15A4               CP      R26, R4
   \   00000020   05B5               CPC     R27, R5
   \   00000022   F7A1               BRNE    ??_Uninit_copy0_2
   \   00000024   018C               MOVW    R17:R16, R25:R24
   \   00000026   E0E6               LDI     R30, 6
   \   00000028   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 char *_Uninit_copy(char const *, char const *, char *)
   \                     ??_Uninit_copy:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C9               MOVW    R25:R24, R19:R18
   \   00000006   01BA               MOVW    R23:R22, R21:R20
   \   00000008   1B80               SUB     R24, R16
   \   0000000A   0B91               SBC     R25, R17
   \   0000000C   01AC               MOVW    R21:R20, R25:R24
   \   0000000E   0198               MOVW    R19:R18, R17:R16
   \   00000010   018B               MOVW    R17:R16, R23:R22
   \   00000012   ........           CALL    memmove
   \   00000016   0F08               ADD     R16, R24
   \   00000018   1F19               ADC     R17, R25
   \   0000001A   9189               LD      R24, Y+
   \   0000001C   9199               LD      R25, Y+
   \   0000001E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Uninitialized_fill_n(string *, unsigned int, string const &, allocator<string> &)
   \                     ??_Uninitialized_fill_n:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
   \   0000000A   C00B               RJMP    ??_Uninitialized_fill_n_1
   \                     ??_Uninitialized_fill_n_2:
   \   0000000C   2F0A               MOV     R16, R26
   \   0000000E   2B0B               OR      R16, R27
   \   00000010   F021               BREQ    ??_Uninitialized_fill_n_3
   \   00000012   019C               MOVW    R19:R18, R25:R24
   \   00000014   018D               MOVW    R17:R16, R27:R26
   \   00000016   ........           CALL    ??string
   \                     ??_Uninitialized_fill_n_3:
   \   0000001A   EF0F               LDI     R16, 255
   \   0000001C   0E40               ADD     R4, R16
   \   0000001E   1E50               ADC     R5, R16
   \   00000020   9655               ADIW    R27:R26, 21
   \                     ??_Uninitialized_fill_n_1:
   \   00000022   2D04               MOV     R16, R4
   \   00000024   2905               OR      R16, R5
   \   00000026   F791               BRNE    ??_Uninitialized_fill_n_2
   \   00000028   E0E6               LDI     R30, 6
   \   0000002A   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   E020               LDI     R18, 0
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8320               ST      Z, R18
   \   00000006   8321               STD     Z+1, R18
   \   00000008   8322               STD     Z+2, R18
   \   0000000A   8323               STD     Z+3, R18
   \   0000000C   8324               STD     Z+4, R18
   \   0000000E   8325               STD     Z+5, R18
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 bool _Vector_value<allocator<void>>::_Buy(unsigned int)
   \                     ??_Buy:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   ........           CALL    ??_Zero
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   2B09               OR      R16, R25
   \   00000010   F411               BRNE    ??_Buy_1
   \   00000012   E000               LDI     R16, 0
   \   00000014   C015               RJMP    ??_Buy_2
   \                     ??_Buy_1:
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   ........           CALL    `??operator new`
   \   0000001C   930D               ST      X+, R16
   \   0000001E   931C               ST      X, R17
   \   00000020   9711               SBIW    R27:R26, 1
   \   00000022   910D               LD      R16, X+
   \   00000024   911C               LD      R17, X
   \   00000026   9711               SBIW    R27:R26, 1
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8302               STD     Z+2, R16
   \   0000002C   8313               STD     Z+3, R17
   \   0000002E   910D               LD      R16, X+
   \   00000030   911C               LD      R17, X
   \   00000032   9711               SBIW    R27:R26, 1
   \   00000034   0F08               ADD     R16, R24
   \   00000036   1F19               ADC     R17, R25
   \   00000038   2FFB               MOV     R31, R27
   \   0000003A   8304               STD     Z+4, R16
   \   0000003C   8315               STD     Z+5, R17
   \   0000003E   E001               LDI     R16, 1
   \                     ??_Buy_2:
   \   00000040   E0E4               LDI     R30, 4
   \   00000042   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<string, allocator<string>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   2B01               OR      R16, R17
   \   0000000E   F099               BREQ    ??_Tidy0_1
   \   00000010   9612               ADIW    R27:R26, 2
   \   00000012   914D               LD      R20, X+
   \   00000014   915C               LD      R21, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   912D               LD      R18, X+
   \   0000001A   913C               LD      R19, X
   \   0000001C   9711               SBIW    R27:R26, 1
   \   0000001E   018D               MOVW    R17:R16, R27:R26
   \   00000020   ........           CALL    ??_Destroy
   \   00000024   910D               LD      R16, X+
   \   00000026   911D               LD      R17, X+
   \   00000028   930D               ST      X+, R16
   \   0000002A   931C               ST      X, R17
   \   0000002C   9713               SBIW    R27:R26, 3
   \   0000002E   910D               LD      R16, X+
   \   00000030   911C               LD      R17, X
   \   00000032   ........           CALL    `??operator delete`
   \                     ??_Tidy0_1:
   \   00000036   91A9               LD      R26, Y+
   \   00000038   91B9               LD      R27, Y+
   \   0000003A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
   \                     ??_Destroy:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01DA               MOVW    R27:R26, R21:R20
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   C007               RJMP    ??_Destroy_1
   \                     ??_Destroy_2:
   \   0000000A   E040               LDI     R20, 0
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   E021               LDI     R18, 1
   \   00000010   018C               MOVW    R17:R16, R25:R24
   \   00000012   ........           CALL    ??_Tidy
   \   00000016   9645               ADIW    R25:R24, 21
   \                     ??_Destroy_1:
   \   00000018   178A               CP      R24, R26
   \   0000001A   079B               CPC     R25, R27
   \   0000001C   F7B1               BRNE    ??_Destroy_2
   \   0000001E   E0E4               LDI     R30, 4
   \   00000020   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<string, allocator<string>>::_Assign(_Vector_impl<string, allocator<string>> const &)
   \                     ??_Assign:
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   17A2               CP      R26, R18
   \   0000000A   07B3               CPC     R27, R19
   \   0000000C   F409               BRNE    $+2+2
   \   0000000E   C06B               RJMP    ??_Assign_1
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   8042               LDD     R4, Z+2
   \   00000014   8053               LDD     R5, Z+3
   \   00000016   8120               LD      R18, Z
   \   00000018   8131               LDD     R19, Z+1
   \   0000001A   0182               MOVW    R17:R16, R5:R4
   \   0000001C   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_78:
   \   0000001E   0148               MOVW    R9:R8, R17:R16
   \   00000020   2B01               OR      R16, R17
   \   00000022   F439               BRNE    ??_Assign_2
   \   00000024   018D               MOVW    R17:R16, R27:R26
   \   00000026   ........           CALL    ??_Tidy0
   \   0000002A   018D               MOVW    R17:R16, R27:R26
   \   0000002C   ........           CALL    ??_Zero
   \   00000030   C05A               RJMP    ??_Assign_1
   \                     ??_Assign_2:
   \   00000032   90CD               LD      R12, X+
   \   00000034   90DC               LD      R13, X
   \   00000036   9711               SBIW    R27:R26, 1
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8062               LDD     R6, Z+2
   \   0000003C   8073               LDD     R7, Z+3
   \   0000003E   0183               MOVW    R17:R16, R7:R6
   \   00000040   190C               SUB     R16, R12
   \   00000042   091D               SBC     R17, R13
   \   00000044   ....               RCALL   ??Subroutine39_0
   \                     ??CrossCallReturnLabel_76:
   \   00000046   0158               MOVW    R11:R10, R17:R16
   \   00000048   14A8               CP      R10, R8
   \   0000004A   04B9               CPC     R11, R9
   \   0000004C   F0B0               BRCS    ??_Assign_3
   \   0000004E   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_30:
   \   00000050   01FC               MOVW    R31:R30, R25:R24
   \   00000052   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_24:
   \   00000054   0198               MOVW    R19:R18, R17:R16
   \   00000056   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_29:
   \   00000058   904D               LD      R4, X+
   \   0000005A   905C               LD      R5, X
   \   0000005C   9711               SBIW    R27:R26, 1
   \   0000005E   01FC               MOVW    R31:R30, R25:R24
   \   00000060   8102               LDD     R16, Z+2
   \   00000062   8113               LDD     R17, Z+3
   \   00000064   8120               LD      R18, Z
   \   00000066   8131               LDD     R19, Z+1
   \   00000068   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_79:
   \   0000006A   01A8               MOVW    R21:R20, R17:R16
   \   0000006C   E105               LDI     R16, 21
   \   0000006E   E010               LDI     R17, 0
   \   00000070   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_32:
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8242               STD     Z+2, R4
   \   00000076   8253               STD     Z+3, R5
   \   00000078   C036               RJMP    ??_Assign_1
   \                     ??_Assign_3:
   \   0000007A   2FEA               MOV     R30, R26
   \   0000007C   8104               LDD     R16, Z+4
   \   0000007E   8115               LDD     R17, Z+5
   \   00000080   190C               SUB     R16, R12
   \   00000082   091D               SBC     R17, R13
   \   00000084   ....               RCALL   ??Subroutine39_0
   \                     ??CrossCallReturnLabel_77:
   \   00000086   1508               CP      R16, R8
   \   00000088   0519               CPC     R17, R9
   \   0000008A   F068               BRCS    ??_Assign_4
   \   0000008C   01FC               MOVW    R31:R30, R25:R24
   \   0000008E   0129               MOVW    R5:R4, R19:R18
   \   00000090   E145               LDI     R20, 21
   \   00000092   E050               LDI     R21, 0
   \   00000094   0185               MOVW    R17:R16, R11:R10
   \   00000096   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_33:
   \   00000098   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_31:
   \   0000009A   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_25:
   \   0000009C   01FC               MOVW    R31:R30, R25:R24
   \   0000009E   8122               LDD     R18, Z+2
   \   000000A0   8133               LDD     R19, Z+3
   \   000000A2   0182               MOVW    R17:R16, R5:R4
   \   000000A4   C01B               RJMP    ??CrossCallReturnLabel_27
   \                     ??_Assign_4:
   \   000000A6   910D               LD      R16, X+
   \   000000A8   911C               LD      R17, X
   \   000000AA   9711               SBIW    R27:R26, 1
   \   000000AC   2B01               OR      R16, R17
   \   000000AE   F051               BREQ    ??_Assign_5
   \   000000B0   01A3               MOVW    R21:R20, R7:R6
   \   000000B2   912D               LD      R18, X+
   \   000000B4   913C               LD      R19, X
   \   000000B6   9711               SBIW    R27:R26, 1
   \   000000B8   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_28:
   \   000000BA   910D               LD      R16, X+
   \   000000BC   911C               LD      R17, X
   \   000000BE   9711               SBIW    R27:R26, 1
   \   000000C0   ........           CALL    `??operator delete`
   \                     ??_Assign_5:
   \   000000C4   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_26:
   \   000000C6   1B20               SUB     R18, R16
   \   000000C8   0B31               SBC     R19, R17
   \   000000CA   018D               MOVW    R17:R16, R27:R26
   \   000000CC   ........           CALL    ??_Buy
   \   000000D0   2300               TST     R16
   \   000000D2   F049               BREQ    ??_Assign_1
   \   000000D4   914D               LD      R20, X+
   \   000000D6   915C               LD      R21, X
   \   000000D8   9711               SBIW    R27:R26, 1
   \   000000DA   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_27:
   \   000000DC   ........           CALL    ??_Uninit_copy0
   \   000000E0   01FD               MOVW    R31:R30, R27:R26
   \   000000E2   8302               STD     Z+2, R16
   \   000000E4   8313               STD     Z+3, R17
   \                     ??_Assign_1:
   \   000000E6   E0EE               LDI     R30, 14
   \   000000E8   ........           JMP     ?EPILOGUE_B14_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ........           CALL    ?S_EC_MUL_L02
   \   00000004   0E40               ADD     R4, R16
   \   00000006   1E51               ADC     R5, R17
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   018D               MOVW    R17:R16, R27:R26
   \   00000002   ........           JMP     ??_Destroy

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   8122               LDD     R18, Z+2
   \   00000004   8133               LDD     R19, Z+3
   \   00000006   8100               LD      R16, Z
   \   00000008   8111               LDD     R17, Z+1
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   ........           CALL    ??_Copy_opt0
   \   00000008   01FD               MOVW    R31:R30, R27:R26
   \   0000000A   8142               LDD     R20, Z+2
   \   0000000C   8153               LDD     R21, Z+3
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   1B02               SUB     R16, R18
   \   00000002   0B13               SBC     R17, R19
   \   00000004                      REQUIRE ??Subroutine39_0
   \   00000004                      ;               // Fall through to label ??Subroutine39_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine39_0:
   \   00000000   E145               LDI     R20, 21
   \   00000002   E050               LDI     R21, 0
   \   00000004   ........           JMP     ?US_DIVMOD_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<string, allocator<string>>::_Insert_n(string *, unsigned int, string const &)
   \                     ??_Insert_n:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   9765               SBIW    R29:R28, 21
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   0129               MOVW    R5:R4, R19:R18
   \   0000000A   01CA               MOVW    R25:R24, R21:R20
   \   0000000C   019B               MOVW    R19:R18, R23:R22
   \   0000000E   018E               MOVW    R17:R16, R29:R28
   \   00000010   ........           CALL    ??string
   \   00000014   01BE               MOVW    R23:R22, R29:R28
   \   00000016   01AC               MOVW    R21:R20, R25:R24
   \   00000018   0192               MOVW    R19:R18, R5:R4
   \   0000001A   018D               MOVW    R17:R16, R27:R26
   \   0000001C   ........           CALL    ??_Insert_n0
   \   00000020   E040               LDI     R20, 0
   \   00000022   E050               LDI     R21, 0
   \   00000024   E021               LDI     R18, 1
   \   00000026   018E               MOVW    R17:R16, R29:R28
   \   00000028   ........           CALL    ??_Tidy
   \   0000002C   9665               ADIW    R29:R28, 21
   \   0000002E   E0E6               LDI     R30, 6
   \   00000030   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string * _Vector_impl<string, allocator<string>>::_Erase(string *)
   \                     ??_Erase:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   01A9               MOVW    R21:R20, R19:R18
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   8122               LDD     R18, Z+2
   \   0000000E   8133               LDD     R19, Z+3
   \   00000010   018C               MOVW    R17:R16, R25:R24
   \   00000012   5E0B               SUBI    R16, 235
   \   00000014   4F1F               SBCI    R17, 255
   \   00000016   ........           CALL    ??_Copy_opt0
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8122               LDD     R18, Z+2
   \   0000001E   8133               LDD     R19, Z+3
   \   00000020   01A9               MOVW    R21:R20, R19:R18
   \   00000022   5125               SUBI    R18, 21
   \   00000024   4030               SBCI    R19, 0
   \   00000026   018D               MOVW    R17:R16, R27:R26
   \   00000028   ........           CALL    ??_Destroy
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5105               SUBI    R16, 21
   \   00000034   4010               SBCI    R17, 0
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
   \   0000003A   018C               MOVW    R17:R16, R25:R24
   \   0000003C   E0E4               LDI     R30, 4
   \   0000003E   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string * _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
   \                     ??_Make_room:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0169               MOVW    R13:R12, R19:R18
   \   00000008   015A               MOVW    R11:R10, R21:R20
   \   0000000A   908D               LD      R8, X+
   \   0000000C   909C               LD      R9, X
   \   0000000E   9711               SBIW    R27:R26, 1
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8104               LDD     R16, Z+4
   \   00000014   8115               LDD     R17, Z+5
   \   00000016   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_34:
   \   00000018   01C8               MOVW    R25:R24, R17:R16
   \   0000001A   2FEA               MOV     R30, R26
   \   0000001C   8062               LDD     R6, Z+2
   \   0000001E   8073               LDD     R7, Z+3
   \   00000020   0123               MOVW    R5:R4, R7:R6
   \   00000022   0183               MOVW    R17:R16, R7:R6
   \   00000024   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_35:
   \   00000026   0178               MOVW    R15:R14, R17:R16
   \   00000028   2D0A               MOV     R16, R10
   \   0000002A   290B               OR      R16, R11
   \   0000002C   F409               BRNE    $+2+2
   \   0000002E   C07D               RJMP    ??CrossCallReturnLabel_38
   \   00000030   E300               LDI     R16, 48
   \   00000032   E01C               LDI     R17, 12
   \   00000034   190E               SUB     R16, R14
   \   00000036   091F               SBC     R17, R15
   \   00000038   150A               CP      R16, R10
   \   0000003A   051B               CPC     R17, R11
   \   0000003C   F408               BRCC    $+2+2
   \   0000003E   C075               RJMP    ??CrossCallReturnLabel_38
   \   00000040   E105               LDI     R16, 21
   \   00000042   E010               LDI     R17, 0
   \   00000044   01A5               MOVW    R21:R20, R11:R10
   \   00000046   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_40:
   \   00000048   0148               MOVW    R9:R8, R17:R16
   \   0000004A   0CEA               ADD     R14, R10
   \   0000004C   1CFB               ADC     R15, R11
   \   0000004E   158E               CP      R24, R14
   \   00000050   059F               CPC     R25, R15
   \   00000052   F5D0               BRCC    ??_Make_room_2
   \   00000054   019C               MOVW    R19:R18, R25:R24
   \   00000056   9536               LSR     R19
   \   00000058   9527               ROR     R18
   \   0000005A   E300               LDI     R16, 48
   \   0000005C   E01C               LDI     R17, 12
   \   0000005E   1B02               SUB     R16, R18
   \   00000060   0B13               SBC     R17, R19
   \   00000062   1708               CP      R16, R24
   \   00000064   0719               CPC     R17, R25
   \   00000066   F418               BRCC    ??_Make_room_3
   \   00000068   E080               LDI     R24, 0
   \   0000006A   E090               LDI     R25, 0
   \   0000006C   C002               RJMP    ??_Make_room_4
   \                     ??_Make_room_3:
   \   0000006E   0F82               ADD     R24, R18
   \   00000070   1F93               ADC     R25, R19
   \                     ??_Make_room_4:
   \   00000072   158E               CP      R24, R14
   \   00000074   059F               CPC     R25, R15
   \   00000076   F408               BRCC    ??_Make_room_5
   \   00000078   01C7               MOVW    R25:R24, R15:R14
   \                     ??_Make_room_5:
   \   0000007A   E105               LDI     R16, 21
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   01AC               MOVW    R21:R20, R25:R24
   \   00000080   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_41:
   \   00000082   ........           CALL    `??operator new`
   \   00000086   0128               MOVW    R5:R4, R17:R16
   \   00000088   01A8               MOVW    R21:R20, R17:R16
   \   0000008A   0196               MOVW    R19:R18, R13:R12
   \   0000008C   910D               LD      R16, X+
   \   0000008E   911C               LD      R17, X
   \   00000090   9711               SBIW    R27:R26, 1
   \   00000092   ....               RCALL   ??Subroutine40_0
   \                     ??CrossCallReturnLabel_82:
   \   00000094   0138               MOVW    R7:R6, R17:R16
   \   00000096   01A8               MOVW    R21:R20, R17:R16
   \   00000098   0D48               ADD     R20, R8
   \   0000009A   1D59               ADC     R21, R9
   \   0000009C   01FD               MOVW    R31:R30, R27:R26
   \   0000009E   8122               LDD     R18, Z+2
   \   000000A0   8133               LDD     R19, Z+3
   \   000000A2   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_81:
   \   000000A4   018D               MOVW    R17:R16, R27:R26
   \   000000A6   ........           CALL    ??_Tidy0
   \   000000AA   E145               LDI     R20, 21
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   018C               MOVW    R17:R16, R25:R24
   \   000000B0   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_36:
   \   000000B2   01FD               MOVW    R31:R30, R27:R26
   \   000000B4   8324               STD     Z+4, R18
   \   000000B6   8335               STD     Z+5, R19
   \   000000B8   0187               MOVW    R17:R16, R15:R14
   \   000000BA   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_37:
   \   000000BC   8322               STD     Z+2, R18
   \   000000BE   8333               STD     Z+3, R19
   \   000000C0   924D               ST      X+, R4
   \   000000C2   925C               ST      X, R5
   \   000000C4   0163               MOVW    R13:R12, R7:R6
   \   000000C6   C031               RJMP    ??CrossCallReturnLabel_38
   \                     ??_Make_room_2:
   \   000000C8   01C9               MOVW    R25:R24, R19:R18
   \   000000CA   0F80               ADD     R24, R16
   \   000000CC   1F91               ADC     R25, R17
   \   000000CE   1A42               SUB     R4, R18
   \   000000D0   0A53               SBC     R5, R19
   \   000000D2   0182               MOVW    R17:R16, R5:R4
   \   000000D4   E145               LDI     R20, 21
   \   000000D6   E050               LDI     R21, 0
   \   000000D8   ........           CALL    ?SS_DIVMOD_L02
   \   000000DC   150A               CP      R16, R10
   \   000000DE   051B               CPC     R17, R11
   \   000000E0   F478               BRCC    ??_Make_room_6
   \   000000E2   01AC               MOVW    R21:R20, R25:R24
   \   000000E4   0193               MOVW    R19:R18, R7:R6
   \   000000E6   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_80:
   \   000000E8   01FD               MOVW    R31:R30, R27:R26
   \   000000EA   8142               LDD     R20, Z+2
   \   000000EC   8153               LDD     R21, Z+3
   \   000000EE   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_39:
   \   000000F0   01FD               MOVW    R31:R30, R27:R26
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   0D08               ADD     R16, R8
   \   000000F8   1D19               ADC     R17, R9
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
   \   000000FE   C015               RJMP    ??CrossCallReturnLabel_38
   \                     ??_Make_room_6:
   \   00000100   EE4B               LDI     R20, 235
   \   00000102   EF5F               LDI     R21, 255
   \   00000104   0185               MOVW    R17:R16, R11:R10
   \   00000106   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_42:
   \   00000108   0123               MOVW    R5:R4, R7:R6
   \   0000010A   0E40               ADD     R4, R16
   \   0000010C   1E51               ADC     R5, R17
   \   0000010E   01A3               MOVW    R21:R20, R7:R6
   \   00000110   0193               MOVW    R19:R18, R7:R6
   \   00000112   0182               MOVW    R17:R16, R5:R4
   \   00000114   ....               RCALL   ??Subroutine40_0
   \                     ??CrossCallReturnLabel_83:
   \   00000116   01FD               MOVW    R31:R30, R27:R26
   \   00000118   8302               STD     Z+2, R16
   \   0000011A   8313               STD     Z+3, R17
   \   0000011C   01A3               MOVW    R21:R20, R7:R6
   \   0000011E   0192               MOVW    R19:R18, R5:R4
   \   00000120   0186               MOVW    R17:R16, R13:R12
   \   00000122   ........           CALL    ??_Copy_backward_opt0
   \   00000126   01AC               MOVW    R21:R20, R25:R24
   \   00000128   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_38:
   \   0000012A   0186               MOVW    R17:R16, R13:R12
   \   0000012C   E1E0               LDI     R30, 16
   \   0000012E   ........           JMP     ?EPILOGUE_B16_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   ........           JMP     ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine40_0:
   \   00000000   ........           JMP     ??_Uninit_copy0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0196               MOVW    R19:R18, R13:R12
   \   00000002   018D               MOVW    R17:R16, R27:R26
   \   00000004   ........           JMP     ??_Destroy

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   ........           CALL    ?S_EC_MUL_L02
   \   00000004   0192               MOVW    R19:R18, R5:R4
   \   00000006   0F20               ADD     R18, R16
   \   00000008   1F31               ADC     R19, R17
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   1908               SUB     R16, R8
   \   00000002   0919               SBC     R17, R9
   \   00000004   E145               LDI     R20, 21
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           JMP     ?US_DIVMOD_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 unsigned short * _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   0138               MOVW    R7:R6, R17:R16
   \   00000006   0179               MOVW    R15:R14, R19:R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   8100               LD      R16, Z
   \   0000000E   8111               LDD     R17, Z+1
   \   00000010   8184               LDD     R24, Z+4
   \   00000012   8195               LDD     R25, Z+5
   \   00000014   1B80               SUB     R24, R16
   \   00000016   0B91               SBC     R25, R17
   \   00000018   9596               LSR     R25
   \   0000001A   9587               ROR     R24
   \   0000001C   8122               LDD     R18, Z+2
   \   0000001E   8133               LDD     R19, Z+3
   \   00000020   0129               MOVW    R5:R4, R19:R18
   \   00000022   1A40               SUB     R4, R16
   \   00000024   0A51               SBC     R5, R17
   \   00000026   9456               LSR     R5
   \   00000028   9447               ROR     R4
   \   0000002A   2F04               MOV     R16, R20
   \   0000002C   2B05               OR      R16, R21
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C068               RJMP    ??_Make_room_7
   \   00000032   EF0F               LDI     R16, 255
   \   00000034   E71F               LDI     R17, 127
   \   00000036   1904               SUB     R16, R4
   \   00000038   0915               SBC     R17, R5
   \   0000003A   1704               CP      R16, R20
   \   0000003C   0715               CPC     R17, R21
   \   0000003E   F408               BRCC    $+2+2
   \   00000040   C060               RJMP    ??_Make_room_7
   \   00000042   014A               MOVW    R9:R8, R21:R20
   \   00000044   0C88               LSL     R8
   \   00000046   1C99               ROL     R9
   \   00000048   01A2               MOVW    R21:R20, R5:R4
   \   0000004A   0F4A               ADD     R20, R26
   \   0000004C   1F5B               ADC     R21, R27
   \   0000004E   1784               CP      R24, R20
   \   00000050   0795               CPC     R25, R21
   \   00000052   F008               BRCS    $+2+2
   \   00000054   C049               RJMP    ??_Make_room_8
   \   00000056   019C               MOVW    R19:R18, R25:R24
   \   00000058   9536               LSR     R19
   \   0000005A   9527               ROR     R18
   \   0000005C   EF0F               LDI     R16, 255
   \   0000005E   E71F               LDI     R17, 127
   \   00000060   1B02               SUB     R16, R18
   \   00000062   0B13               SBC     R17, R19
   \   00000064   1708               CP      R16, R24
   \   00000066   0719               CPC     R17, R25
   \   00000068   F418               BRCC    ??_Make_room_9
   \   0000006A   E080               LDI     R24, 0
   \   0000006C   E090               LDI     R25, 0
   \   0000006E   C002               RJMP    ??_Make_room_10
   \                     ??_Make_room_9:
   \   00000070   0F82               ADD     R24, R18
   \   00000072   1F93               ADC     R25, R19
   \                     ??_Make_room_10:
   \   00000074   1784               CP      R24, R20
   \   00000076   0795               CPC     R25, R21
   \   00000078   F408               BRCC    ??_Make_room_11
   \   0000007A   01CA               MOVW    R25:R24, R21:R20
   \                     ??_Make_room_11:
   \   0000007C   018C               MOVW    R17:R16, R25:R24
   \   0000007E   0F00               LSL     R16
   \   00000080   1F11               ROL     R17
   \   00000082   ........           CALL    `??operator new`
   \   00000086   0158               MOVW    R11:R10, R17:R16
   \   00000088   01A8               MOVW    R21:R20, R17:R16
   \   0000008A   0197               MOVW    R19:R18, R15:R14
   \   0000008C   01F3               MOVW    R31:R30, R7:R6
   \   0000008E   8100               LD      R16, Z
   \   00000090   8111               LDD     R17, Z+1
   \   00000092   ........           CALL    ??_Uninit_copy
   \   00000096   0168               MOVW    R13:R12, R17:R16
   \   00000098   01A8               MOVW    R21:R20, R17:R16
   \   0000009A   0D48               ADD     R20, R8
   \   0000009C   1D59               ADC     R21, R9
   \   0000009E   01F3               MOVW    R31:R30, R7:R6
   \   000000A0   8122               LDD     R18, Z+2
   \   000000A2   8133               LDD     R19, Z+3
   \   000000A4   0187               MOVW    R17:R16, R15:R14
   \   000000A6   ........           CALL    ??_Uninit_copy
   \   000000AA   0DA4               ADD     R26, R4
   \   000000AC   1DB5               ADC     R27, R5
   \   000000AE   01F3               MOVW    R31:R30, R7:R6
   \   000000B0   8100               LD      R16, Z
   \   000000B2   8111               LDD     R17, Z+1
   \   000000B4   2B01               OR      R16, R17
   \   000000B6   F029               BREQ    ??_Make_room_12
   \   000000B8   8100               LD      R16, Z
   \   000000BA   8302               STD     Z+2, R16
   \   000000BC   8313               STD     Z+3, R17
   \   000000BE   ........           CALL    `??operator delete`
   \                     ??_Make_room_12:
   \   000000C2   0F88               LSL     R24
   \   000000C4   1F99               ROL     R25
   \   000000C6   0185               MOVW    R17:R16, R11:R10
   \   000000C8   0F08               ADD     R16, R24
   \   000000CA   1F19               ADC     R17, R25
   \   000000CC   01F3               MOVW    R31:R30, R7:R6
   \   000000CE   8304               STD     Z+4, R16
   \   000000D0   8315               STD     Z+5, R17
   \   000000D2   0FAA               LSL     R26
   \   000000D4   1FBB               ROL     R27
   \   000000D6   0185               MOVW    R17:R16, R11:R10
   \   000000D8   0F0A               ADD     R16, R26
   \   000000DA   1F1B               ADC     R17, R27
   \   000000DC   8302               STD     Z+2, R16
   \   000000DE   8313               STD     Z+3, R17
   \   000000E0   82A0               ST      Z, R10
   \   000000E2   82B1               STD     Z+1, R11
   \   000000E4   0176               MOVW    R15:R14, R13:R12
   \   000000E6   C00D               RJMP    ??_Make_room_7
   \                     ??_Make_room_8:
   \   000000E8   01A9               MOVW    R21:R20, R19:R18
   \   000000EA   0D48               ADD     R20, R8
   \   000000EC   1D59               ADC     R21, R9
   \   000000EE   0187               MOVW    R17:R16, R15:R14
   \   000000F0   ........           CALL    ??_Copy
   \   000000F4   01F3               MOVW    R31:R30, R7:R6
   \   000000F6   8102               LDD     R16, Z+2
   \   000000F8   8113               LDD     R17, Z+3
   \   000000FA   0D08               ADD     R16, R8
   \   000000FC   1D19               ADC     R17, R9
   \   000000FE   8302               STD     Z+2, R16
   \   00000100   8313               STD     Z+3, R17
   \                     ??_Make_room_7:
   \   00000102   0187               MOVW    R17:R16, R15:R14
   \   00000104   E1E0               LDI     R30, 16
   \   00000106   ........           JMP     ?EPILOGUE_B16_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 string * _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
   \                     ??_Insert0:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   2B01               OR      R16, R17
   \   0000000E   F419               BRNE    ??_Insert0_2
   \   00000010   E080               LDI     R24, 0
   \   00000012   E090               LDI     R25, 0
   \   00000014   C006               RJMP    ??_Insert0_3
   \                     ??_Insert0_2:
   \   00000016   910D               LD      R16, X+
   \   00000018   911C               LD      R17, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   01C9               MOVW    R25:R24, R19:R18
   \   0000001E   1B80               SUB     R24, R16
   \   00000020   0B91               SBC     R25, R17
   \                     ??_Insert0_3:
   \   00000022   01BA               MOVW    R23:R22, R21:R20
   \   00000024   E041               LDI     R20, 1
   \   00000026   E050               LDI     R21, 0
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   ........           CALL    ??_Insert_n
   \   0000002E   910D               LD      R16, X+
   \   00000030   911C               LD      R17, X
   \   00000032   0F08               ADD     R16, R24
   \   00000034   1F19               ADC     R17, R25
   \   00000036   E0E4               LDI     R30, 4
   \   00000038   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 unsigned short * _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
   \                     ??_Insert0_1:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   910D               LD      R16, X+
   \   00000008   911C               LD      R17, X
   \   0000000A   9711               SBIW    R27:R26, 1
   \   0000000C   2B01               OR      R16, R17
   \   0000000E   F419               BRNE    ??_Insert0_4
   \   00000010   E080               LDI     R24, 0
   \   00000012   E090               LDI     R25, 0
   \   00000014   C006               RJMP    ??_Insert0_5
   \                     ??_Insert0_4:
   \   00000016   910D               LD      R16, X+
   \   00000018   911C               LD      R17, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   01C9               MOVW    R25:R24, R19:R18
   \   0000001E   1B80               SUB     R24, R16
   \   00000020   0B91               SBC     R25, R17
   \                     ??_Insert0_5:
   \   00000022   01BA               MOVW    R23:R22, R21:R20
   \   00000024   E041               LDI     R20, 1
   \   00000026   E050               LDI     R21, 0
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   ........           CALL    ??_Insert_n0_1
   \   0000002E   910D               LD      R16, X+
   \   00000030   911C               LD      R17, X
   \   00000032   0F08               ADD     R16, R24
   \   00000034   1F19               ADC     R17, R25
   \   00000036   E0E4               LDI     R30, 4
   \   00000038   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
   \                     ??_Insert_n0:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9721               SBIW    R29:R28, 1
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
   \   0000000A   ........           CALL    ??_Make_room
   \   0000000E   01BE               MOVW    R23:R22, R29:R28
   \   00000010   01AD               MOVW    R21:R20, R27:R26
   \   00000012   019C               MOVW    R19:R18, R25:R24
   \   00000014   ........           CALL    ??_Uninitialized_fill_n
   \   00000018   9621               ADIW    R29:R28, 1
   \   0000001A   E0E4               LDI     R30, 4
   \   0000001C   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
   \                     ??_Insert_n0_1:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
   \   0000000A   ........           CALL    ??_Make_room_1
   \   0000000E   01BD               MOVW    R23:R22, R27:R26
   \   00000010   01AC               MOVW    R21:R20, R25:R24
   \   00000012   0198               MOVW    R19:R18, R17:R16
   \   00000014   0182               MOVW    R17:R16, R5:R4
   \   00000016   ........           CALL    ??_Ufill
   \   0000001A   E0E6               LDI     R30, 6
   \   0000001C   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
   \                     ??_Push_back0:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9721               SBIW    R29:R28, 1
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8102               LDD     R16, Z+2
   \   0000000C   8113               LDD     R17, Z+3
   \   0000000E   8144               LDD     R20, Z+4
   \   00000010   8155               LDD     R21, Z+5
   \   00000012   1704               CP      R16, R20
   \   00000014   0715               CPC     R17, R21
   \   00000016   F460               BRCC    ??_Push_back0_2
   \   00000018   01C8               MOVW    R25:R24, R17:R16
   \   0000001A   01BE               MOVW    R23:R22, R29:R28
   \   0000001C   01A9               MOVW    R21:R20, R19:R18
   \   0000001E   E021               LDI     R18, 1
   \   00000020   E030               LDI     R19, 0
   \   00000022   ........           CALL    ??_Uninitialized_fill_n
   \   00000026   9645               ADIW    R25:R24, 21
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8382               STD     Z+2, R24
   \   0000002C   8393               STD     Z+3, R25
   \   0000002E   C005               RJMP    ??_Push_back0_3
   \                     ??_Push_back0_2:
   \   00000030   01A9               MOVW    R21:R20, R19:R18
   \   00000032   0198               MOVW    R19:R18, R17:R16
   \   00000034   018D               MOVW    R17:R16, R27:R26
   \   00000036   ........           CALL    ??_Insert0
   \                     ??_Push_back0_3:
   \   0000003A   9621               ADIW    R29:R28, 1
   \   0000003C   E0E4               LDI     R30, 4
   \   0000003E   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
   \                     ??_Push_back0_1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
   \   00000008   9612               ADIW    R27:R26, 2
   \   0000000A   912D               LD      R18, X+
   \   0000000C   913D               LD      R19, X+
   \   0000000E   910D               LD      R16, X+
   \   00000010   911C               LD      R17, X
   \   00000012   9715               SBIW    R27:R26, 5
   \   00000014   1720               CP      R18, R16
   \   00000016   0731               CPC     R19, R17
   \   00000018   F448               BRCC    ??_Push_back0_4
   \   0000001A   E041               LDI     R20, 1
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   018D               MOVW    R17:R16, R27:R26
   \   00000020   ........           CALL    ??_Ufill
   \   00000024   9612               ADIW    R27:R26, 2
   \   00000026   930D               ST      X+, R16
   \   00000028   931C               ST      X, R17
   \   0000002A   C004               RJMP    ??_Push_back0_5
   \                     ??_Push_back0_4:
   \   0000002C   01AB               MOVW    R21:R20, R23:R22
   \   0000002E   018D               MOVW    R17:R16, R27:R26
   \   00000030   ........           CALL    ??_Insert0_1
   \                     ??_Push_back0_5:
   \   00000034   91A9               LD      R26, Y+
   \   00000036   91B9               LD      R27, Y+
   \   00000038   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void * _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
   \                     ??_Ufill:
   \   00000000   010C               MOVW    R1:R0, R25:R24
   \   00000002   01CA               MOVW    R25:R24, R21:R20
   \   00000004   01F9               MOVW    R31:R30, R19:R18
   \   00000006   C003               RJMP    ??_Ufill_1
   \                     ??_Ufill_2:
   \   00000008   9361               ST      Z+, R22
   \   0000000A   9371               ST      Z+, R23
   \   0000000C   9701               SBIW    R25:R24, 1
   \                     ??_Ufill_1:
   \   0000000E   2F08               MOV     R16, R24
   \   00000010   2B09               OR      R16, R25
   \   00000012   F7D1               BRNE    ??_Ufill_2
   \   00000014   0F44               LSL     R20
   \   00000016   1F55               ROL     R21
   \   00000018   0F24               ADD     R18, R20
   \   0000001A   1F35               ADC     R19, R21
   \   0000001C   0189               MOVW    R17:R16, R19:R18
   \   0000001E   01C0               MOVW    R25:R24, R1:R0
   \   00000020   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void operator+(char const *, string const &)
   \                     `??operator+`:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9765               SBIW    R29:R28, 21
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   01DA               MOVW    R27:R26, R21:R20
   \   0000000A   018E               MOVW    R17:R16, R29:R28
   \   0000000C   ........           CALL    ??string_1
   \   00000010   ....               LDI     R30, LOW(??npos)
   \   00000012   ....               LDI     R31, (??npos) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   E040               LDI     R20, 0
   \   0000001A   E050               LDI     R21, 0
   \   0000001C   019D               MOVW    R19:R18, R27:R26
   \   0000001E   ........           CALL    ??append
   \   00000022   0198               MOVW    R19:R18, R17:R16
   \   00000024   018C               MOVW    R17:R16, R25:R24
   \   00000026   ........           CALL    ??string
   \   0000002A   E040               LDI     R20, 0
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   E021               LDI     R18, 1
   \   00000030   018E               MOVW    R17:R16, R29:R28
   \   00000032   ........           CALL    ??_Tidy
   \   00000036   9665               ADIW    R29:R28, 21
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   9765               SBIW    R29:R28, 21
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   01DA               MOVW    R27:R26, R21:R20
   \   0000000A   018E               MOVW    R17:R16, R29:R28
   \   0000000C   ........           CALL    ??string
   \   00000010   0128               MOVW    R5:R4, R17:R16
   \   00000012   018D               MOVW    R17:R16, R27:R26
   \   00000014   ........           CALL    strlen
   \   00000018   01A8               MOVW    R21:R20, R17:R16
   \   0000001A   019D               MOVW    R19:R18, R27:R26
   \   0000001C   0182               MOVW    R17:R16, R5:R4
   \   0000001E   ........           CALL    ??append_1
   \   00000022   0198               MOVW    R19:R18, R17:R16
   \   00000024   018C               MOVW    R17:R16, R25:R24
   \   00000026   ........           CALL    ??string
   \   0000002A   E040               LDI     R20, 0
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   E021               LDI     R18, 1
   \   00000030   018E               MOVW    R17:R16, R29:R28
   \   00000032   ........           CALL    ??_Tidy
   \   00000036   9665               ADIW    R29:R28, 21
   \   00000038   E0E6               LDI     R30, 6
   \   0000003A   ........           JMP     ?EPILOGUE_B6_L09

    virtual const std::string & GetDescription(void){};
                                                     ^
"D:\Work\IAR\TIEF_Framework\TIEL_FrameWork\Service\terminal_service.h",66  Warning[Pe940]: 
          missing return statement at end of non-void function
          "ITerminalCommand::GetDescription"
      3          #include "split.h"
      4          #include "build_count.h"
      5          #include <assert.h>
      6          
      7          

   \                                 In  segment NEAR_F, align 1, keep-with-next
      8          CONST  char  errormsg[]="\nCommand not found.please enter \"help\" command.\n";
   \                     errormsg:
   \   00000000   430A6D6F616D       DC8 "\012Command not found.please enter \"help\" command.\012"
   \              646E6E20746F
   \              6620756F646E
   \              702E656C7361
   \              20656E656574
   \              207268226C65
   \              227063206D6F
   \              616D646E0A2E
   \              00          
      9          

   \                                 In  segment CODE, align 2, keep-with-next
     10          TerminalService::TerminalService(unsigned char _defaultParamMax)
   \                     ??TerminalService:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     11          :defaultParams(_defaultParamMax)
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8320               ST      Z, R18
     12          {
   \   0000000A   5F0F               SUBI    R16, 255
   \   0000000C   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_51:
   \   0000000E   018C               MOVW    R17:R16, R25:R24
   \   00000010   ....               RCALL   ??Subroutine36_0
   \                     ??CrossCallReturnLabel_52:
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   8320               ST      Z, R18
   \   00000016   E040               LDI     R20, 0
   \   00000018   E050               LDI     R21, 0
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   ........           CALL    ??_Tidy
   \   00000020   018C               MOVW    R17:R16, R25:R24
   \   00000022   5E04               SUBI    R16, 228
   \   00000024   ....               RCALL   ?Subroutine4
     13          
     14          }
   \                     ??CrossCallReturnLabel_50:
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   9189               LD      R24, Y+
   \   0000002A   9199               LD      R25, Y+
   \   0000002C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine36_0:
   \   00000000   5F09               SUBI    R16, 249
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     15          void TerminalService::Init(void)
   \                     ??Init:
     16          {
     17          //  const std::string lic(clic);
     18          //  Output("\n");
     19          //  Output((const char *)clic);
     20            
     21          //  Output("\n\n");
     22          //  Output(">> "); 
     23          }
   \   00000000   9508               RET
     24          

   \                                 In  segment CODE, align 2, keep-with-next
     25          void TerminalService::Input(char _ch)
   \                     ??Input:
     26          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   97EF               SBIW    R29:R28, 63
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   2F82               MOV     R24, R18
     27            InputHook(_ch);
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   A142               LDD     R20, Z+34
   \   0000000E   A1F3               LDD     R31, Z+35
   \   00000010   2FE4               MOV     R30, R20
   \   00000012   9636               ADIW    R31:R30, 6
   \   00000014   ....               RCALL   ??Subroutine37_0
     28            /*
     29               char str[15];
     30                sprintf(str,"%x",_ch);
     31                Output(str);
     32                return;
     33            */
     34            
     35            static char ctrl =0;
     36            static unsigned char listpointer=0;
     37              if(0x1b == _ch)// control char
   \                     ??CrossCallReturnLabel_58:
   \   00000016   318B               CPI     R24, 27
   \   00000018   F421               BRNE    ??Input_2
     38              {
     39                ctrl = 1;
   \   0000001A   E001               LDI     R16, 1
   \                     ??Input_3:
   \   0000001C   9300....           STS     ??ctrl, R16
     40                return;
   \   00000020   C0CA               RJMP    ??CrossCallReturnLabel_60
     41              }
     42              
     43              if(0x5b == _ch)
   \                     ??Input_2:
   \   00000022   358B               CPI     R24, 91
   \   00000024   F431               BRNE    ??Input_4
     44              {
     45                ctrl++;
   \   00000026   ....               LDI     R30, LOW(??ctrl)
   \   00000028   ....               LDI     R31, (??ctrl) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   9503               INC     R16
   \   0000002E   8300               ST      Z, R16
     46                return;
   \   00000030   C0C2               RJMP    ??CrossCallReturnLabel_60
     47              }    
     48               if( 2 == ctrl)
   \                     ??Input_4:
   \   00000032   9100....           LDS     R16, ??ctrl
   \   00000036   3002               CPI     R16, 2
   \   00000038   F009               BREQ    $+2+2
   \   0000003A   C04F               RJMP    ??Input_5
     49              {
     50                if(0x41 == _ch )//key up
   \   0000003C   3481               CPI     R24, 65
   \   0000003E   F009               BREQ    $+2+2
   \   00000040   C04A               RJMP    ??CrossCallReturnLabel_74
     51                {
     52                  if(!cmdlist.empty()){
   \   00000042   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_23:
   \   00000044   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_43:
   \   00000046   F409               BRNE    $+2+2
   \   00000048   C046               RJMP    ??CrossCallReturnLabel_74
     53                     listpointer++;
   \   0000004A   ....               LDI     R30, LOW(??ctrl)
   \   0000004C   ....               LDI     R31, (??ctrl) >> 8
   \   0000004E   8101               LDD     R16, Z+1
   \   00000050   9503               INC     R16
   \   00000052   8301               STD     Z+1, R16
     54                     if(cmdlist.size() < listpointer)
   \   00000054   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_7:
   \   00000056   9120....           LDS     R18, (??ctrl + 1)
   \   0000005A   1702               CP      R16, R18
   \   0000005C   4010               SBCI    R17, 0
   \   0000005E   F418               BRCC    ??Input_6
     55                     {
     56                       listpointer = 1;
   \   00000060   E001               LDI     R16, 1
   \   00000062   9300....           STS     (??ctrl + 1), R16
     57                     }
     58                     Output("\r            ");
   \                     ??Input_6:
   \   00000066   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_8:
   \   00000068   ....               LDI     R18, LOW(`?<Constant "\\r            ">`)
   \   0000006A   ....               LDI     R19, (`?<Constant "\\r            ">`) >> 8
   \   0000006C   ....               RCALL   ?Subroutine0
     59                     Output("\r>> ");
   \                     ??CrossCallReturnLabel_70:
   \   0000006E   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_9:
   \   00000070   ....               LDI     R18, LOW((`?<Constant "\\r            ">` + 14))
   \   00000072   ....               LDI     R19, HIGH((`?<Constant "\\r            ">` + 14))
   \   00000074   018E               MOVW    R17:R16, R29:R28
   \   00000076   5E0B               SUBI    R16, 235
   \   00000078   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_4:
   \   0000007A   ....               RCALL   ?Subroutine1
     60                     currCmd = cmdlist[cmdlist.size() - listpointer ];
   \                     ??CrossCallReturnLabel_72:
   \   0000007C   019D               MOVW    R19:R18, R27:R26
   \   0000007E   5F2F               SUBI    R18, 255
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_19:
   \   00000084   E050               LDI     R21, 0
   \   00000086   01FD               MOVW    R31:R30, R27:R26
   \   00000088   8181               LDD     R24, Z+1
   \   0000008A   8192               LDD     R25, Z+2
   \   0000008C   01F9               MOVW    R31:R30, R19:R18
   \   0000008E   8102               LDD     R16, Z+2
   \   00000090   8113               LDD     R17, Z+3
   \   00000092   8120               LD      R18, Z
   \   00000094   8131               LDD     R19, Z+1
   \   00000096   1B02               SUB     R16, R18
   \   00000098   0B13               SBC     R17, R19
   \   0000009A   E145               LDI     R20, 21
   \   0000009C   ........           CALL    ?US_DIVMOD_L02
   \   000000A0   9120....           LDS     R18, (??ctrl + 1)
   \   000000A4   1B02               SUB     R16, R18
   \   000000A6   4010               SBCI    R17, 0
   \   000000A8   E145               LDI     R20, 21
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   019C               MOVW    R19:R18, R25:R24
   \   000000B2   0F20               ADD     R18, R16
   \   000000B4   1F31               ADC     R19, R17
   \   000000B6   E040               LDI     R20, 0
   \   000000B8   ....               RCALL   ?Subroutine5
     61                     Output(currCmd);
   \                     ??CrossCallReturnLabel_3:
   \   000000BA   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_10:
   \   000000BC   019D               MOVW    R19:R18, R27:R26
   \   000000BE   5F29               SUBI    R18, 249
   \   000000C0   4F3F               SBCI    R19, 255
   \   000000C2   018E               MOVW    R17:R16, R29:R28
   \   000000C4   5D06               SUBI    R16, 214
   \   000000C6   4F1F               SBCI    R17, 255
   \   000000C8   ........           CALL    ??string
   \   000000CC   0198               MOVW    R19:R18, R17:R16
   \   000000CE   018D               MOVW    R17:R16, R27:R26
   \   000000D0   01FC               MOVW    R31:R30, R25:R24
   \   000000D2   ....               RCALL   ??Subroutine37_0
   \                     ??CrossCallReturnLabel_59:
   \   000000D4   ....               RCALL   ?Subroutine2
     62                     
     63          
     64                  }
     65                }
     66                
     67          
     68          
     69                ctrl = 0;
   \                     ??CrossCallReturnLabel_74:
   \   000000D6   E000               LDI     R16, 0
   \   000000D8   CFA1               RJMP    ??Input_3
     70                return;
     71              } 
     72          
     73                if( 0x08 == _ch )//backspace
   \                     ??Input_5:
   \   000000DA   3088               CPI     R24, 8
   \   000000DC   F599               BRNE    ??Input_7
     74                {
     75          	if(!currCmd.empty())
   \   000000DE   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_45:
   \   000000E0   F409               BRNE    $+2+2
   \   000000E2   C057               RJMP    ??Input_8
     76                  {
     77          	  currCmd= std::string(currCmd.begin(),currCmd.end()-1);
   \   000000E4   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_1:
   \   000000E6   01C8               MOVW    R25:R24, R17:R16
   \   000000E8   01F2               MOVW    R31:R30, R5:R4
   \   000000EA   8901               LDD     R16, Z+17
   \   000000EC   8912               LDD     R17, Z+18
   \   000000EE   0F80               ADD     R24, R16
   \   000000F0   1F91               ADC     R25, R17
   \   000000F2   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_53:
   \   000000F4   ........           CALL    ??_Myptr
   \   000000F8   9701               SBIW    R25:R24, 1
   \   000000FA   01AC               MOVW    R21:R20, R25:R24
   \   000000FC   0198               MOVW    R19:R18, R17:R16
   \   000000FE   018E               MOVW    R17:R16, R29:R28
   \   00000100   5D06               SUBI    R16, 214
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   ........           CALL    ??string_2
   \   00000108   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_20:
   \   0000010A   E040               LDI     R20, 0
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   0198               MOVW    R19:R18, R17:R16
   \   00000110   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_2:
   \   00000112   ....               RCALL   ?Subroutine2
     78                    Output("\r>> "+currCmd+" ");
   \                     ??CrossCallReturnLabel_75:
   \   00000114   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_11:
   \   00000116   01AD               MOVW    R21:R20, R27:R26
   \   00000118   5F49               SUBI    R20, 249
   \   0000011A   4F5F               SBCI    R21, 255
   \   0000011C   ....               LDI     R18, LOW((`?<Constant "\\r            ">` + 14))
   \   0000011E   ....               LDI     R19, HIGH((`?<Constant "\\r            ">` + 14))
   \   00000120   018E               MOVW    R17:R16, R29:R28
   \   00000122   ........           CALL    `??operator+`
   \   00000126   ....               LDI     R20, LOW((`?<Constant "\\r            ">` + 19))
   \   00000128   ....               LDI     R21, HIGH((`?<Constant "\\r            ">` + 19))
   \   0000012A   019E               MOVW    R19:R18, R29:R28
   \   0000012C   018E               MOVW    R17:R16, R29:R28
   \   0000012E   5E0B               SUBI    R16, 235
   \   00000130   4F1F               SBCI    R17, 255
   \   00000132   ........           CALL    `??operator+_1`
   \   00000136   019E               MOVW    R19:R18, R29:R28
   \   00000138   5E2B               SUBI    R18, 235
   \   0000013A   4F3F               SBCI    R19, 255
   \   0000013C   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_73:
   \   0000013E   ....               RCALL   ??Subroutine38_0
     79                    Output(_ch);        
   \                     ??CrossCallReturnLabel_68:
   \   00000140   E028               LDI     R18, 8
   \   00000142   C036               RJMP    ??Input_9
     80                    return;
     81                  }
     82                }    
     83          
     84                if('\n' == _ch  || '\r' == _ch  || STRING_SIZE <= currCmd.size()){
   \                     ??Input_7:
   \   00000144   308A               CPI     R24, 10
   \   00000146   F041               BREQ    ??Input_10
   \   00000148   308D               CPI     R24, 13
   \   0000014A   F031               BREQ    ??Input_10
   \   0000014C   01FD               MOVW    R31:R30, R27:R26
   \   0000014E   8D00               LDD     R16, Z+24
   \   00000150   8D11               LDD     R17, Z+25
   \   00000152   300C               CPI     R16, 12
   \   00000154   4010               SBCI    R17, 0
   \   00000156   F0E8               BRCS    ??Input_8
     85                  if(!currCmd.empty()){
   \                     ??Input_10:
   \   00000158   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_46:
   \   0000015A   F0B1               BREQ    ??Input_11
     86                    cmdlist.push_back(currCmd);
   \   0000015C   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_17:
   \   0000015E   5F0F               SUBI    R16, 255
   \   00000160   4F1F               SBCI    R17, 255
   \   00000162   ........           CALL    ??_Push_back0
     87                    if(cmdlist.size() > 3)
   \   00000166   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_6:
   \   00000168   3004               CPI     R16, 4
   \   0000016A   4010               SBCI    R17, 0
   \   0000016C   F028               BRCS    ??Input_12
     88                    {
     89                       cmdlist.erase(cmdlist.begin());
   \   0000016E   018D               MOVW    R17:R16, R27:R26
   \   00000170   5F0F               SUBI    R16, 255
   \   00000172   4F1F               SBCI    R17, 255
   \   00000174   ........           CALL    ??_Erase
     90                    }
     91                    Input(currCmd);
   \                     ??Input_12:
   \   00000178   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_18:
   \   0000017A   ....               RCALL   ??Input_1
     92                    currCmd.clear();
   \   0000017C   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_54:
   \   0000017E   ........           CALL    ??clear
     93                    listpointer=1;
   \   00000182   E001               LDI     R16, 1
   \   00000184   9300....           STS     (??ctrl + 1), R16
     94                  }
     95                  
     96                Output("\n>> ");
   \                     ??Input_11:
   \   00000188   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_12:
   \   0000018A   ....               LDI     R18, LOW((`?<Constant "\\r            ">` + 21))
   \   0000018C   ....               LDI     R19, HIGH((`?<Constant "\\r            ">` + 21))
   \   0000018E   ....               RCALL   ?Subroutine0
     97                return;
   \                     ??CrossCallReturnLabel_69:
   \   00000190   C012               RJMP    ??CrossCallReturnLabel_60
     98              }     
     99             
    100          
    101              if(isprint(_ch) )
   \                     ??Input_8:
   \   00000192   2F08               MOV     R16, R24
   \   00000194   5200               SUBI    R16, 32
   \   00000196   350E               CPI     R16, 94
   \   00000198   F470               BRCC    ??CrossCallReturnLabel_60
    102              {
    103                currCmd.push_back(_ch);
   \   0000019A   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_0:
   \   0000019C   2F48               MOV     R20, R24
   \   0000019E   01F2               MOVW    R31:R30, R5:R4
   \   000001A0   8921               LDD     R18, Z+17
   \   000001A2   8932               LDD     R19, Z+18
   \   000001A4   0F20               ADD     R18, R16
   \   000001A6   1F31               ADC     R19, R17
   \   000001A8   0182               MOVW    R17:R16, R5:R4
   \   000001AA   ........           CALL    ??insert
    104                Output(_ch);
   \   000001AE   2F28               MOV     R18, R24
    105              }
   \                     ??Input_9:
   \   000001B0   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_15:
   \   000001B2   9632               ADIW    R31:R30, 2
   \   000001B4   ....               RCALL   ??Subroutine37_0
   \                     ??CrossCallReturnLabel_60:
   \   000001B6   96EF               ADIW    R29:R28, 63
   \   000001B8   E0E6               LDI     R30, 6
   \   000001BA   ........           JMP     ?EPILOGUE_B6_L09
    106          
    107               
    108            
    109                
    110            
    111          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   018D               MOVW    R17:R16, R27:R26
   \   00000002                      REQUIRE ??Subroutine36_0
   \   00000002                      ;               // Fall through to label ??Subroutine36_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002   5F29               SUBI    R18, 249
   \   00000004   4F3F               SBCI    R19, 255
   \   00000006   018D               MOVW    R17:R16, R27:R26
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8D00               LDD     R16, Z+24
   \   00000004   8D11               LDD     R17, Z+25
   \   00000006                      REQUIRE ?Subroutine33
   \   00000006                      ;               // Fall through to label ?Subroutine33

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   2B01               OR      R16, R17
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   A182               LDD     R24, Z+34
   \   00000004   A193               LDD     R25, Z+35
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_22:
   \   00000002   ....               RJMP    ?Subroutine19

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8103               LDD     R16, Z+3
   \   00000004   8114               LDD     R17, Z+4
   \   00000006   8121               LDD     R18, Z+1
   \   00000008   8132               LDD     R19, Z+2
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   1B02               SUB     R16, R18
   \   00000002   0B13               SBC     R17, R19
   \   00000004   E145               LDI     R20, 21
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           JMP     ?US_DIVMOD_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   012D               MOVW    R5:R4, R27:R26
   \   00000002   E007               LDI     R16, 7
   \   00000004   0E40               ADD     R4, R16
   \   00000006   E000               LDI     R16, 0
   \   00000008   1E50               ADC     R5, R16
   \   0000000A   0182               MOVW    R17:R16, R5:R4
   \   0000000C   ........           JMP     ??_Myptr

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_63:
   \   00000002   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_65:
   \   00000004   5E0B               SUBI    R16, 235
   \   00000006   ....               RJMP    ?Subroutine17

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   018D               MOVW    R17:R16, R27:R26
   \   00000002   01FC               MOVW    R31:R30, R25:R24
   \   00000004                      REQUIRE ??Subroutine37_0
   \   00000004                      ;               // Fall through to label ??Subroutine37_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine37_0:
   \   00000000   9145               LPM     R20, Z+
   \   00000002   91F4               LPM     R31, Z
   \   00000004   2FE4               MOV     R30, R20
   \   00000006   9409               IJMP

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002                      REQUIRE ?Subroutine34
   \   00000002                      ;               // Fall through to label ?Subroutine34

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ........           JMP     ??_Tidy

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   018E               MOVW    R17:R16, R29:R28
   \   00000002   ........           CALL    ??string_1
   \   00000006   0198               MOVW    R19:R18, R17:R16
   \   00000008   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_62:
   \   0000000A                      REQUIRE ??Subroutine38_0
   \   0000000A                      ;               // Fall through to label ??Subroutine38_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine38_0:
   \   00000000   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_67:
   \   00000002   ....               RJMP    ?Subroutine34

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E021               LDI     R18, 1
   \   00000006   018E               MOVW    R17:R16, R29:R28
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   018D               MOVW    R17:R16, R27:R26
   \   00000002   9692               ADIW    R27:R26, 34
   \   00000004   91ED               LD      R30, X+
   \   00000006   91FC               LD      R31, X
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_21:
   \   00000002   ....               RJMP    ?Subroutine33

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002   ........           CALL    ??string_1
   \   00000006   0198               MOVW    R19:R18, R17:R16
   \   00000008   9508               RET

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??ctrl:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
    112          

   \                                 In  segment CODE, align 2, keep-with-next
    113          char TerminalService::isprint(char _ch)
   \                     ??isprint:
    114          {
    115            if(' ' <= _ch &&  '}' >= _ch)
   \   00000000   5220               SUBI    R18, 32
   \   00000002   352E               CPI     R18, 94
   \   00000004   F410               BRCC    ??isprint_1
    116            {
    117              return 1;
   \   00000006   E001               LDI     R16, 1
   \   00000008   9508               RET
    118            }
    119            
    120            return 0;
   \                     ??isprint_1:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9508               RET
    121          }
    122          

   \                                 In  segment CODE, align 2, keep-with-next
    123          void TerminalService::Input(const std::string & _string)
   \                     ??Input_1:
    124          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   97A1               SBIW    R29:R28, 33
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   01C9               MOVW    R25:R24, R19:R18
    125            std::vector<std::string> str_split;
   \   0000000A   018E               MOVW    R17:R16, R29:R28
   \   0000000C   ....               RCALL   ??Subroutine35_0
    126            
    127            unsigned char i;
    128            
    129            str_split = split(_string);
   \                     ??CrossCallReturnLabel_48:
   \   0000000E   019C               MOVW    R19:R18, R25:R24
   \   00000010   018E               MOVW    R17:R16, R29:R28
   \   00000012   5F0A               SUBI    R16, 250
   \   00000014   4F1F               SBCI    R17, 255
   \   00000016   ........           CALL    ??split
   \   0000001A   019E               MOVW    R19:R18, R29:R28
   \   0000001C   5F2A               SUBI    R18, 250
   \   0000001E   4F3F               SBCI    R19, 255
   \   00000020   018E               MOVW    R17:R16, R29:R28
   \   00000022   ........           CALL    ??_Assign
   \   00000026   018E               MOVW    R17:R16, R29:R28
   \   00000028   5F0A               SUBI    R16, 250
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   ........           CALL    ??_Tidy0
   \   00000030   018E               MOVW    R17:R16, R29:R28
   \   00000032   5F0A               SUBI    R16, 250
   \   00000034   ....               RCALL   ?Subroutine4
    130            
    131          //  if(str_split.size() == 0){
    132          //    Output("\n>> ");
    133          //    return;
    134          //  }
    135            if( 0 < str_split.size())
   \                     ??CrossCallReturnLabel_49:
   \   00000036   810A               LDD     R16, Y+2
   \   00000038   811B               LDD     R17, Y+3
   \   0000003A   8128               LD      R18, Y
   \   0000003C   8139               LDD     R19, Y+1
   \   0000003E   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_44:
   \   00000040   F1B9               BREQ    ??CrossCallReturnLabel_56
    136            {
    137              for( i = 0 ; i < tcs.size() ; i++)
   \   00000042   2444               CLR     R4
   \   00000044   C001               RJMP    ??Input_13
   \                     ??Input_14:
   \   00000046   9443               INC     R4
   \                     ??Input_13:
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   2455               CLR     R5
   \   0000004C   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_13:
   \   0000004E   1640               CP      R4, R16
   \   00000050   0651               CPC     R5, R17
   \   00000052   F570               BRCC    ??CrossCallReturnLabel_56
    138              {
    139                if(*(tcs[i]) == str_split[0])
   \   00000054   E002               LDI     R16, 2
   \   00000056   9E40               MUL     R4, R16
   \   00000058   01C0               MOVW    R25:R24, R1:R0
   \   0000005A   8128               LD      R18, Y
   \   0000005C   8139               LDD     R19, Y+1
   \   0000005E   8D04               LDD     R16, Z+28
   \   00000060   8D15               LDD     R17, Z+29
   \   00000062   0D00               ADD     R16, R0
   \   00000064   1D11               ADC     R17, R1
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   8100               LD      R16, Z
   \   0000006A   8111               LDD     R17, Z+1
   \   0000006C   5F0E               SUBI    R16, 254
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   ........           CALL    ??compare
   \   00000074   2B01               OR      R16, R17
   \   00000076   F739               BRNE    ??Input_14
    140                {
    141                  Output("\n");
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   A062               LDD     R6, Z+34
   \   0000007C   A073               LDD     R7, Z+35
   \   0000007E   ....               LDI     R18, LOW(`?<Constant "\\n">`)
   \   00000080   ....               LDI     R19, (`?<Constant "\\n">`) >> 8
   \   00000082   018E               MOVW    R17:R16, R29:R28
   \   00000084   5F04               SUBI    R16, 244
   \   00000086   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_5:
   \   00000088   018D               MOVW    R17:R16, R27:R26
   \   0000008A   01F3               MOVW    R31:R30, R7:R6
   \   0000008C   ....               RCALL   ??Subroutine37_0
   \                     ??CrossCallReturnLabel_61:
   \   0000008E   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_64:
   \   00000090   5F04               SUBI    R16, 244
   \   00000092   ....               RCALL   ?Subroutine17
    142                  tcs[i]->ExecuteCommand(str_split);
   \                     ??CrossCallReturnLabel_71:
   \   00000094   01FD               MOVW    R31:R30, R27:R26
   \   00000096   8D04               LDD     R16, Z+28
   \   00000098   8D15               LDD     R17, Z+29
   \   0000009A   0F08               ADD     R16, R24
   \   0000009C   1F19               ADC     R17, R25
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   8100               LD      R16, Z
   \   000000A2   8111               LDD     R17, Z+1
   \   000000A4   019E               MOVW    R19:R18, R29:R28
   \   000000A6   01F8               MOVW    R31:R30, R17:R16
   \   000000A8   8947               LDD     R20, Z+23
   \   000000AA   8DF0               LDD     R31, Z+24
   \   000000AC   2FE4               MOV     R30, R20
   \   000000AE   ....               RCALL   ?Subroutine9
    143                  break;
    144                }
    145              }
    146            }
    147            if(tcs.size() == i)
   \                     ??CrossCallReturnLabel_56:
   \   000000B0   01FD               MOVW    R31:R30, R27:R26
   \   000000B2   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_14:
   \   000000B4   1504               CP      R16, R4
   \   000000B6   4010               SBCI    R17, 0
   \   000000B8   F421               BRNE    ??CrossCallReturnLabel_57
    148              Output(errormsg);
   \   000000BA   ....               LDI     R18, LOW(errormsg)
   \   000000BC   ....               LDI     R19, (errormsg) >> 8
   \   000000BE   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_16:
   \   000000C0   ....               RCALL   ?Subroutine9
    149            
    150          //  Output("\n>> ");
    151          }
   \                     ??CrossCallReturnLabel_57:
   \   000000C2   018E               MOVW    R17:R16, R29:R28
   \   000000C4   ........           CALL    ??_Tidy0
   \   000000C8   018E               MOVW    R17:R16, R29:R28
   \   000000CA   ....               RCALL   ??Subroutine35_0
   \                     ??CrossCallReturnLabel_47:
   \   000000CC   96A1               ADIW    R29:R28, 33
   \   000000CE   E0E8               LDI     R30, 8
   \   000000D0   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   8D06               LDD     R16, Z+30
   \   00000002   8D17               LDD     R17, Z+31
   \   00000004   8D24               LDD     R18, Z+28
   \   00000006   8D35               LDD     R19, Z+29
   \   00000008   1B02               SUB     R16, R18
   \   0000000A   0B13               SBC     R17, R19
   \   0000000C   9516               LSR     R17
   \   0000000E   9507               ROR     R16
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   9634               ADIW    R31:R30, 4
   \   00000002   ....               RJMP    ??Subroutine37_0
    152          

   \                                 In  segment CODE, align 2, keep-with-next
    153          void TerminalService::AddCommand(ITerminalCommand & _tc)  
   \                     ??AddCommand:
    154          //void TerminalService::AddCommand(std::shared_ptr<ITerminalCommand>  _tc)
    155          { 
    156          //  assert(ptcs.size() <=defaultParams);
    157          //  assert( 0 != _tc.get());
    158          //  _tc->SetTerminalService(*this);
    159          //  ptcs.push_back(_tc);
    160            
    161            assert(tcs.size() <=defaultParams);  
    162              _tc.SetTerminalService(*this);
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   8300               ST      Z, R16
   \   00000004   8311               STD     Z+1, R17
    163               tcs.push_back(&_tc);
   \   00000006   5E04               SUBI    R16, 228
   \   00000008   4F1F               SBCI    R17, 255
   \   0000000A   ........           JMP     ??_Push_back0_1
    164          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\n">>`:
   \   00000000   000A               DC8 "\012"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r            ">>`:
   \   00000000   200D20202020       DC8 "\015            "
   \              202020202020
   \              0020        
   \                     `?<Initializer for <Constant "\\r>> ">>`:
   \   0000000E   3E0D203E00         DC8 "\015>> "
   \                     `?<Initializer for <Constant " ">>`:
   \   00000013   0020               DC8 " "
   \                     `?<Initializer for <Constant "\\n>> ">>`:
   \   00000015   3E0A203E00         DC8 "\012>> "

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "\\n">`:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for <Constant "\\n">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "\\r            ">`:
   \   00000000                      DS8 14
   \   0000000E                      REQUIRE `?<Initializer for <Constant "\\r            ">>`
   \   0000000E                      DS8 5
   \   00000013                      REQUIRE `?<Initializer for <Constant "\\r>> ">>`
   \   00000013                      DS8 2
   \   00000015                      REQUIRE `?<Initializer for <Constant " ">>`
   \   00000015                      DS8 5
   \   0000001A                      REQUIRE `?<Initializer for <Constant "\\n>> ">>`

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 TerminalService *TerminalService::new TerminalService(unsigned char)
   \                     `??new TerminalService`:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
   \   00000004   E204               LDI     R16, 36
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    `??operator new`
   \   0000000C   2F20               MOV     R18, R16
   \   0000000E   2B21               OR      R18, R17
   \   00000010   F019               BREQ    `??new TerminalService_1`
   \   00000012   2F28               MOV     R18, R24
   \   00000014   ....               RCALL   ??TerminalService
   \   00000016   C002               RJMP    `??new TerminalService_2`
   \                     `??new TerminalService_1`:
   \   00000018   E000               LDI     R16, 0
   \   0000001A   E010               LDI     R17, 0
   \                     `??new TerminalService_2`:
   \   0000001C   9189               LD      R24, Y+
   \   0000001E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002                      REQUIRE ??Subroutine35_0
   \   00000002                      ;               // Fall through to label ??Subroutine35_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine35_0:
   \   00000000   ........           JMP     ??_Zero

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               LDI     R30, LOW(??npos)
   \   00000002   ....               LDI     R31, (??npos) >> 8
   \   00000004   8160               LD      R22, Z
   \   00000006   8171               LDD     R23, Z+1
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_55:
   \   00000002   ........           JMP     ??assign

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_66:
   \   00000002   5D06               SUBI    R16, 214
   \   00000004   ....               RJMP    ?Subroutine17

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   914D               LD      R20, X+
   \   00000002   915C               LD      R21, X
   \   00000004   9711               SBIW    R27:R26, 1
   \   00000006   0192               MOVW    R19:R18, R5:R4
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0186               MOVW    R17:R16, R13:R12
   \   00000002                      REQUIRE ??Subroutine40_0
   \   00000002                      ;               // Fall through to label ??Subroutine40_0

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     TerminalService::AddCommand(ITerminalCommand &)
                                        0      2
       -> _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                        0      2
     TerminalService::Init()            0      2
     TerminalService::Input(char)      71      4
       ->   Indirect call              71      2
       -> string::string(char const *)
                                       71      2
       ->   Indirect call              71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       -> string::string(char const *)
                                       71      2
       ->   Indirect call              71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       -> string::assign(string const &, size_t, size_t)
                                       71      2
       -> string::string(string const &)
                                       71      2
       ->   Indirect call              71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       -> string::_Myptr()             71      2
       -> string::_Myptr()             71      2
       -> string::string(char const *, char const *)
                                       71      2
       -> string::assign(string const &, size_t, size_t)
                                       71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       -> operator+(char const *, string const &)
                                       71      2
       -> operator+(string const &, char const *)
                                       71      2
       ->   Indirect call              71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       ->   Indirect call              71      2
       -> _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                       71      2
       -> _Vector_impl<string, allocator<string>>::_Erase(string *)
                                       71      2
       -> TerminalService::Input(string const &)
                                       71      2
       -> string::clear()              71      2
       -> string::string(char const *)
                                       71      2
       ->   Indirect call              71      2
       -> string::_Tidy(bool, size_t)
                                       71      2
       -> string::_Myptr()             71      2
       -> string::insert(char *, char)
                                       71      2
       ->   Indirect call              71      2
     TerminalService::Input(string const &)
                                       41      4
       -> _Vector_value<allocator<void>>::_Zero()
                                       41      2
       -> split(string const &)        41      2
       -> _Vector_impl<string, allocator<string>>::_Assign(_Vector_impl<string, allocator<string>> const &)
                                       41      2
       -> _Vector_impl<string, allocator<string>>::_Tidy0()
                                       41      2
       -> _Vector_value<allocator<void>>::_Zero()
                                       41      2
       -> string::compare(string const &) const
                                       41      2
       -> string::string(char const *)
                                       41      2
       ->   Indirect call              41      2
       -> string::_Tidy(bool, size_t)
                                       41      2
       ->   Indirect call              41      2
       ->   Indirect call              41      2
       -> _Vector_impl<string, allocator<string>>::_Tidy0()
                                       41      2
       -> _Vector_value<allocator<void>>::_Zero()
                                       41      2
     TerminalService::TerminalService(unsigned char)
                                        2      2
       -> _Vector_value<allocator<void>>::_Zero()
                                        2      2
       -> string::_Tidy(bool, size_t)
                                        2      2
       -> _Vector_value<allocator<void>>::_Zero()
                                        2      2
     TerminalService::isprint(char)     0      2
     TerminalService::new TerminalService(unsigned char)
                                        1      2
       -> operator new(size_t)          1      2
       -> TerminalService::TerminalService(unsigned char)
                                        1      2
     _Backward_copier<unsigned short, true>::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                        0      2
       -> memmove                       0      2
     _Copy_backward_opt0(string const *, string const *, string *)
                                        6      2
       -> string::assign(string const &, size_t, size_t)
                                        6      2
     _Copy_opt0(string const *, string const *, string *)
                                        6      2
       -> string::assign(string const &, size_t, size_t)
                                        6      2
     _Uninit_copy(char const *, char const *, char *)
                                        2      2
       -> memmove                       2      2
     _Uninit_copy0(string const *, string const *, string *)
                                        6      2
       -> string::string(string const &)
                                        6      2
     _Uninitialized_fill_n(string *, unsigned int, string const &, allocator<string> &)
                                        6      2
       -> string::string(string const &)
                                        6      2
     _Vector_impl<string, allocator<string>>::_Assign(_Vector_impl<string, allocator<string>> const &)
                                       14      4
       -> _Vector_impl<string, allocator<string>>::_Tidy0()
                                       14      2
       -> _Vector_value<allocator<void>>::_Zero()
                                       14      2
       -> _Copy_opt0(string const *, string const *, string *)
                                       14      2
       -> _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                       14      2
       -> _Copy_opt0(string const *, string const *, string *)
                                       14      2
       -> _Uninit_copy0(string const *, string const *, string *)
                                       14      2
       -> _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                       14      2
       -> operator delete(void *)      14      2
       -> _Vector_value<allocator<void>>::_Buy(unsigned int)
                                       14      2
       -> _Uninit_copy0(string const *, string const *, string *)
                                       14      2
     _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                        4      2
       -> string::_Tidy(bool, size_t)
                                        4      2
     _Vector_impl<string, allocator<string>>::_Erase(string *)
                                        4      2
       -> _Copy_opt0(string const *, string const *, string *)
                                        4      2
       -> _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                        4      2
     _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                        4      2
       -> _Vector_impl<string, allocator<string>>::_Insert_n(string *, unsigned int, string const &)
                                        4      2
     _Vector_impl<string, allocator<string>>::_Insert_n(string *, unsigned int, string const &)
                                       27      2
       -> string::string(string const &)
                                       27      2
       -> _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                       27      2
       -> string::_Tidy(bool, size_t)
                                       27      2
     _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                        5      2
       -> _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                        5      2
       -> _Uninitialized_fill_n(string *, unsigned int, string const &, allocator<string> &)
                                        5      2
     _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                       16      4
       -> operator new(size_t)         16      2
       -> _Uninit_copy0(string const *, string const *, string *)
                                       16      2
       -> _Uninit_copy0(string const *, string const *, string *)
                                       16      2
       -> _Vector_impl<string, allocator<string>>::_Tidy0()
                                       16      2
       -> _Uninit_copy0(string const *, string const *, string *)
                                       16      2
       -> _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                       16      2
       -> _Uninit_copy0(string const *, string const *, string *)
                                       16      2
       -> _Copy_backward_opt0(string const *, string const *, string *)
                                       16      2
       -> _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                       16      2
     _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                        5      2
       -> _Uninitialized_fill_n(string *, unsigned int, string const &, allocator<string> &)
                                        5      2
       -> _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                        5      2
     _Vector_impl<string, allocator<string>>::_Tidy0()
                                        2      2
       -> _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                        2      2
       -> operator delete(void *)       2      2
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                        4      2
       -> _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                        4      2
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                        6      2
       -> _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                        6      2
       -> _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                        6      2
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                       16      2
       -> operator new(size_t)         16      2
       -> _Uninit_copy(char const *, char const *, char *)
                                       16      2
       -> _Uninit_copy(char const *, char const *, char *)
                                       16      2
       -> operator delete(void *)      16      2
       -> _Backward_copier<unsigned short, true>::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                       16      2
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                        2      2
       -> _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                        2      2
       -> _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                        2      2
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                        0      2
     _Vector_value<allocator<void>>::_Buy(unsigned int)
                                        4      2
       -> _Vector_value<allocator<void>>::_Zero()
                                        4      2
       -> operator new(size_t)          4      2
     _Vector_value<allocator<void>>::_Zero()
                                        0      2
     operator+(char const *, string const &)
                                       25      2
       -> string::string(char const *)
                                       25      2
       -> string::append(string const &, size_t, size_t)
                                       25      2
       -> string::string(string const &)
                                       25      2
       -> string::_Tidy(bool, size_t)
                                       25      2
     operator+(string const &, char const *)
                                       27      2
       -> string::string(string const &)
                                       27      2
       -> strlen                       27      2
       -> string::append(char const *, size_t)
                                       27      2
       -> string::string(string const &)
                                       27      2
       -> string::_Tidy(bool, size_t)
                                       27      2
     string::_Myptr()                   0      2
     string::clear()                    4      2
       -> string::_Myptr()              4      2
       -> string::_Myptr()              4      2
       -> string::erase(char *, char *)
                                        4      2
     string::compare(string const &) const
                                        4      2
       -> string::compare(size_t, size_t, char const *, size_t) const
                                        4      2
     string::erase(char *, char *)      8      2
       -> string::_Myptr()              8      2
       -> string::erase(size_t, size_t)
                                        8      2
       -> string::_Myptr()              8      2
     string::insert(char *, char)       7      2
       -> string::_Myptr()              7      2
       -> string::insert(size_t, size_t, char)
                                        7      2
       -> string::_Myptr()              7      2
     string::string(char const *)       4      2
       -> string::_Tidy(bool, size_t)
                                        4      2
       -> strlen                        4      2
       -> string::assign(char const *, size_t)
                                        4      2
     string::string(char const *, char const *)
                                        6      2
       -> string::_Tidy(bool, size_t)
                                        6      2
       -> string::assign(char const *, size_t)
                                        6      2
     string::string(string const &)     4      2
       -> string::_Tidy(bool, size_t)
                                        4      2
       -> string::assign(string const &, size_t, size_t)
                                        4      2


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     string::string(string const &)                   54
     string::string(char const *)                     46
     string::string(char const *, char const *)
                                                      52
     string::insert(char *, char)                     60
     string::erase(char *, char *)                    74
     string::clear()                                  46
     string::compare(string const &) const
                                                      56
     string::_Myptr()                                 28
     _Copy_opt0(string const *, string const *, string *)
                                                      56
     _Copy_backward_opt0(string const *, string const *, string *)
                                                      56
     _Backward_copier<unsigned short, true>::_Copy(unsigned short const *, unsigned short const *, unsigned short *)
                                                      40
     _Uninit_copy0(string const *, string const *, string *)
                                                      44
     _Uninit_copy(char const *, char const *, char *)
                                                      32
     _Uninitialized_fill_n(string *, unsigned int, string const &, allocator<string> &)
                                                      46
     _Vector_value<allocator<void>>::_Zero()
                                                      18
     _Vector_value<allocator<void>>::_Buy(unsigned int)
                                                      70
     _Vector_impl<string, allocator<string>>::_Tidy0()
                                                      60
     _Vector_impl<string, allocator<string>>::_Destroy(string *, string *)
                                                      36
     _Vector_impl<string, allocator<string>>::_Assign(_Vector_impl<string, allocator<string>> const &)
                                                     236
     ?Subroutine27                                    10
     ?Subroutine25                                     6
     ?Subroutine24                                    12
     ?Subroutine23                                    16
     ?Subroutine22                                     4
     ??Subroutine39_0                                  8
     _Vector_impl<string, allocator<string>>::_Insert_n(string *, unsigned int, string const &)
                                                      52
     _Vector_impl<string, allocator<string>>::_Erase(string *)
                                                      66
     _Vector_impl<string, allocator<string>>::_Make_room(string *, unsigned int)
                                                     306
     ?Subroutine32                                     4
     ??Subroutine40_0                                  4
     ?Subroutine30                                     8
     ?Subroutine29                                    12
     ?Subroutine28                                    12
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Make_room(unsigned short *, unsigned int)
                                                     266
     _Vector_impl<string, allocator<string>>::_Insert0(string *, string const &)
                                                      60
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert0(unsigned short *, unsigned short)
                                                      60
     _Vector_impl<string, allocator<string>>::_Insert_n0(string *, unsigned int, string const &)
                                                      32
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Insert_n0(unsigned short *, unsigned int, unsigned short)
                                                      32
     _Vector_impl<string, allocator<string>>::_Push_back0(string const &)
                                                      66
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Push_back0(unsigned short)
                                                      58
     _Vector_impl<unsigned short, allocator<unsigned short>>::_Ufill(unsigned short *, unsigned int, unsigned short)
                                                      34
     operator+(char const *, string const &)
                                                      62
     operator+(string const &, char const *)
                                                      62
     errormsg                                         49
     TerminalService::TerminalService(unsigned char)
                                                      46
     ??Subroutine36_0                                  6
     TerminalService::Init()                           2
     TerminalService::Input(char)                    446
     ?Subroutine18                                     2
     ?Subroutine14                                    10
     ?Subroutine11                                     6
     ?Subroutine33                                     4
     ?Subroutine10                                     8
     ?Subroutine8                                      4
     ?Subroutine21                                    12
     ?Subroutine19                                    12
     ?Subroutine3                                     16
     ?Subroutine1                                      8
     ?Subroutine20                                     4
     ??Subroutine37_0                                  8
     ?Subroutine17                                     2
     ?Subroutine34                                     4
     ?Subroutine0                                     10
     ??Subroutine38_0                                  4
     ?Subroutine16                                    10
     ?Subroutine13                                    10
     ?Subroutine7                                      4
     ?Subroutine6                                     10
     ctrl                                              2
     listpointer
     TerminalService::isprint(char)                   14
     TerminalService::Input(string const &)
                                                     212
     ?Subroutine12                                    18
     ?Subroutine9                                      4
     TerminalService::AddCommand(ITerminalCommand &)
                                                      14
     ?<Initializer for <Constant "\n">>                2
     ?<Initializer for <Constant "\r            ">>   26
     ?<Constant "\n">                                  2
     ?<Constant "\r            ">                     26
     TerminalService::new TerminalService(unsigned char)
                                                      32
     ?Subroutine4                                      2
     ??Subroutine35_0                                  4
     ?Subroutine15                                    10
     ?Subroutine5                                      6
     ?Subroutine2                                      6
     ?Subroutine26                                    10
     ?Subroutine31                                     2
      Others                                          14

 
 3 344 bytes in segment CODE
    14 bytes in segment INITTAB
    49 bytes in segment NEAR_F
    28 bytes in segment NEAR_I
    28 bytes in segment NEAR_ID
     2 bytes in segment NEAR_Z
 
 1 155 bytes of CODE memory (+ 2 280 bytes shared)
    30 bytes of DATA memory

Errors: none
Warnings: 1
